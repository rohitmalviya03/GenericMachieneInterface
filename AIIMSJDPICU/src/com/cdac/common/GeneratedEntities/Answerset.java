/*******************************************************************************
 * ï¿½ 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.cdac.common.GeneratedEntities;
// Generated Sep 12, 2017 10:07:52 AM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

// TODO: Auto-generated Javadoc
/**
 * Answerset generated by hbm2java.
 */
@Entity
@Table(name = "answerset", catalog = "intraop_dev", uniqueConstraints = @UniqueConstraint(columnNames = "CaseID"))
public class Answerset implements java.io.Serializable
{

	/** The answer set id. */
	private Integer answerSetId;
	
	/** The patient. */
	private Patient patient;
	
	/** The patientcase. */
	private Patientcase patientcase;
	
	/** The signature. */
	private String signature;
	
	/** The submitted on. */
	private String submittedOn;
	
	/** The created on. */
	private Date createdOn;
	
	/** The created by. */
	private String createdBy;
	
	/** The updated on. */
	private Date updatedOn;
	
	/** The updated by. */
	private String updatedBy;
	
	/** The answers. */
	private Set<Answer> answers = new HashSet<Answer>(0);

	/**
	 * Instantiates a new answerset.
	 */
	public Answerset()
	{
	}

	/**
	 * Instantiates a new answerset.
	 *
	 * @param patient the patient
	 * @param patientcase the patientcase
	 */
	public Answerset(Patient patient, Patientcase patientcase)
	{
		this.patient = patient;
		this.patientcase = patientcase;
	}

	/**
	 * Instantiates a new answerset.
	 *
	 * @param patient the patient
	 * @param patientcase the patientcase
	 * @param signature the signature
	 * @param submittedOn the submitted on
	 * @param createdOn the created on
	 * @param createdBy the created by
	 * @param updatedOn the updated on
	 * @param updatedBy the updated by
	 * @param answers the answers
	 */
	public Answerset(Patient patient, Patientcase patientcase, String signature, String submittedOn, Date createdOn,
	        String createdBy, Date updatedOn, String updatedBy, Set<Answer> answers)
	{
		this.patient = patient;
		this.patientcase = patientcase;
		this.signature = signature;
		this.submittedOn = submittedOn;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.updatedOn = updatedOn;
		this.updatedBy = updatedBy;
		this.answers = answers;
	}

	/**
	 * Gets the answer set id.
	 *
	 * @return the answer set id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "AnswerSetID", unique = true, nullable = false)
	public Integer getAnswerSetId()
	{
		return this.answerSetId;
	}

	/**
	 * Sets the answer set id.
	 *
	 * @param answerSetId the new answer set id
	 */
	public void setAnswerSetId(Integer answerSetId)
	{
		this.answerSetId = answerSetId;
	}

	/**
	 * Gets the patient.
	 *
	 * @return the patient
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PatientID", nullable = false)
	public Patient getPatient()
	{
		return this.patient;
	}

	/**
	 * Sets the patient.
	 *
	 * @param patient the new patient
	 */
	public void setPatient(Patient patient)
	{
		this.patient = patient;
	}

	/**
	 * Gets the patientcase.
	 *
	 * @return the patientcase
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CaseID", unique = true, nullable = false)
	public Patientcase getPatientcase()
	{
		return this.patientcase;
	}

	/**
	 * Sets the patientcase.
	 *
	 * @param patientcase the new patientcase
	 */
	public void setPatientcase(Patientcase patientcase)
	{
		this.patientcase = patientcase;
	}

	/**
	 * Gets the signature.
	 *
	 * @return the signature
	 */
	@Column(name = "Signature", length = 45)
	public String getSignature()
	{
		return this.signature;
	}

	/**
	 * Sets the signature.
	 *
	 * @param signature the new signature
	 */
	public void setSignature(String signature)
	{
		this.signature = signature;
	}

	/**
	 * Gets the submitted on.
	 *
	 * @return the submitted on
	 */
	@Column(name = "SubmittedOn", length = 80)
	public String getSubmittedOn()
	{
		return this.submittedOn;
	}

	/**
	 * Sets the submitted on.
	 *
	 * @param submittedOn the new submitted on
	 */
	public void setSubmittedOn(String submittedOn)
	{
		this.submittedOn = submittedOn;
	}

	/**
	 * Gets the created on.
	 *
	 * @return the created on
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedOn", length = 19)
	public Date getCreatedOn()
	{
		return this.createdOn;
	}

	/**
	 * Sets the created on.
	 *
	 * @param createdOn the new created on
	 */
	public void setCreatedOn(Date createdOn)
	{
		this.createdOn = createdOn;
	}

	/**
	 * Gets the created by.
	 *
	 * @return the created by
	 */
	@Column(name = "CreatedBy", length = 45)
	public String getCreatedBy()
	{
		return this.createdBy;
	}

	/**
	 * Sets the created by.
	 *
	 * @param createdBy the new created by
	 */
	public void setCreatedBy(String createdBy)
	{
		this.createdBy = createdBy;
	}

	/**
	 * Gets the updated on.
	 *
	 * @return the updated on
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UpdatedOn", length = 19)
	public Date getUpdatedOn()
	{
		return this.updatedOn;
	}

	/**
	 * Sets the updated on.
	 *
	 * @param updatedOn the new updated on
	 */
	public void setUpdatedOn(Date updatedOn)
	{
		this.updatedOn = updatedOn;
	}

	/**
	 * Gets the updated by.
	 *
	 * @return the updated by
	 */
	@Column(name = "UpdatedBy", length = 45)
	public String getUpdatedBy()
	{
		return this.updatedBy;
	}

	/**
	 * Sets the updated by.
	 *
	 * @param updatedBy the new updated by
	 */
	public void setUpdatedBy(String updatedBy)
	{
		this.updatedBy = updatedBy;
	}

	/**
	 * Gets the answers.
	 *
	 * @return the answers
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerset")
	public Set<Answer> getAnswers()
	{
		return this.answers;
	}

	/**
	 * Sets the answers.
	 *
	 * @param answers the new answers
	 */
	public void setAnswers(Set<Answer> answers)
	{
		this.answers = answers;
	}

}
