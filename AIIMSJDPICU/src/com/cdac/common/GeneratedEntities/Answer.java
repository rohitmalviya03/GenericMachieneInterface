/*******************************************************************************
 * ï¿½ 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.cdac.common.GeneratedEntities;
// Generated Sep 12, 2017 10:07:52 AM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

// TODO: Auto-generated Javadoc
/**
 * Answer generated by hbm2java.
 */
@Entity
@Table(name = "answer", catalog = "intraop_dev")
public class Answer implements java.io.Serializable
{

	/** The answer id. */
	private Integer answerId;
	
	/** The answerset. */
	private Answerset answerset;
	
	/** The question. */
	private Question question;
	
	/** The created on. */
	private Date createdOn;
	
	/** The created by. */
	private String createdBy;
	
	/** The updated on. */
	private Date updatedOn;
	
	/** The updated by. */
	private String updatedBy;

	/**
	 * Instantiates a new answer.
	 */
	public Answer()
	{
	}

	/**
	 * Instantiates a new answer.
	 *
	 * @param answerset the answerset
	 * @param question the question
	 */
	public Answer(Answerset answerset, Question question)
	{
		this.answerset = answerset;
		this.question = question;
	}

	/**
	 * Instantiates a new answer.
	 *
	 * @param answerset the answerset
	 * @param question the question
	 * @param createdOn the created on
	 * @param createdBy the created by
	 * @param updatedOn the updated on
	 * @param updatedBy the updated by
	 */
	public Answer(Answerset answerset, Question question, Date createdOn, String createdBy, Date updatedOn,
	        String updatedBy)
	{
		this.answerset = answerset;
		this.question = question;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.updatedOn = updatedOn;
		this.updatedBy = updatedBy;
	}

	/**
	 * Gets the answer id.
	 *
	 * @return the answer id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "AnswerID", unique = true, nullable = false)
	public Integer getAnswerId()
	{
		return this.answerId;
	}

	/**
	 * Sets the answer id.
	 *
	 * @param answerId the new answer id
	 */
	public void setAnswerId(Integer answerId)
	{
		this.answerId = answerId;
	}

	/**
	 * Gets the answerset.
	 *
	 * @return the answerset
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AnswerSetID", nullable = false)
	public Answerset getAnswerset()
	{
		return this.answerset;
	}

	/**
	 * Sets the answerset.
	 *
	 * @param answerset the new answerset
	 */
	public void setAnswerset(Answerset answerset)
	{
		this.answerset = answerset;
	}

	/**
	 * Gets the question.
	 *
	 * @return the question
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "QuestionID", nullable = false)
	public Question getQuestion()
	{
		return this.question;
	}

	/**
	 * Sets the question.
	 *
	 * @param question the new question
	 */
	public void setQuestion(Question question)
	{
		this.question = question;
	}

	/**
	 * Gets the created on.
	 *
	 * @return the created on
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedOn", length = 19)
	public Date getCreatedOn()
	{
		return this.createdOn;
	}

	/**
	 * Sets the created on.
	 *
	 * @param createdOn the new created on
	 */
	public void setCreatedOn(Date createdOn)
	{
		this.createdOn = createdOn;
	}

	/**
	 * Gets the created by.
	 *
	 * @return the created by
	 */
	@Column(name = "CreatedBy", length = 45)
	public String getCreatedBy()
	{
		return this.createdBy;
	}

	/**
	 * Sets the created by.
	 *
	 * @param createdBy the new created by
	 */
	public void setCreatedBy(String createdBy)
	{
		this.createdBy = createdBy;
	}

	/**
	 * Gets the updated on.
	 *
	 * @return the updated on
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UpdatedOn", length = 19)
	public Date getUpdatedOn()
	{
		return this.updatedOn;
	}

	/**
	 * Sets the updated on.
	 *
	 * @param updatedOn the new updated on
	 */
	public void setUpdatedOn(Date updatedOn)
	{
		this.updatedOn = updatedOn;
	}

	/**
	 * Gets the updated by.
	 *
	 * @return the updated by
	 */
	@Column(name = "UpdatedBy", length = 45)
	public String getUpdatedBy()
	{
		return this.updatedBy;
	}

	/**
	 * Sets the updated by.
	 *
	 * @param updatedBy the new updated by
	 */
	public void setUpdatedBy(String updatedBy)
	{
		this.updatedBy = updatedBy;
	}

}
