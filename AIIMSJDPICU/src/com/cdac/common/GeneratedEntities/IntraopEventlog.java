/*******************************************************************************
 * ï¿½ 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.cdac.common.GeneratedEntities;
// Generated Sep 20, 2017 1:43:28 PM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.cdac.common.audit.interceptor.IAuditLog;

/**
 * IntraopEventlog generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "intraop_eventlog", catalog = "intraop_dev")
public class IntraopEventlog implements java.io.Serializable, IAuditLog
{

	private Integer eventLogId;
	private Patient patient;
	private Patientcase patientcase;
	private IntraopEventsmaster intraopEventsmaster;
	private boolean criticalEvent; 
	private String customEventName;
	private String surgeryType;
	private Date eventTime;
	private String snapshotFileName; 
	private String comments;
	private Date createdTime;
	private String createdBy;
	private String updatedBy;
	private Date updatedTime;

	public IntraopEventlog()
	{
	}

	public IntraopEventlog(String customEventName, Patient patient, Patientcase patientcase,
	        Date eventTime,String snapshotFileName)
	{
		this.customEventName = customEventName;
		this.patient = patient;
		this.patientcase = patientcase;
		this.eventTime = eventTime;
		this.snapshotFileName = snapshotFileName;
	}

	public IntraopEventlog(String customEventName, Patient patient, Patientcase patientcase,
	        Date eventTime,String snapshotFileName, String comments, Date createdTime, String createdBy, String updatedBy, Date updatedTime)
	{
		this.customEventName = customEventName;
		this.patient = patient;
		this.patientcase = patientcase;
		this.eventTime = eventTime;
		this.snapshotFileName = snapshotFileName;
		this.comments = comments;
		this.createdTime = createdTime;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
		this.updatedTime = updatedTime;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "EventLogID", unique = true, nullable = false)
	public Integer getEventLogId()
	{
		return this.eventLogId;
	}

	public void setEventLogId(Integer eventLogId)
	{
		this.eventLogId = eventLogId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EventID")
	public IntraopEventsmaster getIntraopEventsmaster()
	{
		return this.intraopEventsmaster;
	}

	public void setIntraopEventsmaster(IntraopEventsmaster intraopEventsmaster)
	{
		this.intraopEventsmaster = intraopEventsmaster;
	}
	
	/*@Column(name = "Event", length = 250)
	public String getEvent() {
		return event;
	}

	public void setEvent(String event) {
		this.event = event;
	}*/

	@Column(name = "CriticalEvent")
	public boolean isCriticalEvent() {
		return criticalEvent;
	}

	public void setCriticalEvent(boolean criticalEvent) {
		this.criticalEvent = criticalEvent;
	}
	
	@Column(name = "CustomEventName", length = 250)
	public String getCustomEventName() {
		return customEventName;
	}


	public void setCustomEventName(String customEventName) {
		this.customEventName = customEventName;
	}
	
	
	@Column(name = "SurgeryType", length = 250)
	public String getSurgeryType() {
		return surgeryType;
	}

	public void setSurgeryType(String surgeryType) {
		this.surgeryType = surgeryType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PatientID", nullable = false)
	public Patient getPatient()
	{
		return this.patient;
	}


	public void setPatient(Patient patient)
	{
		this.patient = patient;
	}
	//,cascade=CascadeType.ALL,cascade=CascadeType.ALL
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "caseId", nullable = false)
	public Patientcase getPatientcase()
	{
		return this.patientcase;
	}

	public void setPatientcase(Patientcase patientcase)
	{
		this.patientcase = patientcase;
	}
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "EventTime", nullable = false, length = 19)
	public Date getEventTime()
	{
		return this.eventTime;
	}

	public void setEventTime(Date eventTime)
	{
		this.eventTime = eventTime;
	}

	@Column(name = "SnapshotFileName", length = 250)
	public String getSnapshotFileName() {
		return snapshotFileName;
	}

	public void setSnapshotFileName(String snapshotFileName) {
		this.snapshotFileName = snapshotFileName;
	}

	@Column(name = "Comments", length = 200)
	public String getComments()
	{
		return this.comments;
	}

	public void setComments(String comments)
	{
		this.comments = comments;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedTime", length = 19)
	public Date getCreatedTime()
	{
		return this.createdTime;
	}

	public void setCreatedTime(Date createdTime)
	{
		this.createdTime = createdTime;
	}

	@Column(name = "CreatedBy", length = 45)
	public String getCreatedBy()
	{
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy)
	{
		this.createdBy = createdBy;
	}

	@Column(name = "UpdatedBy", length = 45)
	public String getUpdatedBy()
	{
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy)
	{
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UpdatedTime", length = 19)
	public Date getUpdatedTime()
	{
		return this.updatedTime;
	}

	public void setUpdatedTime(Date updatedTime)
	{
		this.updatedTime = updatedTime;
	}

	@Transient
	@Override
	public Long getId()
	{
		return (long) eventLogId;
	}

	@Transient
	@Override
	public String getLogDeatil()
	{
		return toString();
	}

	@Override
	public String toString() {
		return "IntraopEventlog [eventLogId=" + eventLogId + ", intraopEventsmaster=" + intraopEventsmaster
				+ ", customEventName=" + customEventName + ", patient=" + patient + ", patientcase=" + patientcase
				+ ", eventTime=" + eventTime + ", snapshotFileName=" + snapshotFileName + ", comments=" + comments
				+ ", createdTime=" + createdTime + ", createdBy=" + createdBy + ", updatedBy=" + updatedBy
				+ ", updatedTime=" + updatedTime + "]";
	}

}
