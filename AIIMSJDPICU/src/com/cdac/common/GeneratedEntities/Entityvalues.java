/*******************************************************************************
 * ï¿½ 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.cdac.common.GeneratedEntities;
// Generated Sep 12, 2017 10:07:52 AM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

// TODO: Auto-generated Javadoc
/**
 * Entityvalues generated by hbm2java.
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "entityvalues", catalog = "intraop_dev")
public class Entityvalues implements java.io.Serializable
{

	/** The entity value id. */
	private Integer entityValueId;
	
	/** The entity id. */
	private int entityId;
	
	/** The entity value. */
	private String entityValue;
	
	/** The is deleted. */
	private boolean isDeleted;
	
	/** The casevalueses. */
	private Set<Casevalues> casevalueses = new HashSet<Casevalues>(0);

	/**
	 * Instantiates a new entityvalues.
	 */
	public Entityvalues()
	{
	}

	/**
	 * Instantiates a new entityvalues.
	 *
	 * @param entityId the entity id
	 * @param entityValue the entity value
	 * @param isDeleted the is deleted
	 */
	public Entityvalues(int entityId, String entityValue, boolean isDeleted)
	{
		this.entityId = entityId;
		this.entityValue = entityValue;
		this.isDeleted = isDeleted;
	}

	/**
	 * Instantiates a new entityvalues.
	 *
	 * @param entityId the entity id
	 * @param entityValue the entity value
	 * @param isDeleted the is deleted
	 * @param casevalueses the casevalueses
	 */
	public Entityvalues(int entityId, String entityValue, boolean isDeleted, Set<Casevalues> casevalueses)
	{
		this.entityId = entityId;
		this.entityValue = entityValue;
		this.isDeleted = isDeleted;
		this.casevalueses = casevalueses;
	}

	/**
	 * Gets the entity value id.
	 *
	 * @return the entity value id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "EntityValueId", unique = true, nullable = false)
	public Integer getEntityValueId()
	{
		return this.entityValueId;
	}

	/**
	 * Sets the entity value id.
	 *
	 * @param entityValueId the new entity value id
	 */
	public void setEntityValueId(Integer entityValueId)
	{
		this.entityValueId = entityValueId;
	}

	/**
	 * Gets the entity id.
	 *
	 * @return the entity id
	 */
	@Column(name = "EntityId", nullable = false)
	public int getEntityId()
	{
		return this.entityId;
	}

	/**
	 * Sets the entity id.
	 *
	 * @param entityId the new entity id
	 */
	public void setEntityId(int entityId)
	{
		this.entityId = entityId;
	}

	/**
	 * Gets the entity value.
	 *
	 * @return the entity value
	 */
	@Column(name = "EntityValue", nullable = false, length = 250)
	public String getEntityValue()
	{
		return this.entityValue;
	}

	/**
	 * Sets the entity value.
	 *
	 * @param entityValue the new entity value
	 */
	public void setEntityValue(String entityValue)
	{
		this.entityValue = entityValue;
	}

	/**
	 * Checks if is checks if is deleted.
	 *
	 * @return true, if is checks if is deleted
	 */
	@Column(name = "IsDeleted", nullable = false)
	public boolean isIsDeleted()
	{
		return this.isDeleted;
	}

	/**
	 * Sets the checks if is deleted.
	 *
	 * @param isDeleted the new checks if is deleted
	 */
	public void setIsDeleted(boolean isDeleted)
	{
		this.isDeleted = isDeleted;
	}

	/**
	 * Gets the casevalueses.
	 *
	 * @return the casevalueses
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "entityvalues")
	public Set<Casevalues> getCasevalueses()
	{
		return this.casevalueses;
	}

	/**
	 * Sets the casevalueses.
	 *
	 * @param casevalueses the new casevalueses
	 */
	public void setCasevalueses(Set<Casevalues> casevalueses)
	{
		this.casevalueses = casevalueses;
	}

}
