<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">Kogito 1.39.0 released!</title><link rel="alternate" href="https://blog.kie.org/2023/06/kogito-1-39-0-released.html" /><author><name>Cristiano Nicolai</name></author><id>https://blog.kie.org/2023/06/kogito-1-39-0-released.html</id><updated>2023-06-09T12:23:04Z</updated><content type="html">We are glad to announce that the Kogito 1.39.0 release is now available! This goes hand in hand with , release. From a feature point of view, we have included a series of new features and bug fixes, including: * User can now send a custom CloudEvent ID in Serverless Workflow Knative custom functions * Users can now override default behavior of Java service custom type  (which creates object instance using reflection and default constructor)  when using embedded serverless workflow execution (so they can, for example, use a spring boot bean)  * Fixed bug that prevent task deadlines functionality to work * Fixed issue on data translation when using RestWorkItemHandler within a for each state * [SW Operator] Update Serverless Operator to use CNCF go-sdk model * Fixed bug that prevents sending Process, UserTask, and Variable events in knative eventing. For more details head to the complete . All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found . * Kogito images are available on . * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.29.0 artifacts are available at the . A detailed changelog for 1.39.0 can be found in . New to Kogito? Check out our website . Click the "Get Started" button. The post appeared first on .</content><dc:creator>Cristiano Nicolai</dc:creator></entry><entry><title type="html">Eclipse Vert.x JDBC Client 4.4.3.1 released!</title><link rel="alternate" href="https://vertx.io/blog/eclipse-vert-x-jdbc-client-4-3-3-1" /><author><name>Julien Viet</name></author><id>https://vertx.io/blog/eclipse-vert-x-jdbc-client-4-3-3-1</id><updated>2023-06-08T00:00:00Z</updated><content type="html">Eclipse Vert.x JDBC Client version 4.4.3.1 has just been released.</content><dc:creator>Julien Viet</dc:creator></entry><entry><title>Deploy Quarkus applications directly to OpenShift using S2I</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/06/07/deploy-quarkus-applications-openshift-s2i" /><author><name>Yashwanth Maheshwaram</name></author><id>c88a158b-a832-4077-bd5c-6612dbf33401</id><updated>2023-06-07T07:00:00Z</updated><published>2023-06-07T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Quarkus&lt;/a&gt; is a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-native &lt;a href="https://developers.redhat.com/java"&gt;Java&lt;/a&gt; framework that offers a great developer experience, providing extensions for most modern development and management needs while enabling you to write imperative and reactive code. &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; is a unified platform to run your applications at scale while offering a great developer experience for managing applications and their infrastructure. Quarkus and OpenShift are a great combination. Simply put, the combination of OpenShift and Quarkus helps application engineering teams to become highly productive and have a reliable runtime for their applications at scale.&lt;/p&gt; &lt;p&gt;This article shows how you can quickly deploy your applications to OpenShift without worrying about build configs, pipelines, YAML, and deployment configs. We'll use the Source2Image (S2I) approach, in which you specify only the Git repo where the code sits, and OpenShift automatically deploys and make the application available at a URL.&lt;/p&gt; &lt;h2&gt;Deploy your Quarkus application to OpenShift&lt;/h2&gt; &lt;p&gt;For the demonstration, we'll use the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; (available as a no-cost subscription) to deploy our Quarkus application to OpenShift.&lt;/p&gt; &lt;p&gt;Follow the instructions below to create a basic application. Once your application is ready, you'll publish it to a Git repository. For the sake of simplicity, let’s use a readily available Quarkus repository from &lt;a href="https://github.com/quarkusio/quarkus-quickstarts"&gt;https://github.com/quarkusio/quarkus-quickstarts&lt;/a&gt;.&lt;/p&gt; &lt;ol&gt;&lt;li aria-level="1"&gt;Sign up for the free &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;.&lt;/li&gt; &lt;li aria-level="1"&gt;Start your Developer Sandbox (Figure 1). &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-4.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-4.png?itok=1YGHOplq" width="600" height="362" alt="Getting started in the Developer Sandbox for Red Hat OpenShift." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1: Starting your free Developer Sandbox instance.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;Choose the &lt;strong&gt;Import from Git&lt;/strong&gt; option under the &lt;strong&gt;+Add&lt;/strong&gt; section (Figure 2). &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-5.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-5.png?itok=Kh8zSj_O" width="600" height="440" alt="Import code from your Git repository to the Developer Sandbox for Red Hat OpenShift." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2: Select the Import from Git option in the Developer Sandbox.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;Input your Git repo URL (Figure 3). Once you input the repo URL, OpenShift automatically fills in the config to run your application. In this case, we are working with a directory in a larger repository and hence we specify the directory path where our application exists. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-3.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-3.png?itok=7ZTPx2k5" width="600" height="441" alt="Enter the Git repo URL for the Quarkus quick start." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3: Enter the Git repository URL.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;Click &lt;strong&gt;Create&lt;/strong&gt; (Figure 4). &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-7.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-7.png?itok=GKYenb7Z" width="600" height="441" alt="The Create button is marked in the Developer Sandbox UI." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;/li&gt; &lt;li aria-level="1"&gt;Wait for OpenShift to build your application (Figure 5). &lt;figure class="align-center rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-2.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-2.png?itok=0lW7UxwL" width="600" height="440" alt="Waiting for the application to build in OpenShift." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 5: The build in progress.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;Once the process is done, click on the upper-right icon to open your application URL, as shown in Figure 7. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-1.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-1.png?itok=N-borDJV" width="600" height="442" alt="The URL icon displayed in the upper-right corner of the Quarkus application." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 7: Click the icon to open the application URL.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;Congrats—your Quarkus application is now available on OpenShift! (Figure 8). &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/quarkus-source2-image-6.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/quarkus-source2-image-6.png?itok=CcJvhoIZ" width="600" height="381" alt="The Quarkus application upon successful creation." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 8: The Quarkus application upon successful deployment.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You can replicate the same steps on the cluster to deploy Quarkus applications on OpenShift. For more information and to stay updated about Quarkus on OpenShift, visit the &lt;a href="https://developers.redhat.com/products/quarkus/overview "&gt;Red Hat build of Quarkus product page&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/06/07/deploy-quarkus-applications-openshift-s2i" title="Deploy Quarkus applications directly to OpenShift using S2I"&gt;Deploy Quarkus applications directly to OpenShift using S2I&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Yashwanth Maheshwaram</dc:creator><dc:date>2023-06-07T07:00:00Z</dc:date></entry><entry><title type="html">Quarkus 3.1.1.Final released - Maintenance release</title><link rel="alternate" href="https://quarkus.io/blog/quarkus-3-1-1-final-released/" /><author><name>Guillaume Smet</name></author><id>https://quarkus.io/blog/quarkus-3-1-1-final-released/</id><updated>2023-06-07T00:00:00Z</updated><content type="html">We released Quarkus 3.1.1.Final, the first maintenance release of our 3.1 release train. As usual, it contains bugfixes and documentation improvements. It should be a safe upgrade for anyone already using 3.1. If you are not already using 3.1, please refer to the Quarkus 3.1 migration guide. And if you...</content><dc:creator>Guillaume Smet</dc:creator></entry><entry><title type="html">SOAP Web Services with Quarkus made easy</title><link rel="alternate" href="https://www.mastertheboss.com/soa-cloud/quarkus/soap-web-services-with-quarkus-made-easy/" /><author><name>F.Marchioni</name></author><id>https://www.mastertheboss.com/soa-cloud/quarkus/soap-web-services-with-quarkus-made-easy/</id><updated>2023-06-06T12:38:41Z</updated><content type="html">In this step-by-step guide we will learn how to code, run and test SOAP web services using the Quarkus CXF Extensions. We will first learn how to deploy a simple SOAP Web services and then we will consume it with different Clients such as SOAP UI, Java Client or a Camel CXF Consumer. Prerequisites Before ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>How to create an EC2 instance in AWS using Ansible CLI</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/06/05/how-create-ec2-instance-aws-using-ansible-cli" /><author><name>Deepankar Jain</name></author><id>5ddcb81a-a6ef-4bb8-8049-2af1a4f347d5</id><updated>2023-06-05T07:00:00Z</updated><published>2023-06-05T07:00:00Z</published><summary type="html">&lt;p&gt;This is the first article in a series that covers the end-to-end process of creating an Elastic Compute Cloud (EC2) instance on Amazon Web Services (AWS) using &lt;a href="https://developers.redhat.com/products/ansible/"&gt;Red Hat Ansible Automation Platform&lt;/a&gt;. This tutorial demonstrates the steps required to set up the necessary resources to create an EC2 instance using the AWS module in Ansible Automation Platform.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Follow our 3-part series:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Part 1: How to create an EC2 instance in AWS using Ansible CLI&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Part 2: &lt;a href="https://developers.redhat.com/articles/2023/06/05/how-create-ec2-instance-aws-using-ansible-automation"&gt;How to create an EC2 instance in AWS using Ansible Automation&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Part 3: &lt;a href="https://developers.redhat.com/articles/2023/06/05/how-create-ec2-instance-aws-using-ansible-workflow"&gt;How to create an EC2 instance in AWS using Ansible workflow&lt;/a&gt;&lt;/p&gt; &lt;p&gt;By the end of this article, you will have a better understanding of how to use the Ansible Automation Platform CLI to manage an EC2 instance and how it can help to streamline your infrastructure management workflows.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;You must have an active &lt;a href="https://portal.aws.amazon.com/billing/signup#/start/email"&gt;AWS account&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;How to create an EC2 instance&lt;/h2&gt; &lt;p&gt;The following steps demonstrate how to use the Ansible Automation Platform CLI to create an EC2 instance on AWS.&lt;/p&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;Step 1: Generate the access key and secret key from the &lt;a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html"&gt;AWS documentation&lt;/a&gt;.&lt;/li&gt; &lt;li aria-level="1"&gt;Step 2: Open any editor on your local machine and enter the following .yml:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code&gt;--- # Creating an EC2 Instance  - name: Creating an EC2 Instance with ansible cli   hosts: localhost   vars:     region: ap-south-1     instance_type: t3.micro     ami: ami-0f9d9a251c1a44858     key_name: ansible-demo     vpc_name: ansible-vpc-test     cidr_block: "10.10.0.0/16"     cidr: "10.10.0.0/24"     aws_access_key:&lt;YOUR ACCESS KEY&gt;     aws_secret_key: &lt;YOUR SECRET KEY&gt;   tasks:     - name: Create a new VPC        amazon.aws.ec2_vpc_net:         name: "Ansible-Test"         cidr_block: "{{ cidr_block }}"         aws_access_key: "{{ aws_access_key }}"         aws_secret_key: "{{ aws_secret_key }}"         region: "{{ region }}"       register: vpc     - name: Create a new Subnet       amazon.aws.ec2_vpc_subnet:         aws_access_key: "{{ aws_access_key }}"         aws_secret_key: "{{ aws_secret_key }}"         cidr: "{{ cidr }}"         region: "{{ region }}"         vpc_id: "{{ vpc.vpc.id }}"       register: subnet          - name: Create a Security Group         amazon.aws.ec2_security_group:         name: "Ansible-Test-Security-Group"         description: "Ansible-Testing"         aws_access_key: "{{ aws_access_key }}"         aws_secret_key: "{{ aws_secret_key }}"         vpc_id: "{{ vpc.vpc.id }}"         region: "{{ region }}"         rules:           - proto: tcp             ports:             - 80             cidr_ip: 0.0.0.0/0             rule_desc: "allow all on port 80"       register: security_group         - name: Launch an EC2 Instance       amazon.aws.ec2_instance:         name: "Test-Ansible"         key_name: "{{ key_name }}"         aws_access_key: "{{ aws_access_key }}"         aws_secret_key: "{{ aws_secret_key }}"         vpc_subnet_id: "{{ subnet.subnet.id }}"         instance_type: "{{ instance_type }}"         security_group: "{{ security_group.group_id  }}"         count: 1         wait: yes         aws_region: "ap-south-1"         network:           assign_public_ip: true         image_id: "{{ ami }}"&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;Step 3: Save and close the file. &lt;/li&gt; &lt;li aria-level="1"&gt;Step 4: Open the terminal in the directory where the file is located on your local machine.&lt;/li&gt; &lt;li aria-level="1"&gt;Step 5: Run the following command: &lt;pre&gt; &lt;code class="language-bash"&gt;ansible-playbook &lt;filename&gt;.yml&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The output is as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-yaml"&gt;ansible-playbook create_ec2_cli.yml [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all' PLAY [Creating an EC2 Instance with ansible cli] ****************************************************************************************************************************************************************** TASK [Gathering Facts] ******************************************************************************************************************************************************************************************** ok: [localhost] TASK [Create a new VPC] ******************************************************************************************************************************************************************************************* changed: [localhost] TASK [Create a new Subnet] **************************************************************************************************************************************************************************************** changed: [localhost] TASK [Create a Security Group] ************************************************************************************************************************************************************************************ changed: [localhost] TASK [Launch an EC2 Instance] ************************************************************************************************************************************************************************************* changed: [localhost] PLAY RECAP ******************************************************************************************************************************************************************************************************** localhost : ok=5 changed=4 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Figure 1 illustrates the EC2 instance in AWS.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/screenshot_2023-04-28_101134.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/screenshot_2023-04-28_101134.png?itok=u3OP0BGQ" width="600" height="321" alt="A screenshot of the EC2 instance in AWS." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt;&lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt;Figure 1: The EC2 instance in AWS.&lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Stay tuned for more learning opportunities&lt;/h2&gt; &lt;p&gt;In this article, we have demonstrated how to create an EC2 instance using Ansible Automation Platform. By following this step-by-step guide, you should now have a good understanding of how to use Ansible Automation Platform to create an EC2 instance on AWS. To learn more about Ansible Automation Platform and additional resources and guides, including examples and use cases, we recommend visiting the &lt;a href="https://developers.redhat.com/learn/ansible"&gt;Red Hat Ansible Automation Platform&lt;/a&gt; learning portal.&lt;/p&gt; &lt;p&gt;If you are interested in exploring how to use Ansible Automation Platform on Azure, you can try hands-on interactive &lt;a href="https://developers.redhat.com/content-gateway/link/3872066"&gt;labs&lt;/a&gt;. These labs show how to automate infrastructure deployment. To understand automation more in-depth, you can refer to the e-book &lt;a href="https://developers.redhat.com/e-books/it-executives-guide-automation"&gt;An IT executive's guide to automation&lt;/a&gt;, which provides a comprehensive overview of automation's impact on businesses. If you are new to Ansible Automation Platform, you can &lt;a href="https://developers.redhat.com/products/ansible/download"&gt;download it&lt;/a&gt; and get started by exploring interactive labs at no cost. Keep exploring and stay up to date with the latest trends and techniques in cloud infrastructure management on &lt;a href="https://developers.redhat.com/"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In our &lt;a href="https://developers.redhat.com/articles/2023/06/05/how-create-ec2-instance-aws-using-ansible-automation"&gt;next article&lt;/a&gt;, we will explore how &lt;a href="https://developers.redhat.com/products/ansible/overview"&gt;Ansible Automation Platform&lt;/a&gt; further eases the process of creating EC2 instances, by enabling you to define infrastructure as code, track infrastructure changes, and enforce compliance policies.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/06/05/how-create-ec2-instance-aws-using-ansible-cli" title="How to create an EC2 instance in AWS using Ansible CLI"&gt;How to create an EC2 instance in AWS using Ansible CLI&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Deepankar Jain</dc:creator><dc:date>2023-06-05T07:00:00Z</dc:date></entry><entry><title>JBoss Tools for Eclipse 2023-06M2</title><link rel="alternate" type="text/html" href="https://tools.jboss.org/blog/4.28.0.am1.html" /><category term="release" /><category term="jbosstools" /><category term="jbosscentral" /><author><name>sbouchet</name></author><id>https://tools.jboss.org/blog/4.28.0.am1.html</id><updated>2023-06-05T16:14:54Z</updated><published>2023-06-05T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.28.0.AM1 (Developer Milestone 1) build for Eclipse 2023-06M2.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2023-06/4.28.0.AM1.html"&gt;JBoss Tools 4.28.0 AM1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.AM1.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="general"&gt;&lt;a class="anchor" href="#general"&gt;&lt;/a&gt;General&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="components-depreciation"&gt;&lt;a class="anchor" href="#components-depreciation"&gt;&lt;/a&gt;Components Depreciation&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Fuse Tooling is now deprecated. &lt;a href="https://issues.redhat.com/browse/FUSETOOLS-3685"&gt;More information here.&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="components-removal"&gt;&lt;a class="anchor" href="#components-removal"&gt;&lt;/a&gt;Components Removal&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As previously announced &lt;a href="https://issues.redhat.com/browse/JBIDE-28678"&gt;here&lt;/a&gt;, we’ve removed the Central / update tab, SEAM and JSF support from JBossTools.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For central update tab, all the existing central extensions can be installed with the marketplace client, using the entries listed &lt;a href="https://issues.redhat.com/browse/JBIDE-28853"&gt;here.&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="future-releases-cadences"&gt;&lt;a class="anchor" href="#future-releases-cadences"&gt;&lt;/a&gt;Future releases cadences&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting from 4.28.0.Final, there will be no more .AM1 releases. The .Final releases can be now scheduled close to the Eclipse releases.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new Hibernate 6.2 runtime provider incorporates Hibernate Core version 6.2.3.Final, Hibernate Ant version 6.2.3.Final and Hibernate Tools version 6.2.3.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.AM1.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Stéphane Bouchet&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</content><summary>Happy to announce 4.28.0.AM1 (Developer Milestone 1) build for Eclipse 2023-06M2. Downloads available at JBoss Tools 4.28.0 AM1. What is New? Full info is at this page. Some highlights are below. General Components Depreciation Fuse Tooling is now deprecated. More information here. Components Removal As previously announced here, we’ve removed the Central / update tab, SEAM and JSF support from JBossTools. For central update tab, all the existing central extensions can be installed with the marketplace client, using the entries listed here. Future releases cadences Starting from 4.28.0.Final, there will be no more .AM1 releases. The .Final releases can be now scheduled close to the Eclipse releases. Hibernate Tools Runtime Provider Updates A new...</summary><dc:creator>sbouchet</dc:creator><dc:date>2023-06-05T00:00:00Z</dc:date></entry><entry><title>Automate your Quarkus deployment using Ansible</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/06/01/automate-your-quarkus-deployment-using-ansible" /><author><name>Romain Pelisse</name></author><id>0e1a45d5-12ee-44f5-9e84-7181a36393b2</id><updated>2023-06-01T07:00:00Z</updated><published>2023-06-01T07:00:00Z</published><summary type="html">&lt;p&gt;In this article, we’ll explain how to use Ansible to build and deploy a &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Quarkus application&lt;/a&gt;. &lt;a href="https://www.redhat.com/en/topics/cloud-native-apps/what-is-quarkus"&gt;Quarkus&lt;/a&gt; is an exciting, lightweight &lt;a href="https://developers.redhat.com/java"&gt;Java&lt;/a&gt; development framework designed for cloud and &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; deployments, and &lt;a href="https://developers.redhat.com/products/ansible/"&gt;Red Hat Ansible Automation Platform&lt;/a&gt;  is one of the most popular &lt;a href="https://developers.redhat.com/topics/automation"&gt;automation&lt;/a&gt; tools and a star product from Red Hat.&lt;/p&gt; &lt;h2&gt;Set up your Ansible environment&lt;/h2&gt; &lt;p&gt;Before discussing how to automate a Quarkus application deployment using Ansible, we need to ensure the prerequisites are in place. First, you have to install Ansible on your development environment. On a Fedora or a &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; machine, this is achieved easily utilizing the &lt;a href="https://docs.fedoraproject.org/en-US/quick-docs/dnf/"&gt;dnf package manager&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ dnf install ansible-core&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The only other requirement is to install the Ansible collection dedicated to Quarkus:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ansible-galaxy collection install middleware_automation.quarkus&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is all you need to prepare the Ansible control machine (the name given to the machine executing Ansible).&lt;/p&gt; &lt;p&gt;Generally, the &lt;a href="https://docs.ansible.com/ansible/latest/network/getting_started/basic_concepts.html#control-node"&gt;control node&lt;/a&gt; is used to set up other systems that are designated under the name &lt;strong&gt;targets&lt;/strong&gt;. For the purpose of this tutorial, and for simplicity's sake, we are going to utilize the same system for both the control node and our (only) target. This will make it easier to reproduce the content of this article on a single development machine.&lt;/p&gt; &lt;p&gt;Note that you don’t need to set up any kind of Java development environment, because the Ansible collection will take care of that.&lt;/p&gt; &lt;p&gt;The Ansible collection dedicated to Quarkus is a community project, and it’s not supported by Red Hat. However, both Quarkus and Ansible are Red Hat products and thus fully supported. The Quarkus collection might be supported at some point in the future, but is not as the time of the writing of this article.&lt;/p&gt; &lt;h3&gt;Inventory file&lt;/h3&gt; &lt;p&gt;Before we can execute Ansible, we need to provide to the tool an &lt;a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html"&gt;inventory&lt;/a&gt; of the targets. There are many ways to achieve that, but the simplest solution for a tutorial such as this one is to write up an inventory file of our own.&lt;/p&gt; &lt;p&gt;As mentioned above, we are going to use the same host for both the controller and the target, so the inventory file has only one host. Here again, for simplicity's sake, this machine is going to be the localhost: &lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ cat inventory [all] localhost ansible_connection=local&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the Ansible documentation for more information on &lt;a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html"&gt;Ansible inventory&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Build and deploy the app with Ansible&lt;/h2&gt; &lt;p&gt;For this demonstration, we are going to utilize one of the sample applications provided as part of the &lt;a href="https://github.com/quarkusio/quarkus-quickstarts/tree/main/getting-started"&gt;Quarkus quick starts project&lt;/a&gt;. We will use Ansible to build and deploy the &lt;strong&gt;getting started&lt;/strong&gt; application.&lt;/p&gt; &lt;p&gt;All we need to provide to Ansible is the application name, repository URL, and the destination folder, where to deploy the application on the target. Because of the directory structure of the Quarkus quick start, containing several projects, we'll also need to specify the directory containing the source code:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ansible-playbook -i inventory middleware_automation.quarkus.playbook \ -e app_name='optaplanner-quickstart' \ -e quarkus_app_source_folder='optaplanner-quickstart' \ -e quarkus_path_to_folder_to_deploy=/opt/optplanner \ -e quarkus_app_repo_url='https://github.com/quarkusio/quarkus-quickstarts.git'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Below is the output of this command :&lt;/p&gt; &lt;pre&gt; PLAY [Build and deploy a Quarkus app using Ansible] **************************** TASK [Gathering Facts] ********************************************************* ok: [localhost] TASK [Build the Quarkus from https://github.com/quarkusio/quarkus-quickstarts.git.] *** TASK [middleware_automation.quarkus.quarkus : Ensure required parameters are provided.] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Define path to mvnw script.] ***** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure that builder host localhost has appropriate JDK installed: java-17-openjdk] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Delete previous workdir (if requested).] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure app workdir exists: /tmp/workdir] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Checkout the application source code.] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Build the App using Maven] ******* ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Display build application log] *** skipping: [localhost] TASK [Deploy Quarkus app on target.] ******************************************* TASK [middleware_automation.quarkus.quarkus : Ensure required parameters are provided.] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure requirements on target system are fullfilled.] *** included: /root/.ansible/collections/ansible_collections/middleware_automation/quarkus/roles/quarkus/tasks/deploy/prereqs.yml for localhost TASK [middleware_automation.quarkus.quarkus : Ensure required OpenJDK is installed on target.] *** skipping: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure Quarkus system group exists on target system] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure Quarkus user exists on target system.] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure deployement directory exits: /opt/optplanner.] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Set Quarkus app source dir (if not defined).] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Deploy application as a systemd service on target system.] *** included: /root/.ansible/collections/ansible_collections/middleware_automation/quarkus/roles/quarkus/tasks/deploy/service.yml for localhost TASK [middleware_automation.quarkus.quarkus : Deploy application from to target system] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Deploy Systemd configuration for Quarkus app] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Perform daemon-reload to ensure the changes are picked up] *** ok: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure Quarkus app service is running.] *** changed: [localhost] TASK [middleware_automation.quarkus.quarkus : Ensure firewalld configuration is appropriate (if requested).] *** skipping: [localhost] PLAY RECAP ********************************************************************* localhost : ok=19 changed=8 unreachable=0 failed=0 skipped=3 rescued=0 ignored=0 &lt;/pre&gt; &lt;p&gt;As you can see, the Ansible collection for Quarkus does all the heavy lifting for us: its content takes care of checking out the source code from GitHub and builds the application. It also ensures the system used for this step has the required OpenJDK installed on the target machine.&lt;/p&gt; &lt;p&gt;Once the application is successfully built, the collection takes care of the deployment. Here again, it checks that the appropriate OpenJDK is available on the target system. Then, it verifies that the required user and group exist on the target and if not, creates them. This is recommended mostly to be able to run the Quarkus application with a regular user, rather than with the root account.&lt;/p&gt; &lt;p&gt;With those requirements in place, the jars produced during the build phase are copied over to the target, along with the required configuration for the application integration into &lt;a href="https://developers.redhat.com/cheat-sheets/systemd-commands-cheat-sheet"&gt;systemd&lt;/a&gt; as a service. Any change to the systemd configuration requires reloading its daemon, which the collection ensures will happen whenever it is needed. With all of that in place, the collection starts the service itself.&lt;/p&gt; &lt;h2&gt;Validate the execution results &lt;/h2&gt; &lt;p&gt;Let’s take a minute to verify that all went well and that the service is indeed running:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;# systemctl status optaplanner-quickstart.service ● optaplanner-quickstart.service - A Quarkus service named optaplanner-quickstart Loaded: loaded (/usr/lib/systemd/system/optaplanner-quickstart.service; enabled; vendor preset: disabled) Active: active (running) since Wed 2023-04-26 09:40:13 UTC; 3h 19min ago Main PID: 934 (java) CGroup: /system.slice/optaplanner-quickstart.service └─934 /usr/bin/java -jar /opt/optplanner/quarkus-run.jar Apr 26 09:40:13 be44b3acb1f3 systemd[1]: Started A Quarkus service named optaplanner-quickstart. Apr 26 09:40:14 be44b3acb1f3 java[934]: __ ____ __ _____ ___ __ ____ ______ Apr 26 09:40:14 be44b3acb1f3 java[934]: --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ Apr 26 09:40:14 be44b3acb1f3 java[934]: -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\ \ Apr 26 09:40:14 be44b3acb1f3 java[934]: --\___\_\____/_/ |_/_/|_/_/|_|\____/___/ Apr 26 09:40:14 be44b3acb1f3 java[934]: 2023-04-26 09:40:14,843 INFO [io.quarkus] (main) optaplanner-quickstart 1.0.0-SNAPSHOT on JVM (powered by Quarkus 2.16.6.Final) started in 1.468s. Listening on: http://0.0.0.0:8080 Apr 26 09:40:14 be44b3acb1f3 java[934]: 2023-04-26 09:40:14,848 INFO [io.quarkus] (main) Profile prod activated. Apr 26 09:40:14 be44b3acb1f3 java[934]: 2023-04-26 09:40:14,848 INFO [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, hibernate-orm-rest-data-panache, jdbc-h2, narayana-jta, optaplanner, optaplanner-jackson, resteasy-reactive, resteasy-reactive-jackson, resteasy-reactive-links, smallrye-context-propagation, vertx, webjars-locator] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Having the service running is certainly good, but it does not guarantee by itself that the application is available. To double-check, we can simply confirm the accessibility of the application by connecting to it:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;# curl -I http://localhost:8080/ HTTP/1.1 200 OK accept-ranges: bytes content-length: 8533 cache-control: public, immutable, max-age=86400 last-modified: Wed, 26 Apr 2023 10:00:18 GMT date: Wed, 26 Apr 2023 13:00:19 GMT&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Writing up a playbook&lt;/h2&gt; &lt;p&gt;The default playbook provided with the Ansible collection for Quarkus is quite handy and allows you to bootstrap your automation with a single command. However, most likely, you’ll need to write your own playbook so you can add automation required around the deployment of your Quarkus app.&lt;/p&gt; &lt;p&gt;Here is the content of the playbook provided with the collection that you can simply use as a base for your own:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-yaml"&gt;--- - name: "Build and deploy a Quarkus app using Ansible" hosts: all gather_facts: false vars: quarkus_app_repo_url: 'https://github.com/quarkusio/quarkus-quickstarts.git' app_name: optaplanner-quickstart' quarkus_app_source_folder: 'optaplanner-quickstart' quarkus_path_to_folder_to_deploy: '/opt/optaplanner' pre_tasks: - name: "Build the Quarkus from {{ quarkus_app_repo_url }}." ansible.builtin.include_role: name: quarkus tasks_from: build.yml tasks: - name: "Deploy Quarkus app on target." ansible.builtin.include_role: name: quarkus tasks_from: deploy.yml &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To run this playbook, you again use the &lt;code&gt;ansible-playbook &lt;/code&gt;command, but providing the path to the playbook:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ansible-playbook -i inventory playbook.yml&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thanks to the Ansible collection for Quarkus, the work needed to automate the deployment of a Quarkus application is minimal. The collection takes care of most of the heavy lifting and allows its user to focus on the automation needs specific to their application and business needs.&lt;/p&gt; &lt;p&gt;Explore other Ansible tutorials on Red Hat Developer:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2023/04/04/update-and-upgrade-jboss-eap-ansible"&gt;Update and upgrade JBoss EAP with Ansible&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2023/02/20/automate-your-sso-ansible-and-keycloak"&gt;Automate your SSO with Ansible and Keycloak&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/12/22/automate-jboss-web-server-deployment-red-hat-certified-content-collection-jws"&gt;Automate JBoss Web Server deployment with the Red Hat Certified Content Collection for JWS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/04/20/deploy-keycloak-single-sign-ansible"&gt;Deploy Keycloak single sign-on with Ansible&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/21/deploy-infinispan-automatically-ansible"&gt;Deploy Infinispan automatically with Ansible&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/08/automate-and-deploy-jboss-eap-cluster-ansible"&gt;Automate and deploy a JBoss EAP cluster with Ansible&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2021/09/28/set-modcluster-red-hat-jboss-web-server-ansible"&gt;Set up mod_cluster for Red Hat JBoss Web Server with Ansible&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/06/01/automate-your-quarkus-deployment-using-ansible" title="Automate your Quarkus deployment using Ansible"&gt;Automate your Quarkus deployment using Ansible&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2023-06-01T07:00:00Z</dc:date></entry><entry><title type="html">This Week in JBoss - June, 1st 2023</title><link rel="alternate" href="https://www.jboss.org/posts/weekly-2023-06-01.html" /><category term="quarkus" /><category term="java" /><category term="jee" /><category term="micro-profile" /><category term="wildfly" /><category term="ansible" /><category term="kogito" /><category term="keycloak" /><author><name>Romain Pelisse 2023-06-01</name><uri>https://www.jboss.org/people/romain-pelisse 2023-06-01</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2023-06-01.html</id><updated>2023-06-01T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, java, jee, micro-profile, wildfly, ansible, kogito, keycloak"&gt; &lt;h1&gt;This Week in JBoss - June, 1st 2023&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;First and foremost! Dear readers, we want our opinion about the content of the editorial. We know filling up poll can be annoying, so you made as simple as possible…​ Please answer our &lt;strong&gt;one question only&lt;/strong&gt; &lt;a href="https://framadate.org/XbAltuQw4kQDY9At"&gt;poll on our editorial&lt;/a&gt;! Thanks!&lt;/p&gt; &lt;p&gt;Two of the biggest stars of the JBoss ecosystem are for sure Quarkus and, of course, Wildfly, the application server that used to be called, well, JBoss! The last weeks have seen a lot of interesting content and news around those two projects, so we are going to focus this editorial on them. Buckle up, there is a ton of passionating stuff coming your way!&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus"&gt;Quarkus&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;The last two weeks have seen again quite a few interesting news, and content released, for the "Supersonic Subatomic Java" framework Quarkus! On top on the &lt;a href="https://quarkus.io/blog/quarkus-3-1-0-final-released/"&gt;3.1.0.Final release&lt;/a&gt; and the &lt;a href="https://quarkus.io/blog/quarkus-3-0-4-final-released/"&gt;3.0.4.Final release&lt;/a&gt; a new guide to migrate to those versions have been published: &lt;a href="https://quarkus.io/blog/quarkus-3-upgrade/"&gt;Migration to Quarkus 3.0 is a breeze&lt;/a&gt;! No reason to stay behind now, jump on board of Quarkus 3!&lt;/p&gt; &lt;p&gt;I’m also happy to mention that my guide on &lt;a href="https://quarkus.io/guides/ansible"&gt;Automate Quarkus deployment with Ansible&lt;/a&gt; has been added to the website. Hope it helps Quarkus user who wants to automate their deployment!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_be_the_boss_of_wildfly"&gt;Be The Boss of Wildfly&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In the unlikely case, you have never heard of this website, Master The Boss, that has been around since forever, you have a chance to discover today. It has been publishing content on JBoss for over a decade and the articles published in the last week are pretty example of the site’s richness.&lt;/p&gt; &lt;p&gt;First one we wanted to mention is &lt;a href="https://www.mastertheboss.com/keycloak/google-social-login-with-keycloak/"&gt;KeyCloak Social Login Step-by-Step guide&lt;/a&gt;. Keycloak is popular SSO software and social login is certainly worth a mention. Then come two articles more focused on Wildfly. The first one is &lt;a href="https://www.mastertheboss.com/eclipse/eclipse-microservices/microprofile-lra-a-comprehensive-guide/"&gt;MicroProfile LRA: A Comprehensive Guide&lt;/a&gt; and the second is &lt;a href="https://www.mastertheboss.com/eclipse/jboss-tools/using-visual-studio-to-develop-and-manage-wildfly/"&gt;Using Visual Studio to develop and manage WildFly&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_release_roundup"&gt;Release roundup&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;As always the JBoss world is a thriving place thus the last got her fair share of releases:&lt;/p&gt; &lt;div class="ulist square"&gt; &lt;ul class="square"&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-3-1-0-final-released/"&gt;Quarkus 3.1.0.Final released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-3-0-4-final-released/"&gt;Quarkus 3.0.4.Final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.wildfly.org//news/2023/05/23/WildFly2801-Released/"&gt;WildFly 28.0.1 is released!&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://blog.kie.org/2023/05/kogito-1-38-0-released.html"&gt;KOGITO 1.38.0 is released!&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_decaf"&gt;Decaf&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Enough java? Too much jitters? Wants to peek outside the coffee cup for a sec? The decaf’s section is here for you!&lt;/p&gt; &lt;p&gt;To stay on today’s theme, we wanted to mention that my guide on &lt;a href="https://quarkus.io/guides/ansible"&gt;Automate Quarkus deployment with Ansible&lt;/a&gt; has been added to the project’s website. I hope it helps Quarkus user who wants to automate their deployment! And note that there is also a &lt;a href="https://www.wildfly.org/news/2023/01/10/ansible-wildfly/"&gt;Ansible collection (extension) dedicated to Wildfly&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A last note on Ansible, that may interest people of the community. There is a very cool new project called &lt;a href="https://www.ansible.com/blog/getting-started-with-event-driven-ansible"&gt;Event Driven Ansible&lt;/a&gt; using, behind the curtains, another cool project of the JBoss community: &lt;a href="https://www.drools.org/"&gt;Drools&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;&lt;em&gt;That’s all folks! Please join us again in two weeks for another round of our JBoss editorial!&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/romain-pelisse 2023-06-01.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Romain Pelisse 2023-06-01&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;</content><dc:creator>Romain Pelisse 2023-06-01</dc:creator></entry><entry><title>Improvements to static analysis in the GCC 13 compiler</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/05/31/improvements-static-analysis-gcc-13-compiler" /><author><name>David Malcolm</name></author><id>9fcab65e-5911-46ef-862f-4e4d1c3b4504</id><updated>2023-05-31T07:00:00Z</updated><published>2023-05-31T07:00:00Z</published><summary type="html">&lt;p&gt;I work at Red Hat on &lt;a href="https://gcc.gnu.org/"&gt;GCC, the GNU Compiler Collection&lt;/a&gt;. For the last four releases of GCC, I've been working on &lt;code&gt;-fanalyzer&lt;/code&gt;, a static analysis pass that tries to identify various problems at compile-time, rather than at runtime. It performs "symbolic execution" of &lt;a href="https://developers.redhat.com/topics/c"&gt;C&lt;/a&gt; source code—effectively simulating the behavior of the code along the various possible paths of execution through it (with some caveats that we'll discuss).&lt;/p&gt; &lt;p&gt;This article summarizes what's new with &lt;code&gt;-fanalyzer&lt;/code&gt; in &lt;a href="https://gcc.gnu.org/gcc-13/changes.html"&gt;GCC 13&lt;/a&gt;, which has just been released.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;[ Learn more: &lt;a href="https://developers.redhat.com/articles/2023/05/04/new-c-features-gcc-13" target="_blank"&gt;New C features in GCC 13&lt;/a&gt; ] &lt;/strong&gt;&lt;/p&gt; &lt;h2&gt;New warnings&lt;/h2&gt; &lt;p&gt;I first added the analyzer to GCC in &lt;a href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/"&gt;GCC 10&lt;/a&gt;, with 15 new warnings for the compiler, and we've added more in each subsequent release (Table 1).&lt;/p&gt; &lt;table border="1" cellpadding="1" cellspacing="1" width="500"&gt;&lt;caption&gt; &lt;p class="text-align-left"&gt;Table 1: GCC warnings controlled by &lt;code&gt;-fanalyzer&lt;/code&gt; by release&lt;/p&gt; &lt;/caption&gt; &lt;thead&gt;&lt;tr&gt;&lt;th class="text-align-center" scope="row"&gt;Release&lt;/th&gt; &lt;th class="text-align-center" scope="col"&gt;New warnings&lt;/th&gt; &lt;th class="text-align-center" scope="col"&gt;Cumulative warnings&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th class="text-align-center" scope="row"&gt;&lt;a href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10"&gt;GCC 10&lt;/a&gt;&lt;/th&gt; &lt;td class="text-align-center"&gt;15&lt;/td&gt; &lt;td class="text-align-center"&gt;15&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;th class="text-align-center" scope="row"&gt;&lt;a href="https://developers.redhat.com/blog/2021/01/28/static-analysis-updates-in-gcc-11"&gt;GCC 11&lt;/a&gt;&lt;/th&gt; &lt;td class="text-align-center"&gt;7&lt;/td&gt; &lt;td class="text-align-center"&gt;22&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;th class="text-align-center" scope="row"&gt;&lt;a href="https://developers.redhat.com/articles/2022/04/12/state-static-analysis-gcc-12-compiler#"&gt;GCC 12&lt;/a&gt;&lt;/th&gt; &lt;td class="text-align-center"&gt;5&lt;/td&gt; &lt;td class="text-align-center"&gt;27&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;th class="text-align-center" scope="row"&gt;&lt;a href="https://gcc.gnu.org/gcc-13/changes.html"&gt;GCC 13&lt;/a&gt;&lt;/th&gt; &lt;td class="text-align-center"&gt;20&lt;/td&gt; &lt;td class="text-align-center"&gt;47&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As you can see in Table 1, GCC 13 is a big release for &lt;code&gt;-fanalyzer&lt;/code&gt;, adding 20 new warnings. Let's take a look at some of them.&lt;/p&gt; &lt;h3&gt;Track dynamic buffer size&lt;/h3&gt; &lt;p&gt;Can you spot the bug in the following C code?&lt;/p&gt; &lt;pre&gt; &lt;code class="language-c"&gt;#include &lt;stdlib.h&gt; #include &lt;string.h&gt; struct str { size_t len; char data[]; }; struct str * make_str_badly (const char *src) { size_t len = strlen(src); struct str *str = malloc(sizeof(str) + len); if (!str) return NULL; str-&gt;len = len; memcpy(str-&gt;data, src, len); str-&gt;data[len] = '\0'; return str; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;The above example &lt;/span&gt;makes the common mistake with C-style strings of forgetting the null terminator when computing how much space to allocate for &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;GCC 13's &lt;code&gt;-fanalyzer&lt;/code&gt; option now keeps track of the sizes of dynamically allocated buffers, and for many cases it checks the simulated memory reads and writes against the sizes of the relevant buffers. With this new work it detects the above problem by &lt;a href="https://godbolt.org/z/Y3v3c35zY"&gt;emitting this new warning&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;&lt;source&gt;: In function 'make_str_badly': &lt;source&gt;:18:18: warning: heap-based buffer overflow [CWE-122] [-Wanalyzer-out-of-bounds] 18 | str-&gt;data[len] = '\0'; | ~~~~~~~~~~~~~~~^~~~~~ 'make_str_badly': events 1-4 | | 13 | struct str *str = malloc(sizeof(str) + len); | | ^~~~~~~~~~~~~~~~~~~~~~~~~ | | | | | (1) capacity: 'len + 8' bytes | 14 | if (!str) | | ~ | | | | | (2) following 'false' branch (when 'str' is non-NULL)... | 15 | return NULL; | 16 | str-&gt;len = len; | | ~~~~~~~~~~~~~~ | | | | | (3) ...to here | 17 | memcpy(str-&gt;data, src, len); | 18 | str-&gt;data[len] = '\0'; | | ~~~~~~~~~~~~~~~~~~~~~ | | | | | (4) write of 1 byte at offset 'len + 8' exceeds the buffer |&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I want to thank &lt;a href="https://tim-lange.me/gsoc/"&gt;Tim Lange&lt;/a&gt; who implemented this warning as part of Google's Summer of Code program last year (along with two other new warnings: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-allocation-size"&gt;&lt;code&gt;-Wanalyzer-allocation-size&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-imprecise-fp-arithmetic"&gt;&lt;code&gt;-Wanalyzer-imprecise-fp-arithmetic&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &lt;h3&gt;Check if NULL is dereferenced&lt;/h3&gt; &lt;p&gt;Here's an example of another new warning—what's wrong with the following C code?&lt;/p&gt; &lt;pre&gt; &lt;code class="language-c"&gt;#include &lt;assert.h&gt; #include &lt;stdio.h&gt; extern FILE *logfile; struct obj { const char *name; int x; int y; }; int is_within_boundary (struct obj *p, int radius_squared) { fprintf (logfile, "%s: (%i, %i)\n", p-&gt;name, p-&gt;x, p-&gt;y); if (!p) return 0; return (p-&gt;x * p-&gt;x) + (p-&gt;y * p-&gt;y) &lt; radius_squared; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The issue is that the code is unclear about whether &lt;code&gt;p&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;: it's dereferenced unconditionally at the &lt;code&gt;fprintf&lt;/code&gt; call, but then checked for &lt;code&gt;NULL&lt;/code&gt; later on. A pointer that's unconditionally dereferenced can be assumed by a compiler to be non-&lt;code&gt;NULL&lt;/code&gt;, and thus the check against &lt;code&gt;NULL&lt;/code&gt; can potentially be optimized away, which is probably not want you want—but the compiler has no way to know what you meant.&lt;/p&gt; &lt;p&gt;As of GCC 13, the &lt;code&gt;-fanalyzer&lt;/code&gt; option now detects the above by &lt;a href="https://godbolt.org/z/7G35YxoP3"&gt;emitting this warning&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;&lt;source&gt;: In function 'is_within_boundary': &lt;source&gt;:16:6: warning: check of 'p' for NULL after already dereferencing it [-Wanalyzer-deref-before-check] 16 | if (!p) | ^ 'is_within_boundary': events 1-2 | | 15 | fprintf (logfile, "%s: (%i, %i)\n", p-&gt;name, p-&gt;x, p-&gt;y); | | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | | | | | (1) pointer 'p' is dereferenced here | 16 | if (!p) | | ~ | | | | | (2) pointer 'p' is checked for NULL here but it was already dereferenced at (1) | &lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Other new warnings&lt;/h3&gt; &lt;p&gt;I don't have space in this article to give examples of every new warning added in GCC 13, but here's a round-up of the others.&lt;/p&gt; &lt;p&gt;I added support to &lt;code&gt;-fanalyzer&lt;/code&gt; for tracking the state of &lt;code&gt;&lt;stdarg.h&gt;&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-leak"&gt;&lt;code&gt;-Wanalyzer-va-list-leak&lt;/code&gt;&lt;/a&gt; for complaining about missing &lt;code&gt;va_end&lt;/code&gt; after a &lt;code&gt;va_start&lt;/code&gt; or &lt;code&gt;va_copy&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-use-after-va-end"&gt;&lt;code&gt;-Wanalyzer-va-list-use-after-va-end&lt;/code&gt;&lt;/a&gt; for complaining about &lt;code&gt;va_arg&lt;/code&gt; or &lt;code&gt;va_copy&lt;/code&gt; used on a &lt;code&gt;va_list&lt;/code&gt; that's had &lt;code&gt;va_end&lt;/code&gt; called on it&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-arg-type-mismatch"&gt;&lt;code&gt;-Wanalyzer-va-arg-type-mismatch&lt;/code&gt;&lt;/a&gt; for type-checking of &lt;code&gt;va_arg&lt;/code&gt; usage in interprocedural execution paths against the types of the parameters that were actually passed to the variadic call&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-exhausted"&gt;&lt;code&gt;-Wanalyzer-va-list-exhausted&lt;/code&gt;&lt;/a&gt; for complaining in interprocedural execution paths if &lt;code&gt;va_arg&lt;/code&gt; is used too many times on a &lt;code&gt;va_list&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;span dir="ltr"&gt;&lt;a href="https://gist.github.com/mirimmad/9524fa6ada8dda5436447dcc4cfc86f0"&gt;Immad Mir&lt;/a&gt; implemented tracking of file descriptors within the analyzer as part of Google Summer of Code 2022. We added seven new warnings relating to this in GCC 13:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-access-mode-mismatch"&gt;&lt;code&gt;-Wanalyzer-fd-access-mode-mismatch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-double-close"&gt;&lt;code&gt;-Wanalyzer-fd-double-close&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-leak"&gt;&lt;code&gt;-Wanalyzer-fd-leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-phase-mismatch"&gt;&lt;code&gt;-Wanalyzer-fd-phase-mismatch&lt;/code&gt;&lt;/a&gt; (e.g. calling &lt;code&gt;accept&lt;/code&gt; on a socket before calling &lt;code&gt;listen&lt;/code&gt; on it)&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-type-mismatch"&gt;&lt;code&gt;-Wanalyzer-fd-type-mismatch&lt;/code&gt;&lt;/a&gt; (e.g. using a stream socket operation on a datagram socket)&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-use-after-close"&gt;&lt;code&gt;-Wanalyzer-fd-use-after-close&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-use-without-check"&gt;&lt;code&gt;-Wanalyzer-fd-use-without-check&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;along with &lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Common-Function-Attributes.html#index-fd_005farg-function-attribute"&gt;attributes for marking &lt;code&gt;int&lt;/code&gt; function arguments as being file descriptors&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Finally, I implemented various other warnings:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-exposure-through-uninit-copy"&gt;&lt;code&gt;-Wanalyzer-exposure-through-uninit-copy&lt;/code&gt;&lt;/a&gt; (for detecting "infoleaks" in the Linux kernel)&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-infinite-recursion"&gt;&lt;code&gt;-Wanalyzer-infinite-recursion&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-jump-through-null"&gt;&lt;code&gt;-Wanalyzer-jump-through-null&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-putenv-of-auto-var"&gt;&lt;code&gt;-Wanalyzer-putenv-of-auto-var&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-assertion"&gt;&lt;code&gt;-Wanalyzer-tainted-assertion&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;SARIF output&lt;/h2&gt; &lt;p&gt;In GCC 9 I added an option &lt;code&gt;-fdiagnostics-format=json&lt;/code&gt; &lt;span dir="ltr"&gt;to provide &lt;a href="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9#not_just_for_humans"&gt;machine-readable output for GCC's diagnostics&lt;/a&gt;. This is a custom JSON-based format that closely follows GCC's own internal representation.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In the meantime, another JSON-based format has emerged as the standard in this space: &lt;a href="https://sarifweb.azurewebsites.net/"&gt;SARIF (the Static Analysis Results Interchange Format)&lt;/a&gt;. This file format is suited for capturing the results of static analysis tools (like GCC's &lt;code&gt;-fanalyzer&lt;/code&gt;), but it can also be used for plain GCC warnings and errors.&lt;/p&gt; &lt;p&gt;So for GCC 13 I've extended &lt;code&gt;-fdiagnostics-format=&lt;/code&gt; to add two new options implementing SARIF support: &lt;code&gt;-fdiagnostics-format=sarif-stderr&lt;/code&gt; and &lt;code&gt;-fdiagnostics-format=sarif-file&lt;/code&gt;. I've also joined the &lt;a href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=sarif"&gt;technical committee&lt;/a&gt; overseeing the standard.&lt;/p&gt; &lt;p&gt;By producing data in an industry standard format we benefit from interoperability with existing consumers of SARIF data. Figure 1 is a simple example, showing VS Code (with a SARIF plugin) viewing a SARIF file generated by GCC. The IDE is able to annotate the source code, adding squiggly lines under code where GCC finds problems. Here I've clicked on a line where &lt;code&gt;-fanalyzer&lt;/code&gt; reported a double-free bug, and the IDE is showing the path of execution through the code that GCC predicted will trigger the problem.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/2022-06-06-vscode-showing-gcc-sarif-output.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/2022-06-06-vscode-showing-gcc-sarif-output.png?itok=Rg5L9WZ5" width="881" height="689" alt="Screenshot of VS Code showing GCC SARIF output" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1: GCC SARIF output in VS Code.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Fixing false positives&lt;/h2&gt; &lt;p&gt;Static analyzers are not perfect—it's impossible to reason perfectly about the most interesting properties of source code. The GCC analyzer performs a crude simulation of the state of the inside of the program, and I've made many tradeoffs to try to make it fast enough to use when working on code. I receive anecdotal reports that people are using it and it's finding bugs for them earlier than they would have found them otherwise, but there will be false positives and false negatives. The analyzer is a bug-finding tool, rather than a tool for proving program correctness (and, alas, sometimes bugs lead to it being too slow). In technical terms, it's neither "sound" nor "complete." &lt;/p&gt; &lt;p&gt;I've spent the first few months of this year trying to reduce "spam" from the analyzer for GCC 13. I created an &lt;a href="https://github.com/davidmalcolm/gcc-analyzer-integration-tests"&gt;integration testing suite&lt;/a&gt;: I picked various real-world C projects, including Doom, the &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt; kernel, and qemu. I've been building them with their standard options, but with &lt;code&gt;-fanalyzer&lt;/code&gt; added to the build flags, examining the warnings emitted, and trying to fix the false positives.&lt;/p&gt; &lt;p&gt;I made a lot of fixes to the analyzer; Table 2 shows some before and after numbers for the warnings that were most improved by this work, where FP means a "false positive" (a bogus warning about a non-problem) and TP means a "true positive" (a valid warning about a real problem in the source code).&lt;/p&gt; &lt;table border="1" cellpadding="1" cellspacing="1" width="645"&gt;&lt;caption&gt; &lt;p class="text-align-left"&gt;Table 2: Improved warnings.&lt;/p&gt; &lt;/caption&gt; &lt;thead&gt;&lt;tr&gt;&lt;th class="text-align-center"&gt;Warning&lt;/th&gt; &lt;th class="text-align-center"&gt; &lt;p&gt;FP&lt;/p&gt; &lt;p&gt;before&lt;/p&gt; &lt;/th&gt; &lt;th class="text-align-center"&gt; &lt;p&gt;FP&lt;/p&gt; &lt;p&gt;after&lt;/p&gt; &lt;/th&gt; &lt;th class="text-align-center"&gt; &lt;p&gt;TP&lt;/p&gt; &lt;p&gt;before&lt;/p&gt; &lt;/th&gt; &lt;th class="text-align-center"&gt; &lt;p&gt;TP&lt;/p&gt; &lt;p&gt;after&lt;/p&gt; &lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;-Wanalyzer-deref-before-check&lt;/code&gt;&lt;/td&gt; &lt;td class="text-align-right"&gt;63&lt;/td&gt; &lt;td class="text-align-right"&gt;12&lt;/td&gt; &lt;td class="text-align-right"&gt;1&lt;/td&gt; &lt;td class="text-align-right"&gt;1&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;-Wanalyzer-malloc-leak&lt;/code&gt;&lt;/td&gt; &lt;td class="text-align-right"&gt;78&lt;/td&gt; &lt;td class="text-align-right"&gt;50&lt;/td&gt; &lt;td class="text-align-right"&gt;0&lt;/td&gt; &lt;td class="text-align-right"&gt;61&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;-Wanalyzer-use-of-uninitialized-value&lt;/code&gt;&lt;/td&gt; &lt;td class="text-align-right"&gt;998&lt;/td&gt; &lt;td class="text-align-right"&gt;125&lt;/td&gt; &lt;td class="text-align-right"&gt;0&lt;/td&gt; &lt;td class="text-align-right"&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You can see that I eliminated most (but not all) of the false positives from &lt;code&gt;-Wanalyzer-deref-before-check&lt;/code&gt; , and that I reduced the number of FPs from &lt;code&gt;-Wanalyzer-malloc-leak&lt;/code&gt; whilst fixing it so that it correctly detected a bunch of real memory leaks that it had previously missed (in Doom's initialization logic, as it happens). Unfortunately, &lt;code&gt;-Wanalyzer-use-of-uninitialized-value&lt;/code&gt; is still the "spammiest" warning, despite me making a big dent in its number of FPs; it seems to be most prone to exploring paths through the code that can't happen in practice, where the analyzer doesn't have enough high-level information about invariants in the code to figure that out.&lt;/p&gt; &lt;h2&gt;Trying it out&lt;/h2&gt; &lt;p&gt;GCC 13 has been released upstream, and is the system compiler in the &lt;a href="https://fedoramagazine.org/announcing-fedora-38/"&gt;recently-released Fedora 38&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For simple C examples, you can play around with the new GCC online at the &lt;a href="https://godbolt.org/"&gt;Compiler Explorer site&lt;/a&gt;. Select GCC 13.1 and add &lt;code&gt;-fanalyzer&lt;/code&gt; to the compiler options to run static analysis.&lt;/p&gt; &lt;p&gt;As noted above, the analyzer isn't perfect, but I hope it's helpful. Given that every compiler and analyzer finds a slightly different subset of bugs it's usually a good idea to run your code through more than one toolchain to see what shakes out.&lt;/p&gt; &lt;p&gt;Finally, if you're interested in getting involved in compiler development, I've written a &lt;a href="https://gcc-newbies-guide.readthedocs.io/en/latest/"&gt;guide to getting started as a GCC contributor&lt;/a&gt;. It includes lots of ideas for new warnings and features in GCC's Bugzilla.&lt;/p&gt; &lt;p&gt;Have fun!&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/05/31/improvements-static-analysis-gcc-13-compiler" title="Improvements to static analysis in the GCC 13 compiler"&gt;Improvements to static analysis in the GCC 13 compiler&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>David Malcolm</dc:creator><dc:date>2023-05-31T07:00:00Z</dc:date></entry></feed>
