//server.java bkp


package server;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


public class Server {
	static String text = "";
	static List frameList = new ArrayList<>();
	static List multiframeResponse = new ArrayList();		
	static List query_Packet_List = new ArrayList(); // List of all collected Query Packets
	static List order_Packet_List = new ArrayList();
	static StringBuffer order_packet_buffer = new StringBuffer();
	// static int frame_list_counter = 0;
	static int status = 0;
	static int sam_count = 0;
	// static StringBuffer frame1 = new StringBuffer();
	// static StringBuffer frame2 = new StringBuffer();;
	static StringBuffer cobas;
	static StringBuffer host;
	static StringBuffer mode;
	static StringBuffer sampleNo;
	static StringBuffer Query_Message_Id;
	static int counterPID_Packet;
	static int p_packet_count = 1;
	static StringBuffer Query_Message_sender;
	static StringBuffer Query_Message_receiver;
	static StringBuffer Query_Message_date_time;
	static StringBuffer Test_Code;
	static StringBuffer packet = new StringBuffer("741^50076^1^^S1^SC");
	static int StxCounter = 1;
	static StringBuffer newS = new StringBuffer();
	static List testCode = new ArrayList();
	static List<String> Sample_code = new ArrayList<String>();
	static String headerVal = null;
	static int count_ack_BA400_s = 0;

	static List testCode_mapList = new ArrayList();
	static char stx;
	int port;
	static String name_pat = "";
	static String name_pat_last = "";
	static String name_pat_first = "";
	static int count_ack_BA400_o1 = 0;
	static int p = 0;

	static StringBuffer Query_String = new StringBuffer();
	ServerSocket server = null;
	Socket client = null;
	ExecutorService pool = null;
	int clientcount = 0;
	static int Query_Counter = 0;

	static Map res = ReadPropertyFile.getPropertyValues();
	static String formatid = (String) res.get("formatid");
	static String server_port = (String) res.get("serverport");
	static Path path1;
	static String currentDirectory;
	static String path_HIMS_LOG = "";
	static String path_MachineData = "";

	static int server_port1  = Integer.parseInt((String)res.get("server_port"));//6000	;//Integer.parseInt((String) res.get("serverport"));
	static String[] argument;

	static List frameList1 = new ArrayList<>();
	static List frameList2 = new ArrayList<>();
	static List frameList3 = new ArrayList<>();
	static List frameList3_1 = new ArrayList<>();
	static List frameList4 = new ArrayList<>();
	static List main_frameList = new ArrayList<>();
	private static String sampleName;

	public static void main(String[] args) throws IOException {

		System.out.println(server_port);
		argument = args;
		Path currentRelativePath = Paths.get("");
		currentDirectory = currentRelativePath.toAbsolutePath().toString();
		System.out.println("Current absolute path is: " + currentDirectory);
		path_HIMS_LOG = currentDirectory + "\\HIMS_log.txt";
		path_MachineData = currentDirectory + "\\Machine_log.txt";
		try {
			File myObj = new File(path_HIMS_LOG);

			if (myObj.createNewFile()) {
				System.out.println("File created: " + myObj.getName());
				FileWriter fw = new FileWriter(path_HIMS_LOG);
				fw.write("");
				fw.close();
			} else {
				System.out.println("File already exists.");
				FileWriter fw = new FileWriter(path_HIMS_LOG, false);
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write("");
				bw.close();
			}
		} catch (IOException e1) {
			System.out.println("An error occurred.");
			e1.printStackTrace();

		}

		try {
			File myObj = new File(path_MachineData);

			if (myObj.createNewFile()) {
				System.out.println("File created: " + myObj.getName());
				FileWriter fw = new FileWriter(path_MachineData);
				fw.write("");
				fw.close();
			} else {
				System.out.println("File already exists.");
				FileWriter fw = new FileWriter(path_MachineData, false);
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write("");
				bw.close();
			}
		} catch (IOException e1) {
			System.out.println("An error occurred.");
			e1.printStackTrace();

		}
		/*
		 * if (formatid.equals("")) { // Vitros 560 Vitros_client.main(argument); }
		 */
		System.out.println("Format ID==:" + formatid);
		//		if (formatid.equals("20038")) { // BA400_client
		//			BA400_client.main(argument);
		//		}

		Server serverobj = new Server(server_port1);
		serverobj.startServer();
	}

	Server(int port) {
		this.port = port;
		pool = Executors.newFixedThreadPool(5);
	}

	public void startServer() throws IOException {
		// System.out.println("SERVER BOOTED ON PORT==================: "+server_port);
		// System.out.println("SERVER BOOTED ON PORT==================: "+server_port1);

		server = new ServerSocket(server_port1);
		System.out.println("SERVER BOOTED ON PORT: " + this.port);
		System.out.println("ANY CLIENT CAN STOP THE SERVER BY SENDING -1"); // Server Started On Port --------po

		while (true) {
			client = server.accept();
			clientcount++;
			ServerThread runnable = new ServerThread(client, clientcount, this);

			pool.execute(runnable);

		}

	}

	private static class ServerThread implements Runnable {

		Server server = null;
		Socket client = null;
		BufferedReader cin;
		PrintStream cout;
		Scanner sc = new Scanner(System.in);
		int id;
		char s;
		String si;

		ServerThread(Socket client, int count, Server serverR) throws IOException {

			this.client = client;
			this.server = serverR;
			this.id = count;
			System.out.println("CONNECTION " + id + " ESTABLISHED WITH CLIENT " + client);

			//System.out.println("test-----------HORRIBA");


			if (this.client != null) {
				/*
				 * FileWriter fw = new FileWriter("FileName", false); PrintWriter pw = new
				 * PrintWriter(fw, false); pw.flush(); pw.close();
				 */
				String connSucces = "Connection Established successful";
				System.out.println("connected on  ....." + this.client);
				// String fileName = "C:\\TcpFiles\\property\\log.txt";

				DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
				LocalDateTime now = LocalDateTime.now();

				FileWriter fw11 = new FileWriter(path_MachineData, true);
				BufferedWriter bw = new BufferedWriter(fw11);

				bw.write("connection :" + connSucces);
				bw.write("\n");
				bw.write("ip_port------- :" + this.client);
				bw.write("\n");
				bw.write("Date and Time :" + now);
				bw.write("\n");

				bw.flush();
				bw.close();

			} else {

				String connFailure = "Connection not able to established";
				String fileName = "C:\\TcpFiles\\property\\data_Out1.txt";
				FileWriter fw11 = new FileWriter(path_MachineData, true);
				BufferedWriter bw = new BufferedWriter(fw11);

				bw.write("connection :" + connFailure);
				bw.flush();
				bw.close();

			}

			// rahulprasad end--

			cin = new BufferedReader(new InputStreamReader(client.getInputStream())); // Obj To recieve MSg from Client
			cout = new PrintStream(client.getOutputStream()); // Obj For Sending Msg to CLient

		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Runnable#run()
		 */
		public void run() { /// Evertime a Client gets Connect Run method is Called

			System.gc();

			int x = 1, flag = 0, forAck = 0, status = 0;
			int checkBit = 0;
			int sendAck = 0;
			boolean out = false;
			int replyFlag = 0;
			System.out.println(client.getInetAddress());
			StringBuffer reply = new StringBuffer();
			// List<StringBuffer> frameList = new ArrayList<>();
			try {
				char eot = ''; // End-OF-Transmission Bit character
				char enq = '';
				char ack = '';
				String enn = "";
				// char ack = '';

				while (true) { // To keep on chatting unless anyone of client or server shuts-DOWN
					int order_packet_buffer_counter = 0;
					int red = -1;
					byte[] buffer = new byte[5 * 800]; // a read buffer of 5KiB
					byte[] redData;
					StringBuilder clientData = new StringBuilder();
					String redDataText = "";

					while ((red = client.getInputStream().read(buffer)) > -1) // **Code Starts For Receiving Client
						// Messages
					{					

						redData = new byte[red];

						System.arraycopy(buffer, 0, redData, 0, red);

						redDataText = new String(redData, "UTF-8"); // assumption that client sends data UTF-8 encoded
						System.out.println("MESSAGE PART RECIEVED:- " + redDataText);

						// ---------------------------------------

						FileWriter fw11 = new FileWriter(path_MachineData, true);
						BufferedWriter bw = new BufferedWriter(fw11);

						bw.write(" MESSAGE PART RECIEVED:-  :" + redDataText);
						bw.write("\n");
						bw.flush();
						bw.close();
						// added by
						String ackno = "ACK Received";
						String fileName = "C:\\TcpFiles\\property\\data_Out1.txt";

						FileWriter fw2 = new FileWriter(path_MachineData, true);
						BufferedWriter bw2 = new BufferedWriter(fw2);

						bw2.write("Acknowledgment  :" + ack);
						bw2.write("\n");
						bw2.flush();
						bw2.close();


						char[] character_array = redDataText.toCharArray();
						//		char[] character_array = redDataText.substring(0,redDataText.length()-1 ).toCharArray();

						if (character_array.length == 1) {
							if (character_array[0] == enq) {
								cout.print(ack);
								System.out.println("Server: " + ack);

							} else if (character_array[0] == eot) {

								//								cout.print(ack);
								//								System.out.println("Server1: " + ack);
								//								cout.print(enq);
								//								System.out.println("Server1: " + enq);
								if (order_packet_buffer != null && order_packet_buffer.length() != 0) 
								{
									System.out.println("enter eot to filter data and split function");
									redDataText = filterData(order_packet_buffer.toString());
									splitFunction(redDataText,cout); // SEND FOR SAVE
									order_packet_buffer.delete(0, order_packet_buffer.length());// DELETE STRINGBUFFER
									/*
									 * cout.print(ack); System.out.println("Server1: " + ack);
									 */

									order_packet_buffer_counter = 0;
								}

								// ------------------
								//		else if (formatid.equals("20045") || formatid.equals("20017") || formatid.equals("20045")) {

								//									if (character_array[0] == enq) {
								//										cout.print(ack);
								//										System.out.println("Server: " + ack);
								//										
								//									}
								if (character_array[0] == ack || character_array[0] == eot) {
									if (query_Packet_List.size() != 0) // In Case of ACK receive check if query is
										// not null then parse Query
									{
										StringBuilder out1 = new StringBuilder();
										for (Object o : query_Packet_List) {
											out1.append(o.toString());
											out1.append("\t");
										}

										System.out.println(" splitFunction Alinity");

										splitFunction(out1.toString(),cout); // Sends Query 1 bY 1

										query_Packet_List.clear(); // Clears query list cause we received ACK i.e
										// reply with list
										
										if (frameList != null && frameList.size() != 0) {

											if(formatid.equals("20048")) {
												for(int i=0;i<frameList.size();i++) {

													//cout.print(frameList.get(i));
													//System.out.println("Rohit check ENQ: " + frameList.get(0));
													//System.out.println("Server : "+frameList.get(i));

												}
											}
											else {

												cout.print(enq);
												System.out.println("Server"+enq);
											}
											System.out.println("LAST frame"+frameList.size());
										} else {
											cout.print(eot); // if all Query Frames has been sent then send EOT
											System.out.println("Server RRR: " + eot);

											query_Packet_List.clear(); // Clears List to so new list can be made
										}
									} else if (frameList != null && frameList.size() != 0) {
										cout.print(frameList.get(0)); // after every query's frames are sended
										// automatically EOT will be send
										System.out.println("Server MMM: " + frameList.get(0));
										frameList.remove(0);
									}

									else {
										if(!formatid.equals("20047")) {
										cout.print(eot);
										System.out.println("Server DDD: " + eot);
										query_Packet_List.clear();
										}
									}

								}
								//	}
								// ----------------------
								else {
									cout.print(enq);
									System.out.println("Server: " + enq);

								}
							} else if (character_array[0] == ack) {

								// ------------------------
								if (formatid.equals("20011") ||formatid.equals("20012")|| formatid.equals("20043") || formatid.equals("2001145")) { // single packet vitrose
									// 5600
									SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
									String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
									System.out.println("current_time_str2---" + current_time_str2);
									// cout.print(eot);
									// System.out.println("Server: " + eot);
									if (character_array[0] == ack || character_array[0] == eot) {
										if (query_Packet_List.size() != 0) // In Case of ACK receive check if query is
											// not null then parse Query
										{
											StringBuilder out1 = new StringBuilder();
											for (Object o : query_Packet_List) {
												out1.append(o.toString());
												out1.append("\n");
											}


											System.out.println(" after eot ===packet================" + out1.toString());

											//splitFunction(out1.toString()); // Sends Query 1 bY 1
											//											try {
											//												this.wait(50000);
											//											} catch (InterruptedException e) {
											//
											//												e.printStackTrace();
											//											}
											//											try {
											//												TimeUnit.SECONDS.sleep(5);
											//											} catch (InterruptedException e) {
											//												// TODO Auto-generated catch block
											//												e.printStackTrace();
											//											}

											//											try
											//											{
											//											    Thread.sleep(5000);
											//											}
											//											catch(InterruptedException ex)
											//											{
											//											    Thread.currentThread().interrupt();
											//											}
											query_Packet_List.clear(); // Clears query list cause we received ACK i.e
										} // reply with list
										if (frameList != null && frameList.size() != 0) {
											System.out.println("  framelist index===" + p);
											SimpleDateFormat time_formatter1 = new SimpleDateFormat("yyyyMMddHHmmss");
											String current_time_str1 = time_formatter1
													.format(System.currentTimeMillis());
											System.out.println("frameList.size():- " + frameList.size());
											System.out.println("current_time_str:- " + current_time_str1);
											if (count_ack_BA400_o1 != 0) 
											{
												if(frameList.size() > p )
												{cout.print(frameList.get(p)); }
												else
												{	System.out.println("Server: framelist index equal to frameList.size() "+p );
												break;
												}
												// after every query's frames are sended
												// automatically EOT will be send
												System.out.println("Server: " + frameList.get(p));
												// ---------------------------------------

												FileWriter fl1 = new FileWriter(path_MachineData, true);
												BufferedWriter br1 = new BufferedWriter(fl1);

												br1.write("Server: " + frameList.get(p));
												br1.write("\n");
												br1.flush();
												br1.close();
												// --------------------------------------
												SimpleDateFormat time_formatter3 = new SimpleDateFormat(
														"yyyyMMddHHmmss");
												String current_time_str3 = time_formatter3
														.format(System.currentTimeMillis());
												System.out.println("current_time_str2---" + current_time_str3);
												p = p + 1;
												count_ack_BA400_o1 = count_ack_BA400_o1 - 1;

												if (count_ack_BA400_o1 == 0) {
													//													Server.testCode.remove(0);
													//

													Server.testCode.clear();
													Server.testCode_mapList.clear();
													frameList.clear();
													p = 0;
													System.out.println(" clear framelist===");

												}
											}
											// cout.print(frameList.get(0));
											// System.out.println("Server2: " + frameList.get(0));

											// frameList.remove(0);
										}
										//											else {
										//												cout.print(eot); // if all Query Frames has been sent then send EOT
										//												System.out.println("Server: " + eot);
										//
										//												query_Packet_List.clear(); // Clears List to so new list can be made
										//											}

										//										else if (frameList != null && frameList.size() != 0) {
										//											cout.print(frameList.get(0)); // after every query's frames are sended
										//																			// automatically EOT will be send
										//											System.out.println("Server: " + frameList.get(0));
										//											frameList.remove(0);
										//										}

										else {
											cout.print(eot);
											System.out.println("Server: " + eot);
											query_Packet_List.clear();
										}

									}
								}

								// ------------------------

								else if (query_Packet_List.size() != 0) // In Case of ACK receive check if query is not
									// null
									// then parse Query
								{
									for (int i = 0; i < query_Packet_List.size(); i++) {
										//splitFunction((String) query_Packet_List.get(i)); // Sends Query 1 bY 1
									}
									query_Packet_List.clear(); // Clears query list cause we received ACK i.e reply with
									// list
									if (frameList != null && frameList.size() != 0) {
										cout.print(frameList.get(0));
										System.out.println("Server2: " + frameList.get(0));

										frameList.remove(0);
									} else {
										cout.print(eot); // if all Query Frames has been sent then send EOT
										System.out.println("Server: " + eot);

										query_Packet_List.clear(); // Clears List to so new list can be made
									}
								} else if (frameList != null && frameList.size() != 0) {
									// EOT will be send
									StringBuffer resPacket= new StringBuffer();

									if(formatid.equals("2004000")) {

										for(int i=0;i<frameList.size();i++) {

											resPacket.append(frameList.get(i));
										}

										//cout.print(resPacket);
										//	System.out.println("Server KZKKK: " + resPacket);
										//frameList.clear();
									}
									else {
										//cout.print(enq);
										//System.out.println("Server2"+enq);

										if(formatid.equals("20048")) {
											cout.print(eot);
											System.out.println("Server"+eot);}
										else {

											//											System.out.println("RMMM:::"+frameList);
											//cout.print(enq);
											//System.out.println("Server2"+enq);
											cout.print(frameList.get(0)); // after every query's frames are sended automatically
											System.out.println("Server: " + frameList.get(0));
											frameList.remove(0);		
										}
									}





								}

								else {
									cout.print(eot);
									System.out.println("Server: " + eot);
									query_Packet_List.clear();
								}

							} else {
								cout.print(ack);
								System.out.println("Server: " + ack);
							}

						} // *************Outer IF ENDS********
						else {
							if (checkQ(redDataText) == 1) {
								// order_packet_buffer.delete(0,order_packet_buffer.length() );
								cout.print(ack); // If Query Packet Comes Send ACK UNTIL EOT COMES and ADD IN LIST
								System.out.println("Server: " + ack);
								query_Packet_List.add(redDataText);
								//splitFunction(redDataText); // SEND FOR SAVE

								System.out.println("  query_Packet_ADDED:======== " + query_Packet_List.toString());

							} 
							// --------------------------------added by vipul//(formatid.equals("20005"))
							//							else if (formatid.equals("20005")) {
							//								if (Character.toUpperCase(redDataText.charAt(2)) == 'H') {
							//									query_Packet_List.add(redDataText);
							//									System.out.println(" HEADER ADDED TO query_Packet_List: ");
							//								}
							//							}
							////
							//							else if (formatid.equals("20011")) {
							//
							//								if (Character.toUpperCase(redDataText.charAt(2)) == 'H') {
							//									query_Packet_List.clear();
							//									query_Packet_List.add(redDataText);
							//									System.out.println(" HEADER ADDED TO query_Packet_List: ");
							//									cout.print(ack);
							//									System.out.println("Server: " + ack);
							//								} else {
							//									cout.print(ack); // If Query Packet Comes Send ACK UNTIL EOT COMES and ADD IN LIST
							//									System.out.println("Server: " + ack);
							//
							//									System.out.println("  after l packet query_Packet_ADDED:======== "
							//											+ query_Packet_List.toString());
							//
							//								}
							//							}

							// ----------------------------------------added by vipul

							else {
								
								
								/*
								 * if(formatid.equals("100017")) { // chnage only for the aiims bhubneswar
								 * sysmax 100 machine... due to diffrent result data format
								 * Sysmax1000(redDataText,cout); cout.print(ack);
								 * System.out.println("Ack Sent :"+ack); }
								 * 
								 */
								
								
								if (recieved_Packet(redDataText) == 1) // if client sends order packet then send ACK
								{
									query_Packet_List.clear();
									System.out.println("query_Packet_List clear: ");
									/*
									 * if(formatid.equals("20010")) { splitFunction(redDataText); }
									 */
									order_packet_buffer.append(redDataText); // Future use to store all list of
									// Order-Packets and canbe used to send
									//splitFunction(redDataText);							// 1 by
									order_packet_buffer.append(System.getProperty("line.separator"));
									order_packet_buffer_counter = 1;
									cout.print(ack);
									System.out.println("Server: " + ack);

									if (formatid.equals("20041")) { // 20034 //20041

										if (order_packet_buffer != null && order_packet_buffer.length() != 0) {

											System.out.println("filter data and split function");
											redDataText = filterData(order_packet_buffer.toString());
											splitFunction(redDataText,cout); // SEND FOR SAVE
											order_packet_buffer.delete(0, order_packet_buffer.length());// DELETE
											// STRINGBUFFER
											/*
											 * cout.print(ack); System.out.println("Server1: " + ack);
											 */

											order_packet_buffer_counter = 0;
										}

									}

								}
								/*
								 * else if(recieved_Packet1(redDataText)==1) // if client sends order packet
								 * then send ACK {
								 * 
								 * order_packet_buffer.append(redDataText); // Future use to store all list of
								 * Order-Packets and canbe used to send 1 by
								 * order_packet_buffer.append(System.getProperty("line.separator"));
								 * order_packet_buffer_counter = 1; cout.print(ack);
								 * System.out.println("Server: "+ack); }
								 */
								else if (order_packet_buffer_counter == 1) // Append till EOT comes
								{
									order_packet_buffer.append(redDataText);
									order_packet_buffer.append(System.getProperty("line.separator"));
									order_packet_buffer_counter = 1;
									cout.print(ack);
									System.out.println("Server: " + ack);

								} else {
									if (Character.toUpperCase(redDataText.charAt(1)) == 'H') {
										query_Packet_List.clear();
										query_Packet_List.add(redDataText);
										System.out.println(" HEADER ADDED TO query_Packet_List: ");

									}
									cout.print(ack); // if recieved packet is not of our use then send ack
									System.out.println("Server: " + ack);
								}

							}

						}

					} // INNER WHILE LOOP ENDS


					if (out)
						break;

				} // OUTER WHILE LOOP ENDS

				cin.close();
				client.close();
				cout.close();
				if (x == 0) {
					System.out.println("Server cleaning up.");
					System.exit(0);
				}
			} catch (IOException ex) {
				System.out.println("Error : " + ex);
			}

		}
	}

	// -----------------

	public static void parse_sys(List<String> list) {

		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sample = new StringBuffer();

		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = new StringBuffer();
		StringBuffer TestValue = new StringBuffer();
		StringBuffer TestValue1 = new StringBuffer();
		// System.out.println("size:-- "+list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			if (line.length() > 1) {
				if (Character.toUpperCase(line.charAt(2)) == 'O') {
					// System.out.println("
					// Character.toUpperCase(line.charAt(2))========"+Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 3) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}

					}

					System.out.println("SampleID=====================:- " + sampleName.toString().replace("^", ""));

				}

				if (Character.toUpperCase(line.charAt(2)) == 'R') {
					// System.out.println("
					// Character.toUpperCase(line.charAt(2))========"+Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 2) {
							if (!(ch[i] == '|'))
								TestCode.append(ch[i]);
						}

						if (count == 3) {
							if (!(ch[i] == '|'))
								TestValue.append(ch[i]);
						}

						if (count == 4) {
							if (!(ch[i] == '|'))
								TestValue1.append(ch[i]);
						}

					}

					System.out.println("TestCode :- " + TestCode.toString().replace("^", ""));
					System.out.println("TestValue :- " + TestValue);
					System.out.println("TestValue1 :- " + TestValue1);

				}
			}
			if (line.length() == 0 || line == null)
				break;

			char[] ch = line.toCharArray();
			int count = 0;
			for (int i = 0; i < ch.length; i++) {
				sample.append(ch[i]);
			}

			// System.out.println("packet:- "+sample);//Sample ID Read between '|' and '^'

			aBCbkp.insert_GenExpert((TestCode.toString().replace("^", "")).replace("|", ""), TestValue.toString(),
					sampleName.toString());

		}

		// System.out.println( "log print" + list);
	}

	// -----------------------------------------------------------

	// To remove ETB STX AND CHECKSUM
	public static String filterData(String text) {
		int count = 0;
		char[] ch = text.toCharArray();
		StringBuffer buf = new StringBuffer();
		for (int i = 0; i < ch.length; i++) {

			if (Character.isDigit(ch[i])) {
				/*
				 * System.out.println("Character "+ch[i]); int a =
				 * Character.getNumericValue(ch[i]); System.out.println("Numeric Value "+a);
				 * if(a==1) { System.out.println("inside ifffffff"); out = true; break; }
				 */
			}
			if (ch[i] == 5) {
				// forAck = 1;
			}
			if (ch[i] == 4)// check EOT bit and out from loop
			{
				// flag=1;
				break;
			}
			if (ch[i] == 23) {
				//count = i + 6;
				//i = count;
				
				if(formatid.equals("20048")) {
					
					count = i + 7;       //For Cobas 801 Changes [ETB ---- STX+1 Remove]
					 	
				}
				else {
					
					count = i + 6;       //For Cobas 801 Changes [ETB ---- STX+1 Remove]
					 
				}
				 i = count;
							
				
			}
			
			
			else {
				count = 0;

				buf.append(ch[i]);

			}
		}
		return buf.toString();
	}

	// to Check which type of packet came if it is order packet then send for split
	// otherwise SEND ACK
	public static int recieved_Packet(String msg) {
		Reader inputString = new StringReader(msg);
		BufferedReader reader = new BufferedReader(inputString);
		List<String> list = new ArrayList<String>();
		String line;
		int order_packet = 0;
		try {
			while ((line = reader.readLine()) != null) {
				line.subSequence(0, line.length() - 1);
				list.add(line);
			}

			for (String str : list) {

				if (
						(str.length())>2 &&
						(
								Character.toUpperCase(str.charAt(0)) == 'O' || Character.toUpperCase(str.charAt(2)) == 'O'
								|| Character.toUpperCase(str.charAt(1)) == 'O' || Character.toUpperCase(str.charAt(1)) == 'R'
								|| Character.toUpperCase(str.charAt(2)) == 'R' || Character.toUpperCase(str.charAt(2)) == 'P'
								|| Character.toUpperCase(str.charAt(2)) == 'P') 
						) {
					order_packet = 1;
					break;
				} else
					order_packet = 0;
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return order_packet;
	}

	// check if every line in receive packet has STX syntax
	public static int recieved_Packet1(String msg) {
		Reader inputString = new StringReader(msg);
		BufferedReader reader = new BufferedReader(inputString);
		List<String> list = new ArrayList<String>();
		String line;
		int order_packet = 0;
		try {
			while ((line = reader.readLine()) != null) {
				line.subSequence(0, line.length() - 1);
				list.add(line);
			}

			for (String str : list) {

				if (Character.toUpperCase(str.charAt(2)) == 'H' || Character.toUpperCase(str.charAt(2)) == 'O'
						|| Character.toUpperCase(str.charAt(2)) == 'P' || Character.toUpperCase(str.charAt(2)) == 'R'
						|| Character.toUpperCase(str.charAt(2)) == 'L') {
					String output = "";

					for (int i = str.length() - 1; i >= 0; i--) {
						output = output + str.charAt(i);
					}

					if (Character.toUpperCase(output.charAt(2)) == '') {
						order_packet = 1;
						break;
					}
				} else {
					order_packet = 0;
				}
			}

		}

		catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return order_packet;
	}

	// Check For if Packet contains 'Q' then reply a flag to reply ACK to machine
	public static int checkQ(String text) {
		StringBuffer buf = new StringBuffer();
		
		if(formatid.equals("100017")||formatid.equals("100017") ||formatid.equals("20047") || formatid.equals("20058") ||formatid.equals("20049")||formatid.equals("100018")||formatid.equals("20052")||formatid.equals("20053")) {
			text=text.toString().replaceAll("\n", "");	
			text=text.toString().replaceAll("\r", "");	
			
			
		}
		Reader inputString = new StringReader(text);
		BufferedReader reader = new BufferedReader(inputString);
		List<String> list = new ArrayList<String>();
		String str="";
		System.out.println("INSIDE CHECK Q");
		int sendAck = 0;
		
		try {

			while ((str = reader.readLine()) != null) {
				str = str.substring(0, str.length() - 1);
				list.add(str);
			}
			// check for select query
			/// COMMENTED USE IT AS FOR CHECKING QUERY PART
			//if (list.size() == 1) {
			//	buf.append("NO Packet Available");
			//	return 0;
			//}
			String Q ="";
			String Q1="";
			//System.out.println("ROHITTT:: "+list);
			if(list.size()>1) {
				 Q = list.get(0);
				 Q1 = list.get(1);
					if (Q.length() > 2 || Q1.length() > 2) {
						if (Character.toUpperCase(Q.charAt(0)) == 'Q' || Q.contains("Q|1|")) {
							sendAck = 1;
						}
						else if (Character.toUpperCase(Q1.charAt(0)) == 'Q' || Q1.contains("Q|1|")) {
							sendAck = 1;
						}
						else
							sendAck = 0;
					}
					
			}
			else {
				 Q = list.get(0);
				
					if (Q.length() > 2 || Q1.length() > 2) {
						if (Character.toUpperCase(Q.charAt(0)) == 'Q' || Q.contains("Q|1|")) {
							sendAck = 1;
						}
					
						else
							sendAck = 0;
					}
					
			}
			
			
			
				
				
			//}
			
			
			/*
			 * else { sendAck = 0; }
			 */
			/*
			 * else parse(list);
			 */

		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("sendAck-------" + sendAck);
		return sendAck;
	}

	// Make Array of String of single Strings
	public static List splitFunction(String text,PrintStream cout) {
		StringBuffer buf = new StringBuffer();
		Reader inputString = new StringReader(text);
		BufferedReader reader = new BufferedReader(inputString);
		List<String> list = new ArrayList<String>();
		List frameList = new ArrayList<>();
		String str;
		try {

			while ((str = reader.readLine()) != null) {
				if (str != null && str.length() > 1) {
					// str = str.substring(0, str.length() - 1);
					list.add(str);
				}
			}
			// check for select query
			/// COMMENTED USE IT AS FOR CHECKING QUERY PART
			//	if (list.size() == 1) {
			//		buf.append("NO Packet Available");
			//		return frameList;
			//	}

			//System.out.println("<####>"+list.size()+"list------------------"+list);
			String Q = list.get(0);
			String Q1 = list.get(1);//1
			System.out.println("<####>");
			System.out.println("parsing start");
			//System.out.println(" The Value LIST : " + list);
			System.out.println(" The Value of text : " + text);
			System.out.println(" The_Value_of Q" + Q);
			if (Character.toUpperCase(Q.charAt(2)) == 'Q' || Q.contains("Q|1|") || Q1.contains("Q|1|") ||Character.toUpperCase(Q1.charAt(0)) == 'Q') {

				if (formatid.equals("20003"))// genexpert
				{
					frameList = parseSelect(list);
				}
				if (formatid.equals("20017"))// genexpert
				{
					frameList = parseSelect2500(list);
				}

				//if (formatid.equals("20045"))// mispa clinia
				if (formatid.equals("20053"))           //change format id according to selcted machine's  format id 
				{
					frameList = common_parseSelect(list,cout);
				}

				if (formatid.equals("20051"))// genexpert same
				{
					frameList = parseSelect(list);
				}
				
				if (formatid.equals("100017"))// genexpert
				{
					frameList = parseSelect(list);
				}
				
				
				//	if (formatid.equals("20015"));//("20011"))// vitros 5600 //20016 for sysmex 2500
				//{

				//		frameList = common_parseSelect(list);
				//	}
				//if (formatid.equals("20012"))// vitros 5600
				//	{
				//	frameList = common_parseSelect(list);
				//	}

			} 
			else {
				// parse(list); genexpert format ID 20001
				// parse_sysmex800i(list); format ID 20002

				if (formatid.equals("200031")) {
					parse(list);
				}


				if (formatid.equals("20016")) { // SysmexXN350
					SysmexXN350A(list);
				}

				if (formatid.equals("100017")) { // SysmexXL10000 AIIMS Bhubneswar working

					sysmaxXl100BHU(list);

				}
				
				if (formatid.equals("100018")) { // // CS2400 Sysmax

					sysmaxCS2400(list);

				}
				

				if(formatid.equals("20017"))
				{
					System.out.println("Updated on date 12 JAN");
					SysmexXN2500(list);
					//mindray_MispaClinia(list);
				}
				
				
				if (formatid.equals("20045")) { // AIIMS manglagiri BA 400
					mindray_MispaClinia(list);
				}

				if (formatid.equals("20048")) { 
					ERBAXN100TN(list);  //erba aiims bh
				}


				if (formatid.equals("20051")) { // AIIMS Jodhpur  Mindray 20051

					System.out.println("inside 20051");
					mindray_6200(list);


				}


				if (formatid.equals("20050")) { // AIIMS RB SYSMAX  3500 urine analyzer
					parse_AIIMSRB_UA(list);
				}
				
				
				if (formatid.equals("20055")) { // AIIMS JD ATELICA
					AIIMSJDATLICA(list);
				}
				
				
				
				if (formatid.equals("20053")) {
				parseLISMessage(list);
			}

				if (formatid.equals("20046")) {  //added for AIIMS BHU 
					cobas6000_parsing(list);

				}
				
				if (formatid.equals("20047")) {  //added for AIIMS BHU 
					vitros_result_paarse(list);

				}
				
				
				if (formatid.equals("20049")) {  //added for Horriba ASTM  
					Horiba_Astm(list);

				}
				if (formatid.equals("20058")) {
				
					ABG_AIIMSJP(list);
				
				
				}
				





				//				if (formatid.equals("20035")) { // Vitros 560
				//				Vitros_client.main(argument);
				//			}

				if (formatid.equals("20044")) { // simens_atalika
					//	parse_simens_atalika(list);
				}

				//if (formatid.equals("20050")) { // parse_AIIMSRB 18/10/2022
				//				if (formatid.equals("20011")) { // parse_AIIMS Bathinda 18/02/2022	
				//					parse_AIIMSRB(list);
				//				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		if (buf != null)
			return frameList;
		else
			return null;
	}

	// PArse for Select Query
	public static List parseSelect(List<String> list) {
		StringBuffer packet = new StringBuffer();
		List<StringBuffer> frameList = new ArrayList<>();
		List testCode = new ArrayList();
		String line_header = list.get(0);
		//String line = list.get(1);
		String line = list.get(0);

		int count = 0;
		StringBuffer bf = new StringBuffer();
		StringBuffer bf1 = new StringBuffer();

		int count_header = 0;
		StringBuffer bf_header = new StringBuffer();

		// get message id
		if (Character.toUpperCase(line_header.charAt(2)) == 'H') {
			char[] ch = line_header.toCharArray();

			if (Character.toUpperCase(line_header.charAt(2)) == 'H') {

				for (int i = 0; i < ch.length; i++) {
					if (ch[i] == '|')
						count_header++;
					if (count_header == 2) {
						if (!(ch[i] == '|'))
							bf_header.append(ch[i]);
					}

				}
			}
		}

		// get message id

		if (Character.toUpperCase(line.charAt(0)) == 'Q' || line.contains("Q|1|")) {
			char[] ch = line.toCharArray();

			if (Character.toUpperCase(line.charAt(0)) == 'Q' || line.contains("Q|1|")) {

				for (int i = 0; i < ch.length; i++) {

					//if (ch[i] == '|')
					//	count++;

					//					if (count == 2) {
					//						if (!(ch[i] == '|'))
					//							bf.append(ch[i]);
					//					}

					if(ch[i]=='^')
						count++;
					if(count==2) {
						if (!(ch[i] == '^'))
							bf.append(ch[i]);
					}

				}

				//System.out.println("SampleName:- " + bf.toString().trim());// Sample ID Read between '|' and '^'

			}
			/*
			 * for(int i=0;i<ch.length;i++) { if(ch[i]==94)/// ascii value of '^' { count++;
			 * if(count==3) i++; } if(count==3&&count!=4) {
			 * 
			 * bf.append(ch[i]); } if(count==9) { break;
			 * 
			 * } if(count==7) { i++; System.out.println(ch[i]); newS.append(ch[i]); i++;
			 * newS.append(ch[i]); System.out.println("newS"+newS); } if(count>=3)
			 * packet.append(ch[i]); }
			 */

			/*
			 * for(int i=0;i<ch.length;i++) { if(ch[i]=='|') { count++; if(count==2) i++; }
			 * if(count==3&&count!=4) {
			 * 
			 * bf.append(ch[i]); } if(count==9) { break;
			 * 
			 * } if(count==7) { i++; System.out.println(ch[i]); newS.append(ch[i]); i++;
			 * newS.append(ch[i]); System.out.println("newS"+newS); } if(count>=3)
			 * packet.append(ch[i]); }
			 * 
			 * 
			 */

		}
		String[] querySplit = line.split("\\|");
		Server.Sample_code.clear();
		Server.Sample_code.add(querySplit[2]);
		System.out.println("SampleNo. " + bf);
		// get test code
		String it = ABCbkp.getSampleDtl(bf.toString().replace("^", ""));
		
		//it="BASO%;EO%;HCT;HGB;LYMPH%;MCH;MCHC;MCV;MONO%;NEUT%;PLT;RBC;RDW-CV;WBC;#Priyanka Mohapatra    #30 Yr     #F#24112990516#219172401623796#Whole Blood#" ;
		String[] kvPairs = it.split("#");
		StringBuffer st = new StringBuffer(kvPairs[0]);
		StringBuffer st2 = new StringBuffer(kvPairs[1]);
		StringBuffer st3 = new StringBuffer(kvPairs[2]);

		StringBuffer st4 = new StringBuffer(kvPairs[3]);
		StringBuffer st5 = new StringBuffer(kvPairs[5]);
		StringBuffer st6 = new StringBuffer(kvPairs[4]);
		
		


		Server.Test_Code= st;
		Server.name_pat=st2.toString()+"#"+st3.toString()+"#"+st4.toString()+"#"+st5.toString()+"#"+st5.toString();
		
		//System.out.println("hllo"+Server.Test_Code+Server.name_pat);

		//Server.Test_Code = bf1.append(it);
		//	  System.out.println("lt========= "+it);
		// String line2=(((it.replace("{",
		// System.out.print(" new line2---------------- "+line2);
		String[] kv = it.split("#");
		// String key = kv[0];
		// String[] kv1 = key.split(";");
		// String key1 = kv1[0];
		// String value = kv[1];
		// System.out.print(" kv[0] ---------------- "+kv[0]);
		// System.out.print(" kv1[0] ---------------- "+kv1[0]);

		String k[] = st.toString().split(";");


		for(String data:k) {

			testCode.add(data);
		}
		// System.out.print(" k[0] ---------------- "+k[0]);
		// Server.Test_Code = bf1.append(k[0]);
		System.out.println(" Test_Code ---------------- " + Test_Code);
		// TestCodeD

		// get test code
		// TransactionsDao dao = new TransactionsDao();
		// testCode = dao.selectTestCode(bf.toString()); //List of TestCodes from Select
		// Query
		// System.out.println("TESTCODE 0 :--- "+testCode.get(0));
		// Hard_coded TestCodes to make reply
		/*
		 * testCode.add("990");testCode.add("990");testCode.add("990");testCode.add(
		 * "990");testCode.add("990");
		 * testCode.add("991");testCode.add("991");testCode.add("991");testCode.add(
		 * "991");testCode.add("991");
		 * testCode.add("8685");testCode.add("8685");testCode.add("8685");testCode.add(
		 * "8685");testCode.add("8685");
		 * testCode.add("8781");testCode.add("8781");testCode.add("8781");testCode.add(
		 * "8781");testCode.add("8781");
		 * testCode.add("989");testCode.add("989");testCode.add("989");testCode.add(
		 * "989");testCode.add("989");
		 */
		/*
		 * testCode.add("8798");testCode.add("8798");testCode.add("8798");testCode.add(
		 * "8798");testCode.add("8798");
		 * testCode.add("8570");testCode.add("8570");testCode.add("8570");testCode.add(
		 * "8570");testCode.add("8570");
		 * testCode.add("8735");testCode.add("8735");testCode.add("8735");testCode.add(
		 * "8735");testCode.add("8735");
		 * testCode.add("8687");testCode.add("8687");testCode.add("8687");testCode.add(
		 * "8687");testCode.add("8687");
		 * testCode.add("8678");testCode.add("8678");testCode.add("8678");testCode.add(
		 * "8678");testCode.add("8678");
		 * testCode.add("8413");testCode.add("8413");testCode.add("8413");testCode.add(
		 * "8413");testCode.add("8413");
		 * testCode.add("8712");testCode.add("8712");testCode.add("8712");testCode.add(
		 * "8712");testCode.add("8712");
		 * testCode.add("8683");testCode.add("8683");testCode.add("8683");testCode.add(
		 * "8683");testCode.add("8683");
		 * testCode.add("8698");testCode.add("8698");testCode.add("8698");testCode.add(
		 * "8698");testCode.add("8698");
		 * testCode.add("8701");testCode.add("8701");testCode.add("8701");testCode.add(
		 * "8701");testCode.add("8701");
		 * testCode.add("8454");testCode.add("8454");testCode.add("8454");testCode.add(
		 * "8454");testCode.add("8454");
		 * testCode.add("8731");testCode.add("8731");testCode.add("8731");testCode.add(
		 * "8731");testCode.add("8731");
		 * testCode.add("8418");testCode.add("8418");testCode.add("8418");testCode.add(
		 * "8418");testCode.add("8418");
		 * testCode.add("8700");testCode.add("8700");testCode.add("8700");testCode.add(
		 * "8700");testCode.add("8700");
		 * testCode.add("8714");testCode.add("8714");testCode.add("8714");testCode.add(
		 * "8714");testCode.add("8714");
		 */

		/*
		 * testCode.add("8552");testCode.add("8552");testCode.add("8552");testCode.add(
		 * "8552");testCode.add("8552");
		 * testCode.add("8690");testCode.add("8690");testCode.add("8690");testCode.add(
		 * "8690");testCode.add("8690");
		 */
		Server.testCode = testCode;

		Server.packet = packet;
		// System.out.println("Packet "+Server.packet);
		// Server.packet.append("741");
		Server.sampleNo = bf;
		Server.Query_Message_Id = bf_header;
		// Make Packet for Reply
		for (int i = 0; i < list.size(); i++) {
			if (Character.toUpperCase(list.get(i).charAt(0)) == 'H')
				;
			{
				if (formatid.equals("200011"))// genexpert
				{
					frameList = headerParsing(list.get(0));
				}

				if (formatid.equals("200011"))// sys800i
				{
					frameList = headerParsing(list.get(0));
				}
				if (formatid.equals("20003"))// genexpert dinamic mtb sarscov testcode
				{
					frameList = headerParsing_GEN_MTB(list.get(0));
				}

				//				if (formatid.equals("20016"))// sysmax 2500
				//				{
				//					frameList = headerParsing2500(list.get(0));
				//				}
				if (formatid.equals("20016"))// sysmax 2500  // added by rohit for Bi Dir.. RB sysmax 200 20016 formatid
				{
					frameList = sysmax2500RBparseBI(list.get(0));
				}
				
				if (formatid.equals("100017"))// sysmax 2500  // added by rohit for Bi Dir.. AIIMS Jodpur
				{
					frameList = sysmax100BIDIR(list.get(0));
				}
				if (formatid.equals("20053"))// sysmax 2500  // added by rohit for Bi Dir.. AIIMS Jodpur
				{
					frameList =HoribaP580(list.get(0));
				}
				// frameList = headerParsing(list.get(0));
			}

			break;
		}
		// System.out.println("PAcket:-----"+packet);
		return frameList;
	}
	// ------------------------------------------------------------

	public static List sysmex1000_headerParsing_m() {
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		// System.out.println("current_time_str2 after 1 second wait---" +
		// current_time_str3);

		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		//		StringBuffer header1 = new StringBuffer(
		//				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer("H|\\^&|");
		//		header.append(Query_Message_Id);
		header.append("||");
		//	header.append("99^2.00");
		//	header.append(Query_Message_sender);
		header.append("|||||");
		//    header.append(Query_Message_receiver);
		header.append(Query_Message_sender.toString().trim());
		header.append("||P|E1394-97|");
		// header = header.append(Query_Message_date_time);
		header = header.append(current_time_str);

		StringBuffer line4 = new StringBuffer("L|1|N");
		StringBuffer line6 = new StringBuffer("|||F");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;

		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append("||");
		// p.append("|");
		p.append(Server.Sample_code.get(0).toString().trim());
		p.append("|^");
		// p.append("Smith^Tom^J||19600315|M|||A|||icteru||||||01|||||A1|002||||||||");
		// p.append("RR^ABIGAIL^G||19780407|F||843 TALL OAKSDR^HAILVILLE, MD
		// 45831|||RASHAMDRA^SANJAY^V|S|||||||||||U7");
		if (name_pat_first.equals("null")) {
			name_pat_first = "";
			name_pat_last = "";
		}
		if (name_pat_last.equals("null"))
			name_pat_last = "";
		p.append(name_pat_first + "^" + name_pat_last);
		//		 p.append(name_pat.trim()); 

		p.append("||||||||||||||||||||");
		StringBuffer c = new StringBuffer("C|1|I|Patient is complaining of shortness of breath and chest pain.|G");

		StringBuffer Order = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			System.out.println("TIME:- " + time);

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);

				System.out.println("testCode.size------- " + testCode.size());

				frameList.clear();
				frame1.append(stx);
				frame1.append(StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());
				System.out.println("frameList= " + frameList.toString());

				StxCounter = StxCounter + 1;

				frame2.append(stx);
				frame2.append(StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());
				System.out.println("frameList= " + frameList.toString());

				// ====================================================================
				Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append("2^1^" + Server.Sample_code.get(0).toString().trim() + "^B");
				Order.append("||");
				for (int k = 0; k < testCode.size(); k++)

				{
					// Order.append(k + 1);
					Order.append("^^^^");
					Order.append(testCode.get(k));
					// Order.append("+1.0");
					if (k != testCode.size() - 1) {
						// Order.append("^2^1");
						Order.append("\\");

					}

					else {
						// Order.append("^^^");
					}

				}
				Order.append("|");
				Order.append("|||||||||||||||||||||O||||||");
				// Order.append(line6);
				Order.append(cr);

				buf_order.append(Order);
				Order.delete(0, Order.length());

				// System.out.println("buf_order= " + buf_order.toString());

				// --------------------------------------------
				// System.out.println("STRING LENGTH BEFORE FRAMING buf_order= " +
				// buf_order.length());

				// STRING LENGTH BEFORE FRAMING = 235
				int frameCount = 0, first = 0, mid = 0, remain = 0;
				frameCount = FrameCounter(buf_order.length());
				// System.out.println("Char At 0 "+buf.charAt(0));
				int length = buf_order.length();
				// frameList3.clear();
				for (int i = 1; i <= frameCount; i++) {
					if (length < 240)
						// if (length < 306)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
					frame3.append(stx);
					StxCounter = StxCounter + 1;
					// System.out.println("Server.StxCounter " +StxCounter);
					frame3.append(StxCounter);
					// System.out.println("STX COUNTER:- " +StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
						// CHARACTERS
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						// frame.append(CheckSum(buf.substring(first, mid)));
						frame3.append(cr);
						frame3.append(lf);
					}
					// length = length - mid;
					length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
					/*
					 * if(i ==1) frame1.append(frame); else frame2.append(frame);
					 */
					frame3.delete(0, frame3.length());

				}

				buf_order.delete(0, buf_order.length());
				System.out.println("frameList= " + frameList.toString());



				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================

			StxCounter = StxCounter + 1;

			frame4.append(stx);
			frame4.append(StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());

			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			//				System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;

		return frameList;
	}

	// ---------------------------------------------------------------------


	// Data packet for Mindray 6200

	/*
	 * 1H|\^&|7584||Mindray^LabXpert^||||||Automated
	 * Count^00001|P|LIS2-A2|20231007132541 21 P|1|||989262300825808|NAINA
	 * RAM^||^^Y|Male||||||||||||||||971|^ 4A
	 * 3O|1|231003H0881||||20231003210445|||||||||^|User||||NotValidated|||||F DB
	 * 1R|14|^WBC^^6690-2|17.06|10&S&3/uL|4.00^11.00|H^^N^^^^
	 * 2R|15|^NEU#^^751-8|11.32|10&S&3/uL|2.00^7.00|H^^N^^^^
	 * 3R|16|^LYM#^^731-0|4.31|10&S&3/uL|0.80^4.00|H^^N^^^^ A1
	 * 4R|17|^MON#^^742-7|1.23|10&S&3/uL|0.12^1.20|H^^N^^^^ 9C L|1|N 06
	 */


	//end data packet
	public static void mindray_6200(List<String> list) {  // AIIMS Jodhpur Mindray 6200 A , B
		System.out.println("MIndray 6200-------------:::::Rohit M 08/10:::::");
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode;
		StringBuffer TestValue;		
		ABCbkp aBCbkp = new ABCbkp();
		Map<String, List> mp = new HashMap();  //added by Rohit...
		List <String> testCode = new ArrayList<>();
		List <String> testValue = new ArrayList<>();
		List <String> testCodeupdated = new ArrayList<>();
		List <String> testValueupdated = new ArrayList<>();

		int r = 0;
		for (String line : list) {

			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();


			if (line.length() > 2) {
				if(line.contains("O|")) {

					char[] ch = line.toCharArray();
					int count = 0;
					int count_tn = 0;
					int count_or_cr = 0;
					for (int i = 0; i < ch.length; i++) {				

						if (ch[i] == '|') {
							count++;
							if (count == 3)
								i++;
						}
						if (count == 2) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}

						if (count == 3) {
							break;
						}				
					}

					System.out.println("SampleName  =:- " + sampleName);
				}

				if(line.contains("R|")) {		
					int ct = 0;
					char[] ch = line.toCharArray();
					int count_pipe = 0;
					int count_carr = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count_pipe++;

						if (count_pipe == 2 && ch[i] == '^') {
							count_carr++;
							if (count_carr == 1)
								i++;
						}

						if (count_carr == 1 && !(ch[i] == '^')) {
							TestCode.append(ch[i]);

						}

						if (count_carr == 2) {
							break;
						}
					}


					int count = 0;
					int count1 = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|') {
							count1++;
							if (count1 == 3)
								i++;
						}
						if ( count == 4)
							break;
						if (count1 == 3 && !(ch[i] == '|')) {
							TestValue.append(ch[i]);
							String str2 = TestValue.toString().replace("^", "");
							TestValue.delete(0, TestValue.length());
							//			TestValue.append(str2);
							TestValue.append(str2.replaceAll("[^0-9.]", "").trim());

						}
					}



					StringBuffer testcode1 =new StringBuffer();;
					StringBuffer testvalue1=new StringBuffer();;

					//					if(TestCode.toString().trim().contains("#")) {
					//						TestCode.toString().replaceAll("#", "*");
					//						testcode1.append(TestCode.toString().replaceAll("#", "*$"));
					//						
					//					}
					//					else if(TestCode.toString().trim().contains("%"))
					//					{
					//						TestCode.toString().replaceAll("%", "_$");
					//						testcode1.append(TestCode.toString().replaceAll("%", "_$"));
					//						
					//					}
					//					
					//					
					//					System.out.println("testcode 2222"+testcode1);
					//					


					//if(TestCode.toString().trim().length() >=3 && TestCode.toString().trim().length() <=6  )
					//{
					testCode.add(TestCode.toString().trim());
					//}

					//System.out.println("Testcode =:- " + TestCode.toString());	 testValue.add(TestValue.toString()); //added by rohit...
					//System.out.println("Testvalue  =:- " + TestValue);

					//if(TestValue.toString().trim().equals(""))
					testValue.add(TestValue.toString().trim());




				}




				//	System.out.println("test Code"+testCode +"test Value"+testValue);

				//if (!TestCode.toString().trim().equals("")&& r>14 && !sampleName.toString().trim().equals("")) {
				//	r++;
				StringBuffer Tv1 = new StringBuffer();
				//double Tv_db = Double.parseDouble(TestValue.toString());
				//TestValue = TestValue.delete(0, TestValue.length());

				//Tv1.append(String.format("%.2f", Tv_db));
				//System.out.println("Updated TestValue :- " + Tv1);
				//TestValue.append((Tv1.toString()));


				//					if(TestCode.toString().trim().length() >=3 && TestCode.toString().trim().length() <=6  )
				//					{	
				//						//if(TestCode.toString().contains("%") || TestCode.toString().contains("#")&&TestCode.toString().contains("-") ) {
				//							
				//							
				//							
				//					//	}
				//						
				//							}


				//	}


			}

		}


		for(int i=0;i<testCode.size();i++) {
			String str= (String) testCode.get(i);
			String str1 ="";


			//			if(str=="WBC" ||str=="NEU#" || str=="LYM#" || str=="MON#" || str=="EOS#" || str=="BAS#" || str=="IMG#" || str=="NEU%" || str=="LYM%" || str=="MON%" || str=="EOS%" || str=="BAS%" || str=="IMG%" || str=="RBC" || str=="HGB" || str=="HCT" || str=="MCV" || str=="MCH" || str=="MCHC" || str=="RDW-CV" || str=="RDW-SD" || str=="PLT" || str=="MPV" || str=="PDW" || str=="PCT" || str=="PLCC" || str=="NRBC#" || str=="NRBC%" || str=="PLCR" ) {
			//				testCodeupdated.add(str);
			//				testValueupdated.add(str1);
			//				
			//			}

			if(str.equals("WBC")|| str.equals("NEU#") || str.equals("LYM#") || str.equals("MON#") || str.equals("EOS#") || str.equals("BAS#") || str.equals("IMG#") || str.equals("NEU%") || str.equals("LYM%") || str.equals("MON%") || str.equals("EOS%") || str.equals("BAS%") || str.equals("IMG%") || str.equals("RBC") || str.equals("HGB") || str.equals("HCT") || str.equals("MCV") || str.equals("MCH") || str.equals("MCHC") || str.equals("RDW-CV") || str.equals("RDW-SD") || str.equals("PLT") || str.equals("MPV") || str.equals("PDW") || str.equals("PCT") || str.equals("PLCC") || str.equals("NRBC#") || str.equals("NRBC%") || str.equals("PLCR") ) {
				int index= testCode.indexOf(str);
				//System.out.println("index"+index +str);
				str1=(String) testValue.get(index);
				//	System.out.println("---->>"+str1);
				testCodeupdated.add(str);
				testValueupdated.add(str1);
			}





		}	
		//System.out.println("incoming Test Code "+testCode);
		//System.out.println("after filter Test Code "+testCodeupdated);
		//System.out.println("after filter Test value "+testValueupdated);




		mp.put("TestCode", testCodeupdated);
		mp.put("TestValue", testValueupdated);


		aBCbkp.insert_SysmexXN350(mp,sampleName.toString().trim());	



	}

	public static List parseSelect2500(List<String> list) {
		StringBuffer packet = new StringBuffer();
		List<StringBuffer> frameList = new ArrayList<>();
		List testCode = new ArrayList();
		String line = list.get(1);
		int count = 0;
		StringBuffer bf = new StringBuffer();

		if (Character.toUpperCase(line.charAt(0)) == 'Q') {
			char[] ch = line.toCharArray();

			if (Character.toUpperCase(line.charAt(0)) == 'Q') {

				for (int i = 0; i < ch.length; i++) {

					if (ch[i] == '|')
						count++;

					if (count == 2) {
						if (!(ch[i] == '|'))
							bf.append(ch[i]);
					}

				}

				System.out.println("SampleName:- " + bf);// Sample ID Read between '|' and '^'

			}
			/*
			 * for(int i=0;i<ch.length;i++) { if(ch[i]==94)/// ascii value of '^' { count++;
			 * if(count==3) i++; } if(count==3&&count!=4) {
			 * 
			 * bf.append(ch[i]); } if(count==9) { break;
			 * 
			 * } if(count==7) { i++; System.out.println(ch[i]); newS.append(ch[i]); i++;
			 * newS.append(ch[i]); System.out.println("newS"+newS); } if(count>=3)
			 * packet.append(ch[i]); }
			 */

			/*
			 * for(int i=0;i<ch.length;i++) { if(ch[i]=='|') { count++; if(count==2) i++; }
			 * if(count==3&&count!=4) {
			 * 
			 * bf.append(ch[i]); } if(count==9) { break;
			 * 
			 * } if(count==7) { i++; System.out.println(ch[i]); newS.append(ch[i]); i++;
			 * newS.append(ch[i]); System.out.println("newS"+newS); } if(count>=3)
			 * packet.append(ch[i]); }
			 * 
			 * 
			 */

		}
		System.out.println("SampleNo " + bf);
		// TransactionsDao dao = new TransactionsDao();
		// testCode = dao.selectTestCode(bf.toString()); //List of TestCodes from Select
		// Query
		ABCbkp aBCbkp = new ABCbkp();
		//testCode = abc.getSampleDtlB(bf.toString());
		aBCbkp.getSampleDtlB(bf.toString());
		System.out.println("testcode" + testCode);
		// System.out.println("TESTCODE 0 :--- "+testCode.get(0));
		// Hard_coded TestCodes to make reply
		/*
		 * testCode.add("990");testCode.add("990");testCode.add("990");testCode.add(
		 * "990");testCode.add("990");
		 * testCode.add("991");testCode.add("991");testCode.add("991");testCode.add(
		 * "991");testCode.add("991");
		 * testCode.add("8685");testCode.add("8685");testCode.add("8685");testCode.add(
		 * "8685");testCode.add("8685");
		 * testCode.add("8781");testCode.add("8781");testCode.add("8781");testCode.add(
		 * "8781");testCode.add("8781");
		 * testCode.add("989");testCode.add("989");testCode.add("989");testCode.add(
		 * "989");testCode.add("989");
		 */
		/*
		 * testCode.add("8798");testCode.add("8798");testCode.add("8798");testCode.add(
		 * "8798");testCode.add("8798");
		 * testCode.add("8570");testCode.add("8570");testCode.add("8570");testCode.add(
		 * "8570");testCode.add("8570");
		 * testCode.add("8735");testCode.add("8735");testCode.add("8735");testCode.add(
		 * "8735");testCode.add("8735");
		 * testCode.add("8687");testCode.add("8687");testCode.add("8687");testCode.add(
		 * "8687");testCode.add("8687");
		 * testCode.add("8678");testCode.add("8678");testCode.add("8678");testCode.add(
		 * "8678");testCode.add("8678");
		 * testCode.add("8413");testCode.add("8413");testCode.add("8413");testCode.add(
		 * "8413");testCode.add("8413");
		 * testCode.add("8712");testCode.add("8712");testCode.add("8712");testCode.add(
		 * "8712");testCode.add("8712");
		 * testCode.add("8683");testCode.add("8683");testCode.add("8683");testCode.add(
		 * "8683");testCode.add("8683");
		 * testCode.add("8698");testCode.add("8698");testCode.add("8698");testCode.add(
		 * "8698");testCode.add("8698");
		 * testCode.add("8701");testCode.add("8701");testCode.add("8701");testCode.add(
		 * "8701");testCode.add("8701");
		 * testCode.add("8454");testCode.add("8454");testCode.add("8454");testCode.add(
		 * "8454");testCode.add("8454");
		 * testCode.add("8731");testCode.add("8731");testCode.add("8731");testCode.add(
		 * "8731");testCode.add("8731");
		 * testCode.add("8418");testCode.add("8418");testCode.add("8418");testCode.add(
		 * "8418");testCode.add("8418");
		 * testCode.add("8700");testCode.add("8700");testCode.add("8700");testCode.add(
		 * "8700");testCode.add("8700");
		 * testCode.add("8714");testCode.add("8714");testCode.add("8714");testCode.add(
		 * "8714");testCode.add("8714");
		 */

		/*
		 * testCode.add("8552");testCode.add("8552");testCode.add("8552");testCode.add(
		 * "8552");testCode.add("8552");
		 * testCode.add("8690");testCode.add("8690");testCode.add("8690");testCode.add(
		 * "8690");testCode.add("8690");
		 */
		Server.testCode = testCode;

		Server.packet = packet;
		// System.out.println("Packet "+Server.packet);
		// Server.packet.append("741");
		Server.sampleNo = bf;
		// Make Packet for Reply
		for (int i = 0; i < list.size(); i++) {
			if (Character.toUpperCase(list.get(i).charAt(0)) == 'H')
				;
			{
				if (formatid.equals("20001"))// genexpert
				{
					frameList = headerParsing(list.get(0));
				}

				if (formatid.equals("20003"))// genexpert
				{
					frameList = headerParsing(list.get(0));
				}

				if (formatid.equals("20002"))// sys800i
				{
					frameList = headerParsing(list.get(0));
				}

				// frameList = headerParsing(list.get(0));
			}

			break;
		}
		// System.out.println("PAcket:-----"+packet);
		return frameList;
	}


	//header parsing sysmax 2500

	public static List headerParsing(String line) {
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();

		// H|@^\|GXM-88424724426||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD -
		// 110000888^GeneXpert^6.4||||| LIS||P|1394-97|20211229171329
		// P|1|||p1
		// O|1|2912OP0250||^^^SARSCOV2|R|20071116133208|||||A||||ORH||||||||||Q

		// O|1||2912OP0250||^^SARSCOV2|R|20211229183655||||||A||||ORH||||||||||Q
		// O|1||2912OP0250|||R|20211229183655||||||P||||ORH||||||||||I
		// L|1|F

		// StringBuffer header = new StringBuffer("H|\\^&|||host|||||cobas
		// 8000^1.06|TSDWN|P|1|");
		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer(
				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		header = header.append(current_time_str);
		StringBuffer line3 = new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|F");
		StringBuffer line6 = new StringBuffer("||||P||||ORH||||||||||Q");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		StringBuffer p = new StringBuffer("P|1||||^^^^|||||||||||||||||||||||||||||");
		// StringBuffer Order = new StringBuffer("O|1||");
		StringBuffer Order = new StringBuffer("O|1");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {
			for (int i = 0; i < array.length; i++) {
				// stx = array[0];
				if (array[i] == '|') {
					CountPipe++;
				}
				if (CountPipe == 4) {
					if (!(array[i] == '|'))
						cobas.append(array[i]);
					// System.out.println("In Array "+array[j]);
				}
				if (CountPipe == 9) {
					if (!(array[i] == '|'))
						host.append(array[i]);

				}
				if (CountPipe == 10) {
					if (!(array[i] == '|'))
						mode.append(array[i]);

				}
				if (CountPipe == 13) {
					if (!(array[i] == '|'))
						time.append(array[i]);
				}
			}
			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);
			// mode.replace(2, 5, "DWN"); //Replace TSREQ TO TSDWN
			/*
			 * if(=="TSREQ") { System.out.println("in tsreq");
			 * 
			 * }
			 */
			Server.stx = stx;
			Server.mode = mode;
			// MAKING STRING FOR REPLYING TO CLIENT MACHINE
			// SimpleDateFormat time_formatter1 = new SimpleDateFormat("yyyyMMddHHmmss");
			// String current_time_str1 =
			// time_formatter1.format(System.currentTimeMillis());

			while (true) {
				// buf.append(stx);
				// buf.append(line.subSequence(2, 14));
				/*
				 * buf.append(line.subSequence(2, 8)); buf.append(line.subSequence(13, 15));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(2, 8));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(13, 15));
				 * //buf.append("||");
				 * 
				 * 
				 * buf.append(host); buf.append("|||||"); buf.append(cobas); buf.append("|");
				 * buf.append(mode);
				 */
				// buf.append("|P|1|");
				// buf.append("20190110165906");
				buf.append(header);
				// buf.append(current_time_str); //Uncommnet it later
				// buf.append("|");
				buf.append(cr); // Ascii of CR
				// Ascii of LF
				p.append(cr);
				buf.append(p);
				// Order.append(Server.packet);

				Order.append("|");

				Order.append(Server.sampleNo.toString().replace("^", ""));
				// Order.append("^50087^1^^S1^SC^|");

				https: // hmis.rcil.gov.in/HISInvestigationG5/new_investigation/masters/MachineInterface.jsp?type=2&eqp=100007&hos=33201&sam=2102OP0220&uid=4323

					Order.append("||^^^SARSCOV2|R|");

				Order.append(current_time_str);
				Order.append("");
				if (Server.testCode != null) {
					System.out.println("TEST-CODE LIST IS NOT NULL");
					for (int k = 0; k < Server.testCode.size(); k++)

					{
						Order.append("^^^");
						Order.append(Server.testCode.get(k));
						if (k != Server.testCode.size() - 1)
							Order.append("^\\");
						else
							Order.append("^");
					}
				} else
					System.out.println("NO TEST CODE FOUND !!! TEST-CODE LIST IS NULL");

				// Order.append(cr);
				buf.append(Order);
				buf.append("");
				// buf.append("20181227190037"+"|"+"20181227190037");
				buf.append("|");
				buf.append(line6);

				buf.append(cr);
				// buf.append(line3);

				// buf.append(cr);

				line4.append(cr);

				buf.append(line4);

				break;
			}

			// CODE TO DELETE LF IF EXISTS IN STRING *** STARTS ***
			/*
			 * for(int i=0;i<buf.length();i++) { if(buf.charAt(i)!=10)
			 * faltu.append(buf.charAt(i)); else System.out.println("yesssss"); }
			 * buf.delete(0, buf.length()); buf = faltu;
			 */
			// CODE TO DELETE LF IF EXISTS IN STRING *** ENDS ***

			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			int frameCount = 0, first = 0, mid = 0, remain = 0;
			frameCount = FrameCounter(buf.length());
			// System.out.println("Char At 0 "+buf.charAt(0));
			int length = buf.length();

			for (int i = 1; i <= frameCount; i++) {
				if (length < 240)
					mid = mid + length;
				else if (length == 240)
					mid = mid + length;
				else if (length > 240) {
					mid = mid + 240;
				}
				System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
				frame.append(stx);
				// System.out.println("Server.StxCounter "+Server.StxCounter);
				frame.append(Server.StxCounter);
				System.out.println("STX COUNTER:- " + Server.StxCounter);
				Server.StxCounter++;
				frame.append(buf.substring(first, mid));

				if (i == frameCount) {
					frame.append(etx);
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETX
					// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
					// CHARACTERS
					frame.append(cr);
					frame.append(lf);
				} else

				{
					frame.append(etb);
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETB
					// frame.append(CheckSum(buf.substring(first, mid)));
					frame.append(cr);
					frame.append(lf);
				}
				// length = length - mid;
				length = length - 240;
				first = mid;

				response.append(frame);
				frameList.add(frame.toString());
				/*
				 * if(i ==1) frame1.append(frame); else frame2.append(frame);
				 */
				frame.delete(0, frame.length());

			}
			// response.append(eot);
			frameList.add(eot);
			Server.StxCounter = 1;
			newS.delete(0, newS.length());
			// System.out.println("Final String "+response);
			/*
			 * UUID uuid = UUID.randomUUID(); //for random file name String Path =
			 * "C:\\Log"; String filename = uuid.toString().replaceAll("[\\s\\-()]", "");
			 * Path = Path+"\\"+filename+".txt"; byte[] byy =
			 * response.toString().getBytes(); try (FileOutputStream fos = new
			 * FileOutputStream(Path)) { // File written on path fos.write(byy);
			 * //fos.close(); There is no more need for this line since you had created the
			 * instance of "fos" inside the try. And this will automatically close the
			 * OutputStream } catch(Exception e) { e.printStackTrace(); }
			 */

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;
		return frameList;
	}


	// ---------------------------------------------------
	// ---------------------------------------------------------------------------
	// Header parsing and Reply Packet Generation Method
	public static List headerParsing2500(String line) {
		char[] array = line.toCharArray();
		//System.out.println("arr"+array);
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";

		List<String> pkt = new ArrayList<>();
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();

		// H|@^\|GXM-88424724426||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD -
		// 110000888^GeneXpert^6.4||||| LIS||P|1394-97|20211229171329
		// P|1|||p1
		// O|1|2912OP0250||^^^SARSCOV2|R|20071116133208|||||A||||ORH||||||||||Q

		// O|1||2912OP0250||^^SARSCOV2|R|20211229183655||||||A||||ORH||||||||||Q
		// O|1||2912OP0250|||R|20211229183655||||||P||||ORH||||||||||I
		// L|1|F

		// StringBuffer header = new StringBuffer("H|\\^&|||host|||||cobas
		// 8000^1.06|TSDWN|P|1|");
		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer(
				"H|\\^&|||||||||||E1394-97");//"1H|\\^&|||XN-20^00-01^11001^^^^12345678||||||||E1394-97");

		//header = header.append(current_time_str);
		//	StringBuffer line3 = new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|N");
		StringBuffer line6 = new StringBuffer("|||||N|||||||||||||||||||");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		StringBuffer p = new StringBuffer("P|1||||^^|||||||||||||||||||||||||||||");

		//add pat name

		//int a=p.toString().indexOf("^");
		//p.insert(a+1, Server.name_pat.trim());
		//System.out.println("p"+p);

		// StringBuffer Order = new StringBuffer("O|1||");
		StringBuffer Order = new StringBuffer("O|1");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {
			for (int i = 0; i < array.length; i++) {
				// stx = array[0];
				if (array[i] == '|') {
					CountPipe++;
				}
				if (CountPipe == 4) {
					if (!(array[i] == '|'))
						cobas.append(array[i]);
					// System.out.println("In Array "+array[j]);
				}
				if (CountPipe == 9) {
					if (!(array[i] == '|'))
						host.append(array[i]);

				}
				if (CountPipe == 10) {
					if (!(array[i] == '|'))
						mode.append(array[i]);

				}
				if (CountPipe == 13) {
					if (!(array[i] == '|'))
						time.append(array[i]);
				}
			}
			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);
			// mode.replace(2, 5, "DWN"); //Replace TSREQ TO TSDWN
			/*
			 * if(=="TSREQ") { System.out.println("in tsreq");
			 * 
			 * }
			 */
			Server.stx = stx;
			Server.mode = mode;
			// MAKING STRING FOR REPLYING TO CLIENT MACHINE
			// SimpleDateFormat time_formatter1 = new SimpleDateFormat("yyyyMMddHHmmss");
			// String current_time_str1 =
			// time_formatter1.format(System.currentTimeMillis());

			while (true) {
				// buf.append(stx);
				// buf.append(line.subSequence(2, 14));
				/*
				 * buf.append(line.subSequence(2, 8)); buf.append(line.subSequence(13, 15));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(2, 8));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(13, 15));
				 * //buf.append("||");
				 * 
				 * 
				 * buf.append(host); buf.append("|||||"); buf.append(cobas); buf.append("|");
				 * buf.append(mode);
				 */
				// buf.append("|P|1|");
				// buf.append("20190110165906");
				buf.append(header);
				// buf.append(current_time_str); //Uncommnet it later
				// buf.append("|");
				buf.append(cr); // Ascii of CR
				// Ascii of LF
				//p.append(cr);
				buf.append(p);
				// Order.append(Server.packet);

				Order.append("|");

				Order.append("^");
				Order.append("^");
				Order.append(Server.sampleNo.toString().replace("^", "").trim());
				// Order.append("^50087^1^^S1^SC^|");
				Order.append("|");
				Order.append("|");

				https: // hmis.rcil.gov.in/HISInvestigationG5/new_investigation/masters/MachineInterface.jsp?type=2&eqp=100007&hos=33201&sam=2102OP0220&uid=4323

					//Order.append("||^^^SARSCOV2|R|");

					//Order.append(current_time_str); by Rohit..
					Order.append("");
				if (Server.testCode != null) {
					System.out.println("TEST-CODE LIST IS NOT NULL");
					for (int k = 0; k < Server.testCode.size(); k++)

					{
						Order.append("^^^");
						Order.append(Server.testCode.get(k));
						if (k != Server.testCode.size() - 1)
							Order.append("^^\\");
						else
							Order.append("^^");
					}
				} else
					System.out.println("NO TEST CODE FOUND !!! TEST-CODE LIST IS NULL");
				Order.append("|");
				Order.append("R");
				Order.append("|");
				Order.append(current_time_str);
				//Order.append("|");
				// Order.append(cr);
				buf.append(Order);
				buf.append("");
				// buf.append("20181227190037"+"|"+"20181227190037");
				buf.append("|");
				buf.append(line6);

				buf.append(cr);
				// buf.append(line3);

				// buf.append(cr);

				//line4.append(cr);

				buf.append(line4);
				//frame.append(buf);
				Order.append(line6);
				pkt.add(header.toString());
				pkt.add(p.toString());				
				pkt.add(Order.toString());


				pkt.add(line4.toString());
				break;
			}

			// CODE TO DELETE LF IF EXISTS IN STRING *** STARTS ***
			/*
			 * for(int i=0;i<buf.length();i++) { if(buf.charAt(i)!=10)
			 * faltu.append(buf.charAt(i)); else System.out.println("yesssss"); }
			 * buf.delete(0, buf.length()); buf = faltu;
			 */
			// CODE TO DELETE LF IF EXISTS IN STRING *** ENDS ***

			//			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			//			int frameCount = 0, first = 0, mid = 0, remain = 0;
			//			frameCount = FrameCounter(buf.length());
			//			// System.out.println("Char At 0 "+buf.charAt(0));

			String abc ="";		
			//int length = buf.length();







			//for(String line1:pkt) 


			//{
			//	System.out.println("STRING LENGTH BEFORE FRAMING = " + line1.length());
			int frameCount = 0, first = 0, mid = 0, remain = 0;
			//	frameCount = FrameCounter(line1.length());
			//	System.out.println("line"+line1);
			//	int length = line1.length();
			//			//for (int i = 1; i <= frameCount; i++) {
			//				if (length < 240)
			//					mid = mid + length;
			//				else if (length == 240)
			//					mid = mid + length;
			//				else if (length > 240) {
			//					mid = mid + 240;
			//				}
			//System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
			frame.append(stx);
			// System.out.println("Server.StxCounter "+Server.StxCounter);
			frame.append(Server.StxCounter);
			//System.out.println("STX COUNTER:- " + Server.StxCounter);
			//Server.StxCounter++;
			//frame.append(buf.substring(first, mid));
			//frame.append(line1);

			//if (i == frameCount) {
			frame.append(etx);
			//header.toString().replace("H", stx+Server.StxCounter+"H");
			//					header.append(stx);
			//					Order.append(stx);
			//					p.append(stx);
			//					line4.append(stx);


			header.insert(0, stx);
			header.insert(1, 1);

			Order.insert(0, stx);
			Order.insert(1, 3);

			p.insert(0,stx);
			p.insert(1, 2);

			line4.insert(0, stx);
			line4.insert(1, 4);
			header.append(etx);
			Order.append(etx);
			p.append(etx);
			line4.append(etx);
			header.append(CheckSum(header.toString())); // FRAME WITH STX STX COUNTER AND ETX

			//					for(int i=0;i<pkt.size();i++) {
			//						
			//						Server.StxCounter++;
			//					}
			//					

			// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
			// CHARACTERS
			//String b=CheckSum(frame.toString());
			//abc.concat(line1.concat(b));
			p.append(CheckSum(p.toString())); // FRAME WITH STX STX COUNTER AND ETX

			line4.append(CheckSum(line4.toString())); // FRAME WITH STX STX COUNTER AND ETX
			Order.append(CheckSum(Order.toString())); // FRAME WITH STX STX COUNTER AND ETX


			//frame.append(cr);
			//frame.append(lf);
			//} else

			{
				//frame.append(etb);
				//frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETB
				// frame.append(CheckSum(buf.substring(first, mid)));
				//frame.append(cr);
				//frame.append(lf);
				//String b=CheckSum(frame.toString());
				//abc.concat(line1.concat(b));
			}
			// length = length - mid;
			//				length = length - 240;
			first = mid;

			//}
			frameList.add('');
			frameList.add(header);
			frameList.add(p);
			frameList.add(Order);
			frameList.add(line4);
			abc="";

			//}

			//System.out.println("framelist"+frameList);
			//	System.out.println("frame"+frame.toString());
			response.append(frame);
			//				frameList.add(frame.toString());
			/*
			 * if(i ==1) frame1.append(frame); else frame2.append(frame);
			 */
			frame.delete(0, frame.length());



			// response.append(eot);
			frameList.add(eot);
			Server.StxCounter = 1;
			newS.delete(0, newS.length());
			// System.out.println("Final String "+response);
			/*
			 * UUID uuid = UUID.randomUUID(); //for random file name String Path =
			 * "C:\\Log"; String filename = uuid.toString().replaceAll("[\\s\\-()]", "");
			 * Path = Path+"\\"+filename+".txt"; byte[] byy =
			 * response.toString().getBytes(); try (FileOutputStream fos = new
			 * FileOutputStream(Path)) { // File written on path fos.write(byy);
			 * //fos.close(); There is no more need for this line since you had created the
			 * instance of "fos" inside the try. And this will automatically close the
			 * OutputStream } catch(Exception e) { e.printStackTrace(); }
			 */

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;
		return frameList;
	}

	// Header parsing and Reply Packet Generation Method
	public static List headerParsing_GEN_MTB(String line) {
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();

		// H|@^\|GXM-88424724426||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD -
		// 110000888^GeneXpert^6.4||||| LIS||P|1394-97|20211229171329
		// P|1|||p1
		// O|1|2912OP0250||^^^SARSCOV2|R|20071116133208|||||A||||ORH||||||||||Q

		// O|1||2912OP0250||^^SARSCOV2|R|20211229183655||||||A||||ORH||||||||||Q
		// O|1||2912OP0250|||R|20211229183655||||||P||||ORH||||||||||I
		// L|1|F

		// StringBuffer header = new StringBuffer("H|\\^&|||host|||||cobas
		// 8000^1.06|TSDWN|P|1|");
		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header1 = new StringBuffer(
				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer("H|@^\\|");
		header.append(Query_Message_Id);
		header.append("|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		header = header.append(current_time_str);
		StringBuffer line3 = new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|F");
		// StringBuffer line6 = new StringBuffer("||||P||||ORH||||||||||Q");
		StringBuffer line6 = new StringBuffer("||||A||||ORH||||||||||Q");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		StringBuffer p = new StringBuffer("P|1||||^^^^|||||||||||||||||||||||||||||");
		// StringBuffer Order = new StringBuffer("O|1||");
		StringBuffer Order = new StringBuffer("O|1");
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {
			for (int i = 0; i < array.length; i++) {
				// stx = array[0];
				if (array[i] == '|') {
					CountPipe++;
				}
				if (CountPipe == 4) {
					if (!(array[i] == '|'))
						cobas.append(array[i]);
					// System.out.println("In Array "+array[j]);
				}
				if (CountPipe == 9) {
					if (!(array[i] == '|'))
						host.append(array[i]);

				}
				if (CountPipe == 10) {
					if (!(array[i] == '|'))
						mode.append(array[i]);

				}
				if (CountPipe == 13) {
					if (!(array[i] == '|'))
						time.append(array[i]);
				}
			}
			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);
			// mode.replace(2, 5, "DWN"); //Replace TSREQ TO TSDWN
			/*
			 * if(=="TSREQ") { System.out.println("in tsreq");
			 * 
			 * }
			 */
			Server.stx = stx;
			Server.mode = mode;
			// MAKING STRING FOR REPLYING TO CLIENT MACHINE
			// SimpleDateFormat time_formatter1 = new SimpleDateFormat("yyyyMMddHHmmss");
			// String current_time_str1 =
			// time_formatter1.format(System.currentTimeMillis());

			while (true) {
				// buf.append(stx);
				// buf.append(line.subSequence(2, 14));
				/*
				 * buf.append(line.subSequence(2, 8)); buf.append(line.subSequence(13, 15));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(2, 8));
				 * System.out.println("line.subSequence(1, 14) "+line.subSequence(13, 15));
				 * //buf.append("||");
				 * 
				 * 
				 * buf.append(host); buf.append("|||||"); buf.append(cobas); buf.append("|");
				 * buf.append(mode);
				 */
				// buf.append("|P|1|");
				// buf.append("20190110165906");
				buf.append(header);
				// buf.append(current_time_str); //Uncommnet it later
				// buf.append("|");
				buf.append(cr); // Ascii of CR
				// Ascii of LF
				p.append(cr);
				buf.append(p);
				// Order.append(Server.packet);

				Order.append("|");

				Order.append(Server.sampleNo.toString().replace("^", ""));
				// Order.append("^50087^1^^S1^SC^|");
				// Order.append("||^^^SARSCOV2|R|");

				Order.append("||^^^");
				Order.append(Test_Code);
				Order.append("|R|");
				Order.append(current_time_str);
				Order.append("");
				// ---------SECOND ORDER
				Order1.append("|");
				Order1.append(Server.sampleNo.toString().replace("^", ""));
				// Order.append("^50087^1^^S1^SC^|");
				Order1.append("||^^^MTBRIF|R|");
				Order1.append(current_time_str);
				Order1.append("");
				// -----------------------------
				if (Server.testCode != null) {
					System.out.println("TEST-CODE LIST IS NOT NULL");
					for (int k = 0; k < Server.testCode.size(); k++)

					{
						Order.append("^^^");
						Order.append(Server.testCode.get(k));
						Order1.append("^^^");
						Order1.append(Server.testCode.get(k));
						if (k != Server.testCode.size() - 1) {
							Order.append("^\\");
							Order1.append("^\\");
						} else {
							Order.append("^");
							Order1.append("^");
						}
					}
				} else
					System.out.println("NO TEST CODE FOUND !!! TEST-CODE LIST IS NULL");

				// Order.append(cr);
				buf.append(Order);

				buf.append("");
				// buf.append("20181227190037"+"|"+"20181227190037");
				buf.append("|");
				buf.append(line6);

				// ===============SECOND ORDER PACKET ADD TO BUF

				// buf.append(cr); // Ascii of CR
				// Ascii of LF
				// Order1.append(cr);
				// buf.append(Order1);
				// buf.append("");
				// buf.append("20181227190037"+"|"+"20181227190037");
				// buf.append("|");
				// buf.append(line6);
				// -----------------------------------------------
				// ==============================================
				buf.append(cr);
				// buf.append(line3);

				// buf.append(cr);

				line4.append(cr);

				buf.append(line4);

				break;
			}

			// CODE TO DELETE LF IF EXISTS IN STRING *** STARTS ***
			/*
			 * for(int i=0;i<buf.length();i++) { if(buf.charAt(i)!=10)
			 * faltu.append(buf.charAt(i)); else System.out.println("yesssss"); }
			 * buf.delete(0, buf.length()); buf = faltu;
			 */
			// CODE TO DELETE LF IF EXISTS IN STRING *** ENDS ***

			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			// STRING LENGTH BEFORE FRAMING = 235
			int frameCount = 0, first = 0, mid = 0, remain = 0;
			frameCount = FrameCounter(buf.length());
			// System.out.println("Char At 0 "+buf.charAt(0));
			int length = buf.length();

			for (int i = 1; i <= frameCount; i++) {
				// if(length<240)
				if (length < 306)
					mid = mid + length;
				else if (length == 306)
					mid = mid + length;
				else if (length > 306) {
					mid = mid + 306;
				}
				System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
				frame.append(stx);
				// System.out.println("Server.StxCounter "+Server.StxCounter);
				frame.append(Server.StxCounter);
				System.out.println("STX COUNTER:- " + Server.StxCounter);
				Server.StxCounter++;
				frame.append(buf.substring(first, mid));

				if (i == frameCount) {
					frame.append(etx);
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETX
					// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
					// CHARACTERS
					frame.append(cr);
					frame.append(lf);
				} else

				{
					frame.append(etb);
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETB
					// frame.append(CheckSum(buf.substring(first, mid)));
					frame.append(cr);
					frame.append(lf);
				}
				// length = length - mid;
				length = length - 240;
				first = mid;

				response.append(frame);
				frameList.add(frame.toString());
				/*
				 * if(i ==1) frame1.append(frame); else frame2.append(frame);
				 */
				frame.delete(0, frame.length());

			}
			// response.append(eot);
			frameList.add(eot);
			Server.StxCounter = 1;
			newS.delete(0, newS.length());
			// System.out.println("Final String "+response);
			/*
			 * UUID uuid = UUID.randomUUID(); //for random file name String Path =
			 * "C:\\Log"; String filename = uuid.toString().replaceAll("[\\s\\-()]", "");
			 * Path = Path+"\\"+filename+".txt"; byte[] byy =
			 * response.toString().getBytes(); try (FileOutputStream fos = new
			 * FileOutputStream(Path)) { // File written on path fos.write(byy);
			 * //fos.close(); There is no more need for this line since you had created the
			 * instance of "fos" inside the try. And this will automatically close the
			 * OutputStream } catch(Exception e) { e.printStackTrace(); }
			 */

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;
		return frameList;
	}
	//=------------------------------------------- vitrose 5600 parse select

	// -----------------------------------------------

	// vitrose5600
	public static List common_parseSelect(List<String> list,PrintStream cout) {

		System.out.println("inside comman parse select...");
		StringBuffer packet = new StringBuffer();
		List<StringBuffer> frameList = new ArrayList<>();
		List testCode = new ArrayList();
		System.out.println("list"+list);
		String line_header = list.get(0);
		//String line = list.get(2);
		String line=null;
		if(formatid.equals("20053")) {
			line = list.get(0);
		}
		else {
		 line = list.get(1);
		}
		
		Map<String, String> testCodeMap = new LinkedHashMap<String, String>();
		int count = 0;
		StringBuffer bf = new StringBuffer();
		StringBuffer bf1 = new StringBuffer();

		int count_header = 0;
		StringBuffer bf_header = new StringBuffer();
		StringBuffer bf_header_sender = new StringBuffer();
		StringBuffer bf_header_receiver = new StringBuffer();
		StringBuffer bf_header_datetime = new StringBuffer();
		Server.testCode.clear();
		Sample_code.clear();

		// get message id
		if (Character.toUpperCase(line_header.charAt(2)) == 'H') {
			char[] ch = line_header.toCharArray();


			String dd []= line_header.split("\\|");

			//	System.out.println(dd);


			//	headerVal=dd[2];
			//String abc=headerVal.substring(0,3);
			//String a=abc;
			//int n=	Integer.parseInt(abc);
			//	n= n+2;
			//abc= Stringof(n);
			//headerVal=headerVal.replace(a, abc);
			//System.out.println("RRR"+headerVal);
			if (Character.toUpperCase(line_header.charAt(2)) == 'H') {

				for (int i = 0; i < ch.length; i++) {
					if (ch[i] == '|')
						count_header++;
					if (count_header == 2) {
						if (!(ch[i] == '|'))
							bf_header.append(ch[i]);// header msg id
						// System.out.println("bf_header:- " + bf_header);
					}
					// ------------bf_header_sender
					if (count_header == 4) {
						if (!(ch[i] == '|'))
							bf_header_sender.append(ch[i]);// header msg id
						// System.out.println("bf_header_sender:- " + bf_header_sender);
					}

					// ------------bf_header_reciver
					if (count_header == 9) {
						if (!(ch[i] == '|'))
							bf_header_receiver.append(ch[i]);// header msg id
						// System.out.println("bf_header_receiver:- " + bf_header_receiver);
					}
					if (count_header == 13) {
						if (!(ch[i] == '|'))
							bf_header_datetime.append(ch[i]);// header msg id
						// System.out.println("bf_header_receiver:- " + bf_header_receiver);
					}
				}
			}
		}
		// System.out.println("bf_header:- " + bf_header);
		// System.out.println("bf_header_sender:- " + bf_header_sender);
		// System.out.println("bf_header_receiver:- " + bf_header_receiver);
		// System.out.println("bf_header_datetime:- " + bf_header_datetime);
		// get message id

		//		long num = Long.parseLong(bf_header_datetime.toString());
		//		long last_digit = num % 10; // extract the last digit
		//		num /= 10; // modify the original number
		//		long second_to_last_digit = num % 10; // extract second last digit
		//		String str = String.valueOf(second_to_last_digit) + String.valueOf(last_digit); // convert and add strings
		//
		//		System.out.println("str==========vvvvvvvvvvvvvvvvv=========" + str); // print desired string
		//		long num1 = Long.parseLong(str);
		//		long num2 = num1 + 2;
		//		long num3;
		//		String bc = String.valueOf(num2);
		//		System.out.println("bc======" + bc);
		//		System.out.println("num2======" + num2);
		//		if ((String.valueOf(num2)).length() == 1) {
		//			String ab = "0";
		//			bc = String.valueOf(0).concat(String.valueOf(num2));
		//			num3 = Long.parseLong(bc);
		//			num2 = num3;
		//			System.out.println("updated  bc======" + bc);
		//
		//		}
		//		System.out.println("updatednum2======" + num2);
		//
		//		String ab = bf_header_datetime.toString().substring(0, bf_header_datetime.toString().length() - 2);
		//		bf_header_datetime.delete(0, bf_header_datetime.length());
		//		bf_header_datetime.append(ab.concat(String.valueOf(bc)));
		//		System.out.println("ab==========vvvvvvvvv111111111111111111=========" + ab);
		//		System.out.println("bf_header_datetime==========vvvvvvvvv111111111111111111=========" + bf_header_datetime);
		String[] samplesplit=null;
		String line2="";
		
		if(!formatid.equals("20047")) {
		if (Character.toUpperCase(line.charAt(2)) == 'Q' || line.contains("Q|1|") ) {
			char[] ch = line.toCharArray();

			for (int i = 0; i < ch.length; i++) {

				if (ch[i] == '|')
					count++;

				if (count == 2) {
					if (!(ch[i] == '|'))
						bf.append(ch[i]);
				}

			}


			samplesplit	=bf.toString().split("\\^");
			System.out.println();
			
		//	Server.Sample_code.add(bf.toString().replaceAll("\\^", ""));
			
			
	
			
			
			
		}
		
	
		
		String[] data =bf.toString().split("`");
		
		if(data.length>1) {
			String sam=bf.toString().replace("\\s", "");
			Server.Sample_code.add(sam);
		}
		else {
			//Server.Sample_code.add(bf.toString().replaceAll("\\^", ""));
		//line2=ABC.getSampleDtl_biolis50i(Server.Sample_code.get(0).toString().replace("^", ""));  // Get Query Information Vipul Ramji
			
			String str=samplesplit[1].toString().replace(" ", "");
			line2=ABC.getSampleDtl_biolis50i(str); 
			Server.Sample_code.add(samplesplit[1].toString().replace("\\s", ""));
			//line2="HDLCD;VV;VLDL;CHOL;TRIG;LDL;#Santosh Kumari    ()#63 Yr     #F#051224BIO029# ";
		}
		}
		else {
			
			String[]  data=line_header.split("\\|");
			String dd=data[2].replace("^", "");
			dd=dd.replace("\\s", "");
			Server.Sample_code.add(dd);
			line2=ABC.getSampleDtl_biolis50i(Server.Sample_code.get(0).toString().replace("^", ""));  // Get Query Information Vipul Ramji
			//line2="302;307;308;309;311;314;318;330;348;505;#Nibha Kalita    ()#40 Yr     #F#240527B0227#SERUM#";
		}
		System.out.println("Sample Number:- " + Server.Sample_code);
		
	
		//	System.out.println("Sample Number:- " + Server.Sample_code);
		//	Server.Sample_code.add(bf.toString());
		// ---------------------------------------------------

		//String line2 = ABC.getSampleDtl_biolis50i(Sample_code.get(0).split("\\^")[1].trim());  // Get Query Information Vipul Ramji
		//System.out.println("Response after Test Code  Selection---- " + line2); //null#null#null#null#230206BIO0335#
		int r = 0;
		String tc = "";
		//lline2="1005;1268;1094;1065;1023;1021;1020;1406;1400;2002;1103;1101;1102;1069;1005;1268;1094;1065;1023;1021;1020;1406;1400;2002;1103;1101;1102;654;797;248;#Asitabh    #39 Yr     #F#230413BIO0554#"; // ALinity Check Ramji
		//String line2="UREA-BUN-UV;ALBUNIM;NA;K+;CL-;BUN;PROTEIN TOTAL;NA;K+;CL-;BUN;PROTEIN TOTAL#RRR";	
		//String line2="C-URO;C-BLD;C-BIL;C-KET;C-GLU;C-PRO;C-PH;C-NIT;C-LEU;C-CRE;C-ALB;C-P/C;C-A/C;C-S.G.(Ref);C-COLOR;C-CLOUD";
		//String line2="CRE;UREA#RRR";  //ERBA XLL 100 Test Code
		//GLU1`^^^CRE1`^^^UREA1`^^^BID1`^^^SGOT1
		//String line2="PRO;VLDL;TRIG;BIDD;LIP;CRE;HDLC;ALPU;UREA;UA;ALBD;AMY;LDH;SGOTD;CKNac;SGPTD;IBIL;GLB;FE;TIBC;UIBC;FE;BIT;#Tubaaaaaa    #13 Yr  ";//;TGL1;HDL1;CRE1;UREA1;BID1;SGOT1;TGL1;HDL1;CRE1;UREA1;BID1;SGOT1";  //ERBA TN TestCOde
		line2="BAS#;BAS%;EOS#;EOS%;HCT;HGB;IG#;IMG%;IRF;LYM#;LYM%;MCH;MCHC;MCV;MON#;MON%;MPV;NA;NEU#;NEU%;NRBC#;NRBC%;PCT;PDW;P-LCR;PLT;RBC;RDW-CV;RDW-SD;RET#;RET%;WBC;XX;#Kushala Sunkara    ()#33 Yr     #M#250220HTY180#Whole Blood#";
	//String line2="TSH;FT3;FT4;TSH;FT3;FT4;TSH;FT3;FT4";//;TSH3UL";
		String[] kvPairs = line2.split("#");
		
		if(formatid.equals("20053")) {
			
	        // Split the string using #
	       // String[] kvPairs = line2.split("#");

			  String patientName = "";
		        String patientAge = "";

		        for (String part : kvPairs) {
		            part = part.trim();
		            if (part.contains("()")) {
		                patientName = part;  // Name contains ()
		            }
		            if (part.contains("Yr")) {
		                patientAge = part.replaceAll("Yr", "").trim();  // Remove "Yr" and trim
		            }
		        }
			
		        name_pat=patientName+"#"+patientAge;
		}
		else {
		for (String kvPair : kvPairs) {
			// System.out.print("kvPairs =============------ " + kvPair);
			if (r == 0)
				tc = kvPair;
			if (r == 1)
				name_pat = kvPair;
			r++;
			if (r == 2)
				break;

		}
		}
		// System.out.print("Test_Code NOT Found- "+tc);
		if((tc != null) && !tc.equals("null"))
		{	 
			// -----------
			//String[] kv1 = tc.split(":");
			//		String[] kv2 = kv1[1].split(";");
			String[] kv2 = tc.split(";");
			for (String z : kv2) {
				if(!(z.equals("") ||z.equals("aa") || z.equals("bb") 
						|| z.equals("cc") ||z.equals("dd") || z.equals("ee") || 
						z.equals("xx")|| z.equals("ww") || z.equals("yy")|| 
						z.equals("zz")|| z.equals("uu") ||  z.equals("vv")||z.equals("null4") 
						||z.equals("null5") ||z.equals("null") ||z.equals("null6") 
						||z.equals("NA")||z.equals("VV")||z.equals("WW")||z.equals("XX")||
						z.equals("YY")||z.equals("ZZ"))) {
						
					if (Server.testCode.contains(z)) {
			           // System.out.println(z + " is in the list.");
			        } else {
			        	Server.testCode.add(z);
						}
						
				}
				


			}
			//System.out.print("ZZZ" + Server.testCode);
			System.out.println("Test_Code =============------ " + Server.testCode);


			String testCode1 = "";
			String testValue1 = "";
			//	-------------------------------------------
			name_pat=kvPairs[1];
			//		name_pat="Employee General Test";
			System.out.println("name_pat11111 =============------ " + name_pat);

			String[] nameP = name_pat.split(" ");
			if(nameP.length>=1) {
				System.out.println("nameP.length =============------ " + nameP.length);
				if(nameP.length==1) {
					name_pat_first=nameP[0];

					System.out.println("name_pat_first =============------ " + name_pat_first+"========"+name_pat_last);

				}
				if(nameP.length==2) {
					name_pat_first=nameP[0];
					name_pat_last=nameP[1];		
					System.out.println("name_pat_first =============------ " + name_pat_first+"========"+name_pat_last);

				}
				if(nameP.length==3) {
					name_pat_first=nameP[0];
					name_pat_last=nameP[2];		
					System.out.println("name_pat_first =============------ " + name_pat_first+"========"+name_pat_last);

				}
				else {
					name_pat_first=nameP[0];
					name_pat_last=nameP[1];		
				}
			}//TC
		}



		Server.packet = packet;
		Server.sampleNo = bf;
		Server.Query_Message_Id = bf_header;
		Server.Query_Message_sender = bf_header_sender;
		Server.Query_Message_receiver = bf_header_receiver;
		Server.Query_Message_date_time = bf_header_datetime;
		// Make Packet for Reply
		for (int i = 0; i < list.size(); i++) {
			if (Character.toUpperCase(list.get(i).charAt(0)) == 'H')
				;
			{
				if (formatid.equals("20001"))// genexpert
				{
					frameList = headerParsing(list.get(0));
				}

				if (formatid.equals("20001"))// sys800i
				{
					frameList = headerParsing(list.get(0));
				}
				if (formatid.equals("20002"))// genexpert
				{
					frameList = headerParsing_GEN_MTB(list.get(0));
				}

				if (formatid.equals("20"))// genexpert
				{
					frameList = headerParsing_GEN_MTB(list.get(0));// gims proxl
				}

				if (formatid.equals("20011"))// headerParsing_vitrose5600
				{

					frameList = headerParsing_vitrose5600_railtel(list.get(0));// vitrose5600
				}

				if (formatid.equals("20043"))// tecom tc6060
				{

					frameList = headerParsing_tecom_TC6060_singlePacket(list.get(0));// tecom
				}
				if (formatid.equals("200425"))// mispa clinia
				{
					frameList = headerParsing_Mispa_Clinia_s(list.get(0));// mispa clinia
				}

				if (formatid.equals("20050"))// mispa clinia
				{
					frameList = headerParsing_Mispa_Clinia_s(list.get(0));// mispa clinia
				}

				if (formatid.equals("20046"))// 
				{
					frameList = cobas6000_headerParsing_s(); ///cobas AIIMS BH

				}
				
				if (formatid.equals("20055"))// 
				{
					frameList = AIIMSJD_AT(); ///AIIMS Jodhpur Attlica

				}
				if (formatid.equals("20053"))// sysmax 2500  // added by rohit for Bi Dir.. AIIMS Jodpur
				{
					frameList =HoribaP580(list.get(0));
				}
				
			
				Map resMap = new HashMap<String, List>();
				
				if (formatid.equals("20048"))// mispa clinia
				{
				
				frameList = ERBAXL1000response(list.get(0),cout);// mispa clinia
					
			//	System.out.println("NEW Frame"+frameList1);
			//	multiframeResponse.add(frameList1); //add(frameList1);
				
				}
				
				if (formatid.equals("20047"))// 
				{
					frameList = Vitors_Query_parse(); ///AIIMS Jodhpur Attlica

				}
				


				
			//System.out.println(multiframeResponse);


			}

			break;
		}
		if (formatid.equals("20012"))// headerParsing_vitrose5600
		{

			frameList = sysmex1000_headerParsing_m();// vitrose5600
			
		}
	
		// System.out.println("PAcket:-----"+packet);
		return multiframeResponse;
	}
	private static String Stringof(int n) {
		// TODO Auto-generated method stub
		return null;
	}

	// ------------------------------------------------------------


	// PACKET Format id=20043
	public static List headerParsing_tecom_TC6060_singlePacket(String line) {
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		Server.StxCounter = 1;
		//		try {
		//			Thread.sleep(2000);
		//		} catch (InterruptedException ex) {
		//			Thread.currentThread().interrupt();
		//		}
		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);

		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();


		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header1 = new StringBuffer(
				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer("H|\\^&|");
		//		header.append(Query_Message_Id);
		header.append("||");
		header.append("^^");
		// header.append(Query_Message_receiver);
		header.append("|||||");
		//		header.append(Query_Message_sender);
		header.append("||SA|1394-97|");
		//		header = header.append(Query_Message_date_time);
		header = header.append(current_time_str);
		StringBuffer line3 = new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|N");
		StringBuffer line6 = new StringBuffer("|||F");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;


		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("||");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("||");
		p.append(name_pat.trim());
		// p.append("^name^M");
		p.append("|||||||||||||");
		p.append("||||||||||||||||");

		StringBuffer c = new StringBuffer("C|1|I|Patient is complaining of shortness of breath and chest pain.|G");


		StringBuffer Order = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;


			while (true) {

				buf.append(header);
				// buf.append(current_time_str); //Uncommnet it later
				// buf.append("|");
				buf.append(cr);
				// Ascii of CR
				// Ascii of LF
				p.append(cr);
				buf.append(p);
				c.append(cr);

				// ==============================

				System.out.println("BA400_client.testCode.size()------- " + Server.testCode.size());

				Order.append("O|1");
				// Order.append();
				Order.append("|^^|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("|");
				for (int k = 0; k < Server.testCode.size(); k++)
				{
					Order.append(k + 1);
					Order.append("^");
					Order.append(Server.testCode.get(k));
					Order.append("^^");
					if (k != Server.testCode.size() - 1) {

						Order.append("\\");
						// Order.append("^^^");

					}
					/*
					 * else { Order.append("^");
					 * 
					 * }
					 */
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||||||Serum|||1|||||||O|||||");
				// Order.append(line6);
				Order.append(cr);

				buf.append(Order);
				Order.delete(0, Order.length());

				System.out.println("buf= " + buf.toString());

				// ==============================================================


				line4.append(cr);

				buf.append(line4);

				break;
			}


			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			System.out.println("frame BEFORE FRAMING = " + buf.toString());
			// STRING LENGTH BEFORE FRAMING = 235
			int frameCount = 0, first = 0, mid = 0, remain = 0;
			frameCount = FrameCounter(buf.length());
			// System.out.println("Char At 0 "+buf.charAt(0));
			int length = buf.length();

			for (int i = 1; i <= frameCount; i++) {
				if (length < 240)
					// if (length < 306)
					mid = mid + length;
				else if (length == 240)
					mid = mid + length;
				else if (length > 240) {
					mid = mid + 240;
				}
				System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
				frame.append(stx);
				System.out.println("Server.StxCounter " + Server.StxCounter);
				frame.append(Server.StxCounter);
				System.out.println("STX COUNTER:- " + Server.StxCounter);
				Server.StxCounter++;
				frame.append(buf.substring(first, mid));

				if (i == frameCount) {
					frame.append(etx);
					System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETX
					// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
					// CHARACTERS
					frame.append(cr);
					frame.append(lf);
				} else

				{
					frame.append(etb);
					System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETB
					// frame.append(CheckSum(buf.substring(first, mid)));
					frame.append(cr);
					frame.append(lf);
				}
				// length = length - mid;
				length = length - 240;
				first = mid;

				response.append(frame);
				frameList.add(frame.toString());
				/*
				 * if(i ==1) frame1.append(frame); else frame2.append(frame);
				 */
				frame.delete(0, frame.length());

			}
			// response.append(eot);
			// frameList.add(eot);
			Server.StxCounter = 1;
			newS.delete(0, newS.length());
			System.out.println("Final String after checksum" + frameList.size());
			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());
			/*
			 * UUID uuid = UUID.randomUUID(); //for random file name String Path =
			 * "C:\\Log"; String filename = uuid.toString().replaceAll("[\\s\\-()]", "");
			 * Path = Path+"\\"+filename+".txt"; byte[] byy =
			 * response.toString().getBytes(); try (FileOutputStream fos = new
			 * FileOutputStream(Path)) { // File written on path fos.write(byy);
			 * //fos.close(); There is no more need for this line since you had created the
			 * instance of "fos" inside the try. And this will automatically close the
			 * OutputStream } catch(Exception e) { e.printStackTrace(); }
			 */

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;

		return frameList;
	}

	// ----------------------------------------------------------------------------

	// ------------------------------------------------------------

	// PACKET Format id=20045
	public static List headerParsing_Mispa_Clinia_s(String line) {
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);

		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();


		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header1 = new StringBuffer(
				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer("");
		//		header.append(Query_Message_Id);
		//		header.append("||");
		////		header.append("^^");
		//	    header.append(Query_Message_receiver);
		//		header.append("|||||");
		////		header.append(Query_Message_sender);
		//		header.append("||SA|1394-97|");

		header.append("H|\\^&|");
		header.append(headerVal);
		header.append("||Host|||||BA400||P|LIS2A|");
		//		header = header.append(Query_Message_date_time);
		header = header.append(current_time_str);
		StringBuffer line3 = new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|N");
		StringBuffer line6 = new StringBuffer("|||F");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;


		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("||");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("||^");
		//p.append(name_pat.trim());
		// p.append("^name^M");
		p.append("");
		p.append("^||||||||||||||||||||");
		//p.append("^|||||||||||||||");
		//p.append("||||||||||||||");

		StringBuffer c = new StringBuffer("C|1|I|Patient is complaining of shortness of breath and chest pain.|G");


		StringBuffer Order = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;


			while (true) {

				buf.append(header);
				// buf.append(current_time_str); //Uncommnet it later
				// buf.append("|");
				buf.append(cr);
				// Ascii of CR
				// Ascii of LF
				p.append(cr);
				buf.append(p);
				c.append(cr);

				// ==============================

				//System.out.println("BA400_client.testCode.size()------- " + Server.testCode.size());
				//O|1|SPM01||^^^Test1|R|20130129101530|20130129092030
				LocalDateTime now = LocalDateTime.now();


				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
				String formattedTimestamp = now.format(formatter);

				for (int k = 0; k < Server.testCode.size(); k++)
				{
					if(!Server.testCode.get(k).equals("NA")) {
						Order.append("O|");
						// Order.append();
						Order.append(k + 1);
						Order.append("|");
						//Order.append("|1^1^1|");
						Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
						Order.append("|");

						Order.append("|^^^");
						Order.append(Server.testCode.get(k));  
						//	Order.append("CREATININE");

						//Order.append("|R");
						//					Order.append("^2^1");				
						//					if (k != Server.testCode.size() - 1) {
						//
						//						Order.append("\\");
						//						Order.append("\n");
						//						
						//						// Order.append("^^^");
						//
						//					}
						//					/*
						//					 * else { Order.append("^");
						//					 * 
						//					 * }
						//	 */

						Order.append("|R|");
						Order.append(formattedTimestamp+"|"+formattedTimestamp);
						Order.append("||||A||||SER||||||||||O");
						Order.append(cr);
						buf.append(Order);
						Order.delete(0, Order.length());
					}
					else {
						continue;
					}
				}
				// Order.append(line6);



				System.out.println("buf= " + buf.toString());

				// ==============================================================


				line4.append(cr);

				buf.append(line4);

				break;
			}


			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			System.out.println("frame BEFORE FRAMING = " + buf.toString());
			// STRING LENGTH BEFORE FRAMING = 235
			int frameCount = 0, first = 0, mid = 0, remain = 0;
			frameCount = FrameCounter(buf.length());
			// System.out.println("Char At 0 "+buf.charAt(0));
			int length = buf.length();

			for (int i = 1; i <= frameCount; i++) {
				if (length < 240)
					// if (length < 306)
					mid = mid + length;
				else if (length == 240)
					mid = mid + length;
				else if (length > 240) {
					mid = mid + 240;
				}
				//	System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
				frame.append(stx);
				System.out.println("Server.StxCounter " + Server.StxCounter);
				frame.append(Server.StxCounter);
				System.out.println("STX COUNTER:- " + Server.StxCounter);
				Server.StxCounter++;
				frame.append(buf.substring(first, mid));

				if (i == frameCount) {
					frame.append(etx);
					//System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETX
					// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
					// CHARACTERS
					frame.append(cr);
					frame.append(lf);
				} else

				{
					frame.append(etb);
					//System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString())); // FRAME WITH STX STX COUNTER AND ETB
					// frame.append(CheckSum(buf.substring(first, mid)));
					frame.append(cr);
					frame.append(lf);
				}
				// length = length - mid;
				length = length - 240;
				first = mid;

				response.append(frame);
				frameList.add(frame.toString());
				/*
				 * if(i ==1) frame1.append(frame); else frame2.append(frame);
				 */
				frame.delete(0, frame.length());

			}
			//response.append(eot);
			// frameList.add(eot);
			Server.StxCounter = 1;
			newS.delete(0, newS.length());
			System.out.println("Final String after checksum" + frameList.size());
			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());
			/*
			 * UUID uuid = UUID.randomUUID(); //for random file name String Path =
			 * "C:\\Log"; String filename = uuid.toString().replaceAll("[\\s\\-()]", "");
			 * Path = Path+"\\"+filename+".txt"; byte[] byy =
			 * response.toString().getBytes(); try (FileOutputStream fos = new
			 * FileOutputStream(Path)) { // File written on path fos.write(byy);
			 * //fos.close(); There is no more need for this line since you had created the
			 * instance of "fos" inside the try. And this will automatically close the
			 * OutputStream } catch(Exception e) { e.printStackTrace(); }
			 */

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;

		return frameList;
	}

	// ----------------------------------------------------------------------------



	public static List sysmax100BIDIR(String line) {
		System.out.println("Sysmax Bi DIR with ENQ----2500");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time---" + current_time_str2);

		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();
		StringBuffer frame5 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_comment = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer("H|\\^&|||     SA-10^00-22^14648^^^^CR690716||||||||E1394-97");//"H|\\^&|||||||||||E1394-97|");
		//header.append("|||||||||P");	// for Alinity
		//header.append("||"); 			// for Vitros Ramji Masked
		//header.append("qnxa224"); 	// for Vitros Ramji Masked	
		//header.append("|||||");  		// for Vitros Ramji Masked
		//header.append("|||LIS2-A|");	// for Vitros Ramji Masked
		//header = header.append(current_time_str);	// for Vitros Ramji Masked

		//StringBuffer line4 = new StringBuffer("L|1|N"); // for Vitros Ramji Masked
		StringBuffer line4 = new StringBuffer("L|1|N"); // for Alinity

		//StringBuffer line6 = new StringBuffer("|||O"); // for Vitros Ramji Masked
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		/*	 // for Vitros Ramji Masked
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("|||");
		p.append(name_pat_last.trim());
		p.append("^");
		p.append(name_pat_first.trim());
		 */
		//Added for Alinity
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);

		
		//p.append("||||^^|||||||||||||||||||||||||||||");
		
	System.out.println( Server.name_pat);
	
	if(Server.name_pat !=null) {
		
		
		
	
	String[] patDetilas=Server.name_pat.split("#");
	String[] patName=patDetilas[0].split("\\s");
	p.append("|||");
	p.append(patDetilas[3]+"|");
	p.append("^");

	p.append(patName[0]);
	p.append("^");
	p.append(patName[1]);
	SimpleDateFormat time_formatter21 = new SimpleDateFormat("yyyyMMdd");
	String current_time_str22 = time_formatter21.format(System.currentTimeMillis());
	patDetilas[1]=patDetilas[1].replaceAll("Yr", "");
	 int age = Integer.parseInt(patDetilas[1].replaceAll("\\s", ""));

     // Get today's date
     LocalDate today = LocalDate.now();

     // Subtract the age years from today's date to estimate DOB
     LocalDate dob = today.minusYears(age);

     // If the person's birthday hasn't occurred yet this year, subtract one more year
     if (today.getMonthValue() < dob.getMonthValue() || 
         (today.getMonthValue() == dob.getMonthValue() && today.getDayOfMonth() < dob.getDayOfMonth())) {
         dob = dob.minusYears(1);
     }

     // Format and display the result
     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
     System.out.println("Estimated Date of Birth: " + dob.format(formatter));
	p.append("||"+dob.format(formatter)+"|"+patDetilas[2].replaceAll("\\s", "")+"|||||^Dr||||||||||||");
	}
	else {
		p.append("||||^^|||||||||||||||||||||||||||||");
		
	}
	StringBuffer Order = new StringBuffer();
		StringBuffer Comment = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);
				p.delete(0, p.length());

				// ======================================================
				frameList.clear();

				//frameList.add(""); ENQ
				frame1.append(stx);
				frame1.append(Server.StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());

				Server.StxCounter = Server.StxCounter + 1;

				frame2.append(stx);
				frame2.append(Server.StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());

				// ===========================Start for Vitros 5600=========================================
				/*	Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("||^^^1.0000+");
				for (int k = 0; k < Server.testCode.size(); k++)

				{
					Order.append(Server.testCode.get(k));
					Order.append("+1.0");
					if (k != Server.testCode.size() - 1) {
						Order.append("\\");
					}
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||N||||5|||||||");
				Order.append(line6);
				Order.append(cr);
				 */	
				//=========================END for Vitros 5600=========================================	
				// ===========================Start for Alinity=======O|1|002111522041500||^^^65|||||||A||||||||||||||O
				frame3.delete(0, frame3.length());
				int OrderCounter=0;
				int fCount  = 3;
				int loopSize = Server.testCode.size();
				if(loopSize==0) //added this if condition for null Response 
				{
					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					//Order.append("^");
				//	Order.append("^");
					Order.append(Server.Sample_code.get(0)+"|");
					
					Order.append("^^^^WBC\\^^^^NEUT%\\^^^^LYMPH%\\^^^^MONO%\\^^^^EO%\\^^^^BASO%\\^^^^NEUT#\\^^^^MONO#\\^^^^LYMPH#\\^^^^EO#\\^^^^RBC\\^^^^HCT\\^^^^MCV\\^^^^MCH\\^^^^MCHC\\^^^^RDW-CV\\^^^^PLT\\^^^^HGB");
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|||||||N||||||||||||||Q");
				


					Order.append(cr);

					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);
					frame3.append(Order);
					frame3.append(etx);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					frame3.append(cr);
					frame3.append(lf);
					frameList.add(frame3.toString());
					frame3.delete(0, frame3.length());
					Server.StxCounter=Server.StxCounter+1;	
				}
				else
				{

					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					//Order.append("^");
				//	Order.append("^");
					Order.append(Server.Sample_code.get(0)+"|");
					
					Order.append("^^^^WBC\\^^^^NEUT%\\^^^^LYMPH%\\^^^^MONO%\\^^^^EO%\\^^^^BASO%\\^^^^NEUT#\\^^^^MONO#\\^^^^LYMPH#\\^^^^EO#\\^^^^RBC\\^^^^HCT\\^^^^MCV\\^^^^MCH\\^^^^MCHC\\^^^^RDW-CV\\^^^^PLT\\^^^^HGB");
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|||||||N||||||||||||||Q");
				



					Order.append(cr);

					//=========================END for Vitros 5600=========================================	

					buf_order.append(Order);
					Order.delete(0, Order.length());

					buf_comment.append(Comment);
					Comment.delete(0, Comment.length());

					// --------------------------------------------
					System.out.println("Alinity Frame Count Checking :" + Server.StxCounter);
					int frameCount = 0, first = 0, mid = 0, remain = 0;
					frameCount = FrameCounter(buf_order.length());
					int length = buf_order.length();

					//for (int i = 1; i <= frameCount; i++) 
					//{
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(fCount);

					frame3.append(buf_order.substring(first, mid));
					//---------------------------------
					//		if (fCount != frameCount) 
					{
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					}
					//		else
					//		{
					//			frame3.append(etb);
					//			frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
					//			frame3.append(cr);
					//			frame3.append(lf);
					//		}
					length = length - 240;
					first = mid;
					//-----------------------------------------
					frameList.add(frame3.toString());

					frame3.delete(0, frame3.length());


					fCount++;

					if(fCount==8)
					{
						fCount=0;
					}
					//}

					/*
				for (int i = 1; i <= frameCount; i++) 
				{
					if (Server.StxCounter == 7)
					{
						Server.StxCounter = 0;
						System.out.println("Alinity Frame Count Set 0 After 7 :" + Server.StxCounter);
					}
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					if(Server.StxCounter == 8)
					{	Server.StxCounter = -1;
						System.out.println("Alinity Initial Frame Count is 8 :" + Server.StxCounter);
					}
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						frame3.append(cr);
						frame3.append(lf);
					}
						length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
						frame3.delete(0, frame3.length());

				}
					 */
					buf_order.delete(0, buf_order.length());
					//System.out.println("frameList= " +k);
					//				if(k==loopSize-1)
					//				{
					//					Server.StxCounter = fCount;
					//				}
					//System.out.println("frameList= " + frameList.toString());
					//}//For Loop Ramji for Multiple Order Packet frame 3
				}//else		
				// -------------------------------------


				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================
			frame5.append(stx);
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}
			frame5.append(Server.StxCounter);
			Comment.append("C|1|L|Order comment.|G");
			Comment.append(cr);
			Comment.append(etx);
			//Comment.append("78");
			frame5.append(Comment);
			frame5.append(CheckSum(frame5.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame5.append(cr);
			frame5.append(lf);

			//frameList.add(frame5.toString());
			frame5.delete(0, frame5.length());

			Server.StxCounter = Server.StxCounter + 1;
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}


			// frameList4.clear();
			frame4.append(stx);
			frame4.append(Server.StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());


			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("Final String after checksum" + frameList.toString());


		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return frameList;
	}
	
	
	public static List HoribaP580(String line) {
		System.out.println("Sysmax Bi DIR with ENQ----2500");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time---" + current_time_str2);

		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();
		StringBuffer frame5 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_comment = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer("H|\\^&|||     SA-10^00-22^14648^^^^CR690716||||||||E1394-97");//"H|\\^&|||||||||||E1394-97|");
		//header.append("|||||||||P");	// for Alinity
		//header.append("||"); 			// for Vitros Ramji Masked
		//header.append("qnxa224"); 	// for Vitros Ramji Masked	
		//header.append("|||||");  		// for Vitros Ramji Masked
		//header.append("|||LIS2-A|");	// for Vitros Ramji Masked
		//header = header.append(current_time_str);	// for Vitros Ramji Masked

		//StringBuffer line4 = new StringBuffer("L|1|N"); // for Vitros Ramji Masked
		StringBuffer line4 = new StringBuffer("L|1|N"); // for Alinity

		//StringBuffer line6 = new StringBuffer("|||O"); // for Vitros Ramji Masked
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		/*	 // for Vitros Ramji Masked
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("|||");
		p.append(name_pat_last.trim());
		p.append("^");
		p.append(name_pat_first.trim());
		 */
		//Added for Alinity
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);

		
		//p.append("||||^^|||||||||||||||||||||||||||||");
		
	System.out.println( Server.name_pat);
	
	if(Server.name_pat !=null) {
		
		
		
	
	String[] patDetilas=Server.name_pat.split("#");
	String[] patName=patDetilas[0].split("\\s");
	
	
	p.append("|||");
	p.append(patDetilas[3]+"|");
	p.append("^");

	p.append(patName[0]);
	p.append("^");
	p.append(patName[1]);
	SimpleDateFormat time_formatter21 = new SimpleDateFormat("yyyyMMdd");
	String current_time_str22 = time_formatter21.format(System.currentTimeMillis());
	patDetilas[1]=patDetilas[1].replaceAll("Yr", "");
	 int age = Integer.parseInt(patDetilas[1].replaceAll("\\s", ""));

     // Get today's date
     LocalDate today = LocalDate.now();

     // Subtract the age years from today's date to estimate DOB
     LocalDate dob = today.minusYears(age);

     // If the person's birthday hasn't occurred yet this year, subtract one more year
     if (today.getMonthValue() < dob.getMonthValue() || 
         (today.getMonthValue() == dob.getMonthValue() && today.getDayOfMonth() < dob.getDayOfMonth())) {
         dob = dob.minusYears(1);
     }

     // Format and display the result
     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
     System.out.println("Estimated Date of Birth: " + dob.format(formatter));
	p.append("||"+dob.format(formatter)+"|"+patDetilas[2].replaceAll("\\s", "")+"|||||^Dr||||||||||||");
	}
	else {
		p.append("||||^^|||||||||||||||||||||||||||||");
		
	}
	StringBuffer Order = new StringBuffer();
		StringBuffer Comment = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);
				p.delete(0, p.length());

				// ======================================================
				frameList.clear();

				//frameList.add(""); ENQ
				frame1.append(stx);
				frame1.append(Server.StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());

				Server.StxCounter = Server.StxCounter + 1;

				frame2.append(stx);
				frame2.append(Server.StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());

				// ===========================Start for Vitros 5600=========================================
				/*	Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("||^^^1.0000+");
				for (int k = 0; k < Server.testCode.size(); k++)

				{
					Order.append(Server.testCode.get(k));
					Order.append("+1.0");
					if (k != Server.testCode.size() - 1) {
						Order.append("\\");
					}
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||N||||5|||||||");
				Order.append(line6);
				Order.append(cr);
				 */	
				//=========================END for Vitros 5600=========================================	
				// ===========================Start for Alinity=======O|1|002111522041500||^^^65|||||||A||||||||||||||O
				frame3.delete(0, frame3.length());
				int OrderCounter=0;
				int fCount  = 3;
				int loopSize = Server.testCode.size();
				if(loopSize==0) //added this if condition for null Response 
				{
					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					//Order.append("^");
				//	Order.append("^");
					Order.append(Server.Sample_code.get(0)+"|");
					
					Order.append("^^^^Diff");
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|||||||N||||||||||||||Q");
				
					/*
					 * 3O|1|250220HTY180||^^^VitdA|||||||N||||||||||||||Q||||| 95
					 */

					Order.append(cr);

					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);
					frame3.append(Order);
					frame3.append(etx);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					frame3.append(cr);
					frame3.append(lf);
					frameList.add(frame3.toString());
					frame3.delete(0, frame3.length());
					Server.StxCounter=Server.StxCounter+1;	
				}
				else
				{

					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					//Order.append("^");
				//	Order.append("^");
					Order.append(Server.Sample_code.get(0)+"|");
					
					Order.append("^^^^Diff");
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|||||||N||||||||||||||Q");
				



					Order.append(cr);

					//=========================END for Vitros 5600=========================================	

					buf_order.append(Order);
					Order.delete(0, Order.length());

					buf_comment.append(Comment);
					Comment.delete(0, Comment.length());

					// --------------------------------------------
					System.out.println("Alinity Frame Count Checking :" + Server.StxCounter);
					int frameCount = 0, first = 0, mid = 0, remain = 0;
					frameCount = FrameCounter(buf_order.length());
					int length = buf_order.length();

					//for (int i = 1; i <= frameCount; i++) 
					//{
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(fCount);

					frame3.append(buf_order.substring(first, mid));
					//---------------------------------
					//		if (fCount != frameCount) 
					{
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					}
					//		else
					//		{
					//			frame3.append(etb);
					//			frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
					//			frame3.append(cr);
					//			frame3.append(lf);
					//		}
					length = length - 240;
					first = mid;
					//-----------------------------------------
					frameList.add(frame3.toString());

					frame3.delete(0, frame3.length());


					fCount++;

					if(fCount==8)
					{
						fCount=0;
					}
					//}

					/*
				for (int i = 1; i <= frameCount; i++) 
				{
					if (Server.StxCounter == 7)
					{
						Server.StxCounter = 0;
						System.out.println("Alinity Frame Count Set 0 After 7 :" + Server.StxCounter);
					}
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					if(Server.StxCounter == 8)
					{	Server.StxCounter = -1;
						System.out.println("Alinity Initial Frame Count is 8 :" + Server.StxCounter);
					}
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						frame3.append(cr);
						frame3.append(lf);
					}
						length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
						frame3.delete(0, frame3.length());

				}
					 */
					buf_order.delete(0, buf_order.length());
					//System.out.println("frameList= " +k);
					//				if(k==loopSize-1)
					//				{
					//					Server.StxCounter = fCount;
					//				}
					//System.out.println("frameList= " + frameList.toString());
					//}//For Loop Ramji for Multiple Order Packet frame 3
				}//else		
				// -------------------------------------


				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================
			frame5.append(stx);
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}
			frame5.append(Server.StxCounter);
			Comment.append("C|1|L|Order comment.|G");
			Comment.append(cr);
			Comment.append(etx);
			//Comment.append("78");
			frame5.append(Comment);
			frame5.append(CheckSum(frame5.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame5.append(cr);
			frame5.append(lf);

			//frameList.add(frame5.toString());
			frame5.delete(0, frame5.length());

			Server.StxCounter = Server.StxCounter + 1;
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}


			// frameList4.clear();
			frame4.append(stx);
			frame4.append(Server.StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());


			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("Final String after checksum" + frameList.toString());


		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return frameList;
	}

	public static List sysmax2500RBparseBI(String line) {
		System.out.println("Sysmax Bi DIR with ENQ----2500");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time---" + current_time_str2);

		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();
		StringBuffer frame5 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_comment = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer("H|\\^&|||||||||||E1394-97|");
		//header.append("|||||||||P");	// for Alinity
		//header.append("||"); 			// for Vitros Ramji Masked
		//header.append("qnxa224"); 	// for Vitros Ramji Masked	
		//header.append("|||||");  		// for Vitros Ramji Masked
		//header.append("|||LIS2-A|");	// for Vitros Ramji Masked
		//header = header.append(current_time_str);	// for Vitros Ramji Masked

		//StringBuffer line4 = new StringBuffer("L|1|N"); // for Vitros Ramji Masked
		StringBuffer line4 = new StringBuffer("L|1|N"); // for Alinity

		//StringBuffer line6 = new StringBuffer("|||O"); // for Vitros Ramji Masked
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		/*	 // for Vitros Ramji Masked
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("|||");
		p.append(name_pat_last.trim());
		p.append("^");
		p.append(name_pat_first.trim());
		 */
		//Added for Alinity
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("||||^^|||||||||||||||||||||||||||||");

		StringBuffer Order = new StringBuffer();
		StringBuffer Comment = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);
				p.delete(0, p.length());

				// ======================================================
				frameList.clear();

				frameList.add("");
				frame1.append(stx);
				frame1.append(Server.StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());

				Server.StxCounter = Server.StxCounter + 1;

				frame2.append(stx);
				frame2.append(Server.StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());

				// ===========================Start for Vitros 5600=========================================
				/*	Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("||^^^1.0000+");
				for (int k = 0; k < Server.testCode.size(); k++)

				{
					Order.append(Server.testCode.get(k));
					Order.append("+1.0");
					if (k != Server.testCode.size() - 1) {
						Order.append("\\");
					}
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||N||||5|||||||");
				Order.append(line6);
				Order.append(cr);
				 */	
				//=========================END for Vitros 5600=========================================	
				// ===========================Start for Alinity=======O|1|002111522041500||^^^65|||||||A||||||||||||||O
				frame3.delete(0, frame3.length());
				int OrderCounter=0;
				int fCount  = 3;
				int loopSize = Server.testCode.size();
				if(loopSize==0) //added this if condition for null Response 
				{
					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					Order.append("^");
					Order.append("^");
					Order.append(Server.sampleNo.toString().replace("^", "").trim());
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|");
					Order.append("|");
					Order.append("|");
					Order.append("^^^");
					Order.append("^^\\");
					Order.append("R");
					Order.append("|");
					Order.append(current_time_str);
					Order.append("|||||N|||||||||||||||||||");


					Order.append(cr);

					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);
					frame3.append(Order);
					frame3.append(etx);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					frame3.append(cr);
					frame3.append(lf);
					frameList.add(frame3.toString());
					frame3.delete(0, frame3.length());
					Server.StxCounter=Server.StxCounter+1;	
				}
				else
				{

					Order.append("O|1|");
					//OrderCounter = k + 1;
					//Order.append(Integer.toString(OrderCounter));
					Order.append("^");
					Order.append("^");
					Order.append(Server.sampleNo.toString().replace("^", "").trim());
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|");
					Order.append("|");

					for (int k = 0; k < Server.testCode.size(); k++)
					{

						//Order.append("O|1|"); // Need "O|1|" "O|2|" "O|3|"


						//Order.append("||^^^"); //RAMJI
						//Order.append(Server.testCode.get(k));
						//Order.append("||^^^349|||||||N||||||||||||||O"); //Hardcode
						Order.append("^^^");
						Order.append(Server.testCode.get(k));
						if (k != Server.testCode.size() - 1)
							Order.append("^^\\");
						else
							Order.append("^^");
					}

					//	Order.append(Server.testCode.get(k));
					//	if (k != Server.testCode.size() - 1) {
					//		Order.append("\\");

					//}

					Order.append("|");
					Order.append("R");
					Order.append("|");
					Order.append(current_time_str);
					Order.append("|||||N|||||||||||||||||||");

					Order.append(cr);

					//=========================END for Vitros 5600=========================================	

					buf_order.append(Order);
					Order.delete(0, Order.length());

					buf_comment.append(Comment);
					Comment.delete(0, Comment.length());

					// --------------------------------------------
					System.out.println("Alinity Frame Count Checking :" + Server.StxCounter);
					int frameCount = 0, first = 0, mid = 0, remain = 0;
					frameCount = FrameCounter(buf_order.length());
					int length = buf_order.length();

					//for (int i = 1; i <= frameCount; i++) 
					//{
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(fCount);

					frame3.append(buf_order.substring(first, mid));
					//---------------------------------
					//		if (fCount != frameCount) 
					{
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					}
					//		else
					//		{
					//			frame3.append(etb);
					//			frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
					//			frame3.append(cr);
					//			frame3.append(lf);
					//		}
					length = length - 240;
					first = mid;
					//-----------------------------------------
					frameList.add(frame3.toString());

					frame3.delete(0, frame3.length());


					fCount++;

					if(fCount==8)
					{
						fCount=0;
					}
					//}

					/*
				for (int i = 1; i <= frameCount; i++) 
				{
					if (Server.StxCounter == 7)
					{
						Server.StxCounter = 0;
						System.out.println("Alinity Frame Count Set 0 After 7 :" + Server.StxCounter);
					}
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					if(Server.StxCounter == 8)
					{	Server.StxCounter = -1;
						System.out.println("Alinity Initial Frame Count is 8 :" + Server.StxCounter);
					}
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						frame3.append(cr);
						frame3.append(lf);
					}
						length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
						frame3.delete(0, frame3.length());

				}
					 */
					buf_order.delete(0, buf_order.length());
					//System.out.println("frameList= " +k);
					//				if(k==loopSize-1)
					//				{
					//					Server.StxCounter = fCount;
					//				}
					//System.out.println("frameList= " + frameList.toString());
					//}//For Loop Ramji for Multiple Order Packet frame 3
				}//else		
				// -------------------------------------


				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================
			frame5.append(stx);
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}
			frame5.append(Server.StxCounter);
			Comment.append("C|1|L|Order comment.|G");
			Comment.append(cr);
			Comment.append(etx);
			//Comment.append("78");
			frame5.append(Comment);
			frame5.append(CheckSum(frame5.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame5.append(cr);
			frame5.append(lf);

			//frameList.add(frame5.toString());
			frame5.delete(0, frame5.length());

			Server.StxCounter = Server.StxCounter + 1;
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}


			// frameList4.clear();
			frame4.append(stx);
			frame4.append(Server.StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());


			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("Final String after checksum" + frameList.toString());


		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return frameList;
	}

	// ----------------------------------------------------------------------------




	// ----------------------------------------------------------------------------
	// ------------------------------------------------------------

	// Header parsing and Reply Packet Generation Method//========== vitrose5600
	// PACKET Format id=20011
	public static List headerParsing_vitrose5600_railtel(String line) {

		System.out.println("call 5600");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time---" + current_time_str2);

		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();
		StringBuffer frame5 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_comment = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer("H|\\^&|");
		header.append("|||||||||P");	// for Alinity
		//header.append("||"); 			// for Vitros Ramji Masked
		//header.append("qnxa224"); 	// for Vitros Ramji Masked	
		//header.append("|||||");  		// for Vitros Ramji Masked
		//header.append("|||LIS2-A|");	// for Vitros Ramji Masked
		//header = header.append(current_time_str);	// for Vitros Ramji Masked

		//StringBuffer line4 = new StringBuffer("L|1|N"); // for Vitros Ramji Masked
		StringBuffer line4 = new StringBuffer("L|1"); // for Alinity

		//StringBuffer line6 = new StringBuffer("|||O"); // for Vitros Ramji Masked
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		/*	 // for Vitros Ramji Masked
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("|||");
		p.append(name_pat_last.trim());
		p.append("^");
		p.append(name_pat_first.trim());
		 */
		//Added for Alinity
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|||********|^********************^||||||||||||||||||||******");

		StringBuffer Order = new StringBuffer();
		StringBuffer Comment = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);
				p.delete(0, p.length());

				// ======================================================
				frameList.clear();
				frame1.append(stx);
				frame1.append(Server.StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());

				Server.StxCounter = Server.StxCounter + 1;

				frame2.append(stx);
				frame2.append(Server.StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());

				// ===========================Start for Vitros 5600=========================================
				/*	Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("||^^^1.0000+");
				for (int k = 0; k < Server.testCode.size(); k++)

				{
					Order.append(Server.testCode.get(k));
					Order.append("+1.0");
					if (k != Server.testCode.size() - 1) {
						Order.append("\\");
					}
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||N||||5|||||||");
				Order.append(line6);
				Order.append(cr);
				 */	
				//=========================END for Vitros 5600=========================================	
				// ===========================Start for Alinity=======O|1|002111522041500||^^^65|||||||A||||||||||||||O
				frame3.delete(0, frame3.length());
				int OrderCounter=0;
				int fCount  = 3;
				int loopSize = Server.testCode.size();
				if(loopSize==0) //added this if condition for null Response 
				{
					System.out.println("Alinity Test Code Not Found : Save Blank Order Packet" );
					Order.append("O|1|");
					Order.append(Server.Sample_code.get(0).toString().replace("^", ""));		//+ "230426BIO0115"
					Order.append( "||^^^|||||||N||||||||||||||O");
					Order.append(cr);

					frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);
					frame3.append(Order);
					frame3.append(etx);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					frame3.append(cr);
					frame3.append(lf);
					frameList.add(frame3.toString());
					frame3.delete(0, frame3.length());
					Server.StxCounter=Server.StxCounter+1;	
				}
				else
				{
					for (int k = 0; k < Server.testCode.size(); k++)
					{

						//Order.append("O|1|"); // Need "O|1|" "O|2|" "O|3|"
						Order.append("O|");
						OrderCounter = k + 1;
						Order.append(Integer.toString(OrderCounter));
						Order.append("|");
						//Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
						Order.append("||^^^"); //RAMJI
						Order.append(Server.testCode.get(k));
						//Order.append("||^^^349|||||||N||||||||||||||O"); //Hardcode



						//	Order.append(Server.testCode.get(k));
						//	if (k != Server.testCode.size() - 1) {
						//		Order.append("\\");

						//}
						Order.append("|||||||N||||||||||||||O");

						Order.append(cr);

						//=========================END for Vitros 5600=========================================	

						buf_order.append(Order);
						Order.delete(0, Order.length());

						buf_comment.append(Comment);
						Comment.delete(0, Comment.length());

						// --------------------------------------------
						System.out.println("Alinity Frame Count Checking :" + Server.StxCounter);
						int frameCount = 0, first = 0, mid = 0, remain = 0;
						frameCount = FrameCounter(buf_order.length());
						int length = buf_order.length();

						//for (int i = 1; i <= frameCount; i++) 
						//{
						if (length < 240)
							mid = mid + length;
						else if (length == 240)
							mid = mid + length;
						else if (length > 240) {
							mid = mid + 240;
						}
						frame3.append(stx);
						Server.StxCounter = Server.StxCounter + 1;
						frame3.append(fCount);

						frame3.append(buf_order.substring(first, mid));
						//---------------------------------
						//		if (fCount != frameCount) 
						{
							frame3.append(etx);
							frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
							frame3.append(cr);
							frame3.append(lf);
						}
						//		else
						//		{
						//			frame3.append(etb);
						//			frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						//			frame3.append(cr);
						//			frame3.append(lf);
						//		}
						length = length - 240;
						first = mid;
						//-----------------------------------------
						frameList.add(frame3.toString());

						frame3.delete(0, frame3.length());


						fCount++;

						if(fCount==8)

						{
							fCount=0;
						}
						//}

						/*
				for (int i = 1; i <= frameCount; i++) 
				{
					if (Server.StxCounter == 7)
					{
						Server.StxCounter = 0;
						System.out.println("Alinity Frame Count Set 0 After 7 :" + Server.StxCounter);
					}
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					if(Server.StxCounter == 8)
					{	Server.StxCounter = -1;
						System.out.println("Alinity Initial Frame Count is 8 :" + Server.StxCounter);
					}
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						frame3.append(cr);
						frame3.append(lf);
					}
						length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
						frame3.delete(0, frame3.length());

				}
						 */
						buf_order.delete(0, buf_order.length());
						//System.out.println("frameList= " +k);
						if(k==loopSize-1)
						{
							Server.StxCounter = fCount;
						}
						//System.out.println("frameList= " + frameList.toString());
					}//For Loop Ramji for Multiple Order Packet frame 3
				}//else		
				// -------------------------------------


				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================
			frame5.append(stx);
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}
			frame5.append(Server.StxCounter);
			Comment.append("C|1|L|Order comment.|G");
			Comment.append(cr);
			Comment.append(etx);
			//Comment.append("78");
			frame5.append(Comment);
			frame5.append(CheckSum(frame5.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame5.append(cr);
			frame5.append(lf);

			frameList.add(frame5.toString());
			frame5.delete(0, frame5.length());

			Server.StxCounter = Server.StxCounter + 1;
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}


			// frameList4.clear();
			frame4.append(stx);
			frame4.append(Server.StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());


			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("Final String after checksum" + frameList.toString());


		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return frameList;
	}

	// ----------------------------------------------------------------------------


	// PACKET Format id=20045
	public static List ERBAXL1000response(String line,PrintStream cout) {
		System.out.println("Sysmax Bi DIR with ENQ----2500");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time---" + current_time_str2);

		Server.StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		char[] array = line.toCharArray();
		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();
		StringBuffer frame5 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_comment = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		StringBuffer header = new StringBuffer("H|`^&||||||||||P|E 1394-97|"+current_time_str);
		//header.append("|||||||||P");	// for Alinity
		//header.append("||"); 			// for Vitros Ramji Masked
		//header.append("qnxa224"); 	// for Vitros Ramji Masked	
		//header.append("|||||");  		// for Vitros Ramji Masked
		//header.append("|||LIS2-A|");	// for Vitros Ramji Masked
		//header = header.append(current_time_str);	// for Vitros Ramji Masked

		//StringBuffer line4 = new StringBuffer("L|1|N"); // for Vitros Ramji Masked
		StringBuffer line4 = new StringBuffer("L|1|N"); // for Alinity

		//StringBuffer line6 = new StringBuffer("|||O"); // for Vitros Ramji Masked
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		/*	 // for Vitros Ramji Masked
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", ""));
		p.append("|||");
		p.append(name_pat_last.trim());
		p.append("^");
		p.append(name_pat_first.trim());
		 */
		//Added for Alinity
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("|");
		p.append(Server.Sample_code.get(0).toString().replace("^", "").trim());
		
		//p.append("||||||U|||||||||||||||||||||||||||");

		StringBuffer Order = new StringBuffer();
		StringBuffer Comment = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			Server.cobas = cobas;
			Server.host = host;
			System.out.println("TIME:- " + time);

			Server.stx = stx;
			Server.mode = mode;

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);
				p.delete(0, p.length());

				// ======================================================
				frameList.clear();

				//frameList.add("");
				frame1.append(stx);
				frame1.append(Server.StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				//frame1.append(etx);
				//frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				//frame1.append(cr);
				//frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());

				Server.StxCounter = Server.StxCounter + 1;

				//	frame2.append(stx);
				//	frame2.append(Server.StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				//	frame2.append(etx);
				//	frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				//frame2.append(cr);
				//frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());

				// ===========================Start for Vitros 5600=========================================
				/*	Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Server.Sample_code.get(0).toString().replace("^", ""));
				Order.append("||^^^1.0000+");
				for (int k = 0; k < Server.testCode.size(); k++)

				{
					Order.append(Server.testCode.get(k));
					Order.append("+1.0");
					if (k != Server.testCode.size() - 1) {
						Order.append("\\");
					}
				}
				Order.append("|R|");
				Order.append("|");
				Order.append("||||N||||5|||||||");
				Order.append(line6);
				Order.append(cr);
				 */	
				//=========================END for Vitros 5600=========================================	
				// ===========================Start for Alinity=======O|1|002111522041500||^^^65|||||||A||||||||||||||O
				frame3.delete(0, frame3.length());
				int OrderCounter=0;
				int fCount  = 3;
				int loopSize = Server.testCode.size();
				System.out.println("loopSize"+loopSize);

				String[] multiSampl=Server.Sample_code.toString().split("\\^");
				//O|1|270524BIO041||^^^UREA`^^^CRENZ`^^^UA`^^^Na`^^^K`^^^
				//Cl`^^^CA`^^^MGXB`^^^PHOS`^^^BIT`^^^BIDD`^^^
				//IBIL`^^^SGOTD`^^^SGPT1`^^^ALPU`^^^GGT`^^^PRO`^^^
				//ALBD`^^^GLOB`^^^A/G`^^^LDH`^^^CHOL`^^^TRIG`^^^HDLC
				//`^^^VLD`^^^LDL|R||20240527105953||||A||||SERUM||||||||||O|||||
				if(multiSampl.length>1) //added this if condition for null Response 
				{
					Order.append("O|1|");

					Order.append(Server.Sample_code.get(0).toString().replace("^", "").trim());
					// Order.append("^50087^1^^S1^SC^|");
					Order.append("|");
					Order.append("|");
					Order.append("^^^0^|");
					Order.append("");
					Order.append("R");
					Order.append("|");
					Order.append("|");
					Order.append(current_time_str);
					Order.append("||||N||||SERUM||||||||||Q"
							+ "");


					Order.append(cr);

					//	frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					//	frame3.append(Server.StxCounter);
					frame3.append(Order);
					//	frame3.append(etx);
					//	frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					//frame3.append(cr);
					//	frame3.append(lf);
					frameList.add(frame3.toString());
					frame3.delete(0, frame3.length());
					Server.StxCounter=Server.StxCounter+1;	
				}
				else
				{
					//O|1|270524BIO041||^^^UREA`^^^CRENZ`^^^UA`^^^Na`^^^K`^^^
					//Cl`^^^CA`^^^MGXB`^^^PHOS`^^^BIT`^^^BIDD`^^^
					//IBIL`^^^SGOTD`^^^SGPT1`^^^ALPU`^^^GGT`^^^PRO`^^^
					//ALBD`^^^GLOB`^^^A/G`^^^LDH`^^^CHOL`^^^TRIG`^^^HDLC
					//`^^^VLD`^^^LDL|R||20240527105953||||A||||SERUM||||||||||O|||||
					Order.append("O|1|");
					Order.append(Server.Sample_code.get(0).toString().replace("^", "").trim());
					Order.append("|");
					Order.append("|");

					for (int k = 0; k < Server.testCode.size(); k++)
					{

						Order.append("^^^");
						Order.append(Server.testCode.get(k));
						if (k != Server.testCode.size() - 1)
							Order.append("`");
						else
							Order.append("");
					}

					//	Order.append(Server.testCode.get(k));
					//	if (k != Server.testCode.size() - 1) {
					//		Order.append("\\");

					//}

					Order.append("|");
					Order.append("R");
					Order.append("|");
					Order.append("|");
					Order.append(current_time_str);
					Order.append("||||N||||SERUM||||||||||Q"); //used O in place of Q for TN maachines

					Order.append(cr);

					//=========================END for Vitros 5600=========================================	

					buf_order.append(Order);
					Order.delete(0, Order.length());

					buf_comment.append(Comment);
					Comment.delete(0, Comment.length());

					// --------------------------------------------
					System.out.println("Alinity Frame Count Checking :" + Server.StxCounter);
					int frameCount = 0, first = 0, mid = 0, remain = 0;
					frameCount = FrameCounter(buf_order.length());
					int length = buf_order.length();

					//for (int i = 1; i <= frameCount; i++) 
					//{
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					//	frame3.append(stx);
					Server.StxCounter = Server.StxCounter + 1;
					//	frame3.append(fCount);

					frame3.append(buf_order.substring(first, mid));
					//---------------------------------
					//		if (fCount != frameCount) 
					{
						//		frame3.append(etx);
						//		frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						//	frame3.append(cr);
						//	frame3.append(lf);
					}
					//		else
					//		{
					//			frame3.append(etb);
					//			frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
					//			frame3.append(cr);
					//			frame3.append(lf);
					//		}
					length = length - 240;
					first = mid;
					//-----------------------------------------
					frameList.add(frame3.toString());

					frame3.delete(0, frame3.length());


					fCount++;

					if(fCount==8)
					{
						fCount=0;
					}
					//}

					/*
				for (int i = 1; i <= frameCount; i++) 
				{
					if (Server.StxCounter == 7)
					{
						Server.StxCounter = 0;
						System.out.println("Alinity Frame Count Set 0 After 7 :" + Server.StxCounter);
					}
					if (length < 240)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					frame3.append(stx);
					if(Server.StxCounter == 8)
					{	Server.StxCounter = -1;
						System.out.println("Alinity Initial Frame Count is 8 :" + Server.StxCounter);
					}
					Server.StxCounter = Server.StxCounter + 1;
					frame3.append(Server.StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						frame3.append(cr);
						frame3.append(lf);
					}
						length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
						frame3.delete(0, frame3.length());

				}
					 */
					buf_order.delete(0, buf_order.length());
					//System.out.println("frameList= " +k);
					//				if(k==loopSize-1)
					//				{
					//					Server.StxCounter = fCount;
					//				}
					//System.out.println("frameList= " + frameList.toString());
					//}//For Loop Ramji for Multiple Order Packet frame 3
				}//else		
				// -------------------------------------

				Server.Sample_code.remove(0);
				//	line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================
			frame5.append(stx);
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}
			//frame5.append(Server.StxCounter);
			Comment.append("C|1|L|Order comment.|G");
			Comment.append(cr);
			//	Comment.append(etx);
			//Comment.append("78");
			frame5.append(Comment);
			//	frame5.append(CheckSum(frame5.toString())); // FRAME WITH STX STX COUNTER AND ETB
			//	frame5.append(cr);
			//	frame5.append(lf);

			//frameList.add(frame5.toString());
			frame5.delete(0, frame5.length());

			Server.StxCounter = Server.StxCounter + 1;
			if(Server.StxCounter==8)
			{	
				Server.StxCounter=0;
			}
			else
			{
				Server.StxCounter = Server.StxCounter ;
			}


			// frameList4.clear();
			//frame4.append(stx);
			//frame4.append(Server.StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			//	frame4.append(etx);
			//	frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			//	frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());

			//frameList.add("");
			StringBuffer finalFrame= new StringBuffer();
			//finalFrame.append("");  //added ENQ before frame....
			for (int i = 0; i < frameList.size(); i++) {
				finalFrame.append(frameList.get(i));
			}


			int frameCount = 0, first = 0, mid = 0, remain = 0;
			frameCount = FrameCounter(finalFrame.length());
			int length = finalFrame.length();
			int fCount=1;
			for (int i = 1; i <= frameCount; i++) 
			{
				if (length < 240)
					mid = mid + length;
				else if (length == 240)
					mid = mid + length;
				else if (length > 240) {
					mid = mid + 240;
				}
				frame3.append(stx);
				Server.StxCounter = Server.StxCounter + 1;
				//	frame3.append(fCount);
				//frame3.delete(0, frame3.length());
				frame3.append(finalFrame.substring(first, mid));

				//---------------------------------
				if (fCount == frameCount) 
				{
					frame3.append(etx);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
					frame3.append(cr);
					frame3.append(lf);
				}
				else
				{
					frame3.append(etb);
					frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
					frame3.append(cr);
					frame3.append(lf);
				}
				length = length - 240;
				first = mid;
				fCount++;
			}

			frameList.clear();
			finalFrame.append(etx);
			finalFrame.append(CheckSum(finalFrame.toString()));
			//finalFrame.append(""); //eot
			finalFrame.append(cr);
			finalFrame.append(lf);




			frameList.add("");
			frameList.add(finalFrame);
			frameList.add(eot);
			
			
			
			cout.print("");
			cout.print(finalFrame);
			cout.print(eot);
		
			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			System.out.println("Final String after checksum" + frameList.toString());
			
			
			
			
			System.out.println("Server ERBA: "+"");
			System.out.println("Server ERBA: "+finalFrame);
			System.out.println("Server ERBA: "+eot);

			Server.testCode.clear();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		
		//multiframeResponse.add(frameList);
		
		return frameList;
	}


	// frame Counts
	public static int FrameCounter(int num) {
		int count = 1;

		int remain = 0;
		while (true) {
			if (num % 240 == 0) {
				count = num / 240;
				break;
			}
			remain = num / 240;
			count = count + remain;
			break;
		}

		System.out.println("Count " + count);
		return count;
	}

	// Parsing
	public static void parse(List<String> list) {
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();
			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(0)) == 'O') {
					char[] ch = line.toCharArray();
					int count = 0;
					for (int i = 0; i < ch.length; i++) {
						// if(ch[i]==94) // Ascii value for '^'
						// break;

						if (ch[i] == '|')
							count++;

						if (count == 2) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}

						if (count == 3) {
							break;
						}

					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}
				if (Character.toUpperCase(line.charAt(0)) == 'R') {
					r++;
					char[] ch = line.toCharArray();
					int count = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '^') {
							count++;
							if (count == 3)
								i++;
						}

						if (count == 4) {
							break;
						}

						if (count == 3) {
							TestCode.append(ch[i]);
						}

						if (r != 1) {
							if (count == 6) {
								// TestCode.append(ch[i]);
							}

							if (count == 7) {
								// TestCode.append(ch[i]);
							}
						}

					}
					System.out.println(
							"Testcode==================:- " + (TestCode.toString().replace("^", "")).replace("|", ""));

					lis.add(TestCode.toString());

					int count1 = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|') {
							count1++;
							if (count1 == 3)
								i++;
						}
						if (ch[i] == '|' && count == 4)
							break;
						if (count1 == 3) {

							TestValue.append(ch[i]);
							String str2 = TestValue.toString().replace("^", "");
							// to get a StringBuffer result:
							TestValue.delete(0, TestValue.length());
							TestValue.append(str2);

						}
					}
					System.out.println("Testvalue==============:- " + TestValue);

					lis1.add(TestValue.toString());
				}

				if (!TestCode.toString().trim().equals("") && r > 1) {
					// System.out.println("call api======");
					// System.out.println("TestValue value======"+ TestValue);
					// System.out.println("TestCode2========="+ TestCode2);
					// System.out.println("sampleName value======"+ sampleName);
					if (((TestCode.toString().replace("^", "")).trim().equals("MTB"))
							|| ((TestCode.toString().replace("^", "")).trim().equals("Rif Resistance"))) {
						System.out.println("Testcode3-- only MTB or RIf Resistance detected or not =======:- "
								+ (TestCode.toString().replace("^", "")).trim());
						//
						// abc.insert_GenExpert_MTB((TestCode3.toString().replace("^","")).trim(),TestValue.toString(),
						// sampleName.toString().replace("-"," "));
					}
					aBCbkp.insert_GenExpert((TestCode.toString().replace("^", "")).replace("|", ""), TestValue.toString(),
							sampleName.toString());

				}
			}
		}

		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}



	// ------------------------------------------------------------------------------------------------------------
	public static String CheckSum(String bff) {
		int sum = 0, j = 0;
		StringBuffer bf = new StringBuffer(); // IF STRING COMES WITHOUT STX THEN APPEND STX
		StringBuffer string = new StringBuffer("0");
		if (bff.charAt(0) == 2) {
		} else {
			bf.append(Server.stx);
			bf.append(bff);
			bff = bf.toString();
		}

		char[] ch = bff.toCharArray();
		for (int i = 1; i < ch.length; i++) // CHECKSUM WITH STX STX-COUNTER AND ETB OR ETX
		{
			String hexx = Integer.toHexString(ch[i]);
			int decimal = Integer.parseInt(hexx, 16);
			sum = sum + decimal;
		}
		sum = sum % 256;
		String str = Integer.toHexString(sum);
		// System.out.println("checksum:---"+checksum);
		// checksum = checksum.substring(1, checksum.length());
		str = str.toUpperCase(); // IF ALPHABET COMES THEN IT SHOULD BE IN UPPER CASE
		if (str.length() == 1) {
			string.append(str);
		}
		System.out.println("Sum " + str + "    str" + string);
		if (str.length() == 1)
			return string.toString();
		else
			return str;
	}

	// ------------------------------------------------------------------

	// -------------------------------------------------------------------------
	//	public static void Vitrose_5600_odisha(List<String> list) // Vitrose_5600
	//	{
	//		Map<String, List> mp = new HashMap();
	//		List lis = new ArrayList();
	//		List lis1 = new ArrayList();
	//		String ip = "";
	//		StringBuffer sampleName = new StringBuffer();
	//		StringBuffer TestCode = null;
	//		StringBuffer testCode1 = null;
	//		StringBuffer TestValue;
	//		System.out.println("size:-- " + list.size());
	//		String stcode;
	//		String sTvalue;
	//		ABC abc = new ABC();
	//		Map<String, String> testCodeMap = new LinkedHashMap<String, String>();
	//
	////		testCodeMap.put("306", "Amyl");
	////		testCodeMap.put("315", "Urea");
	////		testCodeMap.put("303", "Alb");
	////		testCodeMap.put("300", "Glu");
	////		testCodeMap.put("300", "Glu");
	////		testCodeMap.put("314", "Crea");
	////		testCodeMap.put("301", "Tp");
	////		testCodeMap.put("910", "Glob");
	////		testCodeMap.put("305", "Chol");
	////		testCodeMap.put("304", "Trig");
	////
	////		testCodeMap.put("356", "Dhdl");
	////		testCodeMap.put("912", "Vldl");
	////		testCodeMap.put("302", "Uric");
	////		testCodeMap.put("319", "Tbil");
	////		testCodeMap.put("327", "Bc");
	////		testCodeMap.put("320", "Ast");
	////		testCodeMap.put("357", "Altv");
	////		testCodeMap.put("321", "Alkp");
	////		testCodeMap.put("308", "K+");
	////		testCodeMap.put("325", "Lipa");
	////
	////		testCodeMap.put("311", "Phos");
	////		testCodeMap.put("337", "Che");
	////		testCodeMap.put("323", "Ldh");
	////		testCodeMap.put("329", "Ckmb");
	////		testCodeMap.put("344", "Crp");
	////		testCodeMap.put("315", "Urea");
	////		testCodeMap.put("916", "Ldl");
	////		testCodeMap.put("300", "Glu");
	////		testCodeMap.put("318", "Ca");
	////		testCodeMap.put("309", "Na+");
	////
	////		testCodeMap.put("317", "Bu");
	////		testCodeMap.put("300", "Glu");
	////		testCodeMap.put("324", "Ck");
	////		testCodeMap.put("303", "Alb");
	//		testCodeMap.put("306", "AMYL");
	//		testCodeMap.put("315", "Urea");
	//		testCodeMap.put("303", "ALB");
	//		testCodeMap.put("300", "GLU");
	//		testCodeMap.put("300", "GLU");
	//		testCodeMap.put("314", "CREA");
	//		testCodeMap.put("301", "TP");
	//		testCodeMap.put("910", "GLOB");
	//		testCodeMap.put("305", "CHOL");
	//		testCodeMap.put("304", "TRIG");
	//
	//		testCodeMap.put("356", "dHDL");
	//		testCodeMap.put("912", "VLDL");
	//		testCodeMap.put("302", "URIC");
	//		testCodeMap.put("319", "TBIL");
	//		testCodeMap.put("327", "Bc");
	//		testCodeMap.put("320", "AST");
	//		testCodeMap.put("357", "ALTV");
	//		testCodeMap.put("321", "ALKP");
	//		testCodeMap.put("308", "K+");
	//		testCodeMap.put("325", "LIPA");
	//
	//		testCodeMap.put("311", "PHOS");
	//		testCodeMap.put("337", "CHE");
	//		testCodeMap.put("323", "LDH");
	//		testCodeMap.put("329", "CKMB");
	//		testCodeMap.put("344", "CRP");
	//		testCodeMap.put("315", "UREA");
	//		testCodeMap.put("916", "LDL");
	//		testCodeMap.put("300", "GLU");
	//		testCodeMap.put("318", "Ca");
	//		testCodeMap.put("309", "Na+");
	//
	//		testCodeMap.put("317", "Bu");
	//		testCodeMap.put("300", "GLU");
	//		testCodeMap.put("324", "CK");
	//		testCodeMap.put("303", "ALB");
	//		int r = 0;
	//		for (String line : list) {
	//			r++;
	//			if (line.length() == 0 || line == null)
	//				break;
	//			TestCode = new StringBuffer();
	//			testCode1 = new StringBuffer();
	//			TestValue = new StringBuffer();
	//
	//			System.out.println("line.length() " + line.length());
	//			if (line.length() > 2) {
	//				if (Character.toUpperCase(line.charAt(2)) == 'O') {
	//					sampleName.delete(0, sampleName.length());
	//					System.out.println(
	//							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
	//
	//					char[] ch = line.toCharArray();
	//					int count = 0;
	//					int count_cr = 0;
	//					for (int i = 0; i < ch.length; i++) {
	//
	//						if (ch[i] == '|')
	//							count++;
	//
	//						if (count == 2 && (ch[i] == '^')) {
	//							count_cr++;
	//
	//						}
	//
	//						if (count == 2) {
	//							if (!(ch[i] == '^'))
	//								sampleName.append(ch[i]);
	//						}
	//						if (count_cr == 1)
	//							break;
	//
	//					}
	//
	//					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));
	//
	//				}
	//
	//				int countEX = 0;
	//				if (Character.toUpperCase(line.charAt(2)) == 'R') {
	//					System.out.println(
	//							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
	//
	//					char[] ch = line.toCharArray();
	//					int count = 0;
	//					int count_plus = 0;
	//					for (int i = 0; i < ch.length; i++) {
	//
	//						if (ch[i] == '|')
	//							count++;
	//						if (count == 2 && (ch[i] == '^')) {
	//							countEX++;
	//						}
	//
	//						if (countEX == 3 && (ch[i] == '+')) {
	//							count_plus++;
	//							if (count_plus == 1)
	//								i++;
	//						}
	//
	//						if (countEX == 3 && count_plus == 1) {
	//							if (!(ch[i] == '+'))
	//
	//								TestCode.append(ch[i]);
	//						}
	//
	//						if (count == 3) {
	//
	//							if (!(ch[i] == '|'))
	//								TestValue.append(ch[i]);
	//
	//						}
	//
	//						if (count == 4) {
	//							break;
	//						}
	//
	//					}
	//
	//				}
	//				System.out.print("testCode =============------ " + TestCode);
	//				// -- ---------------------------------------
	//				if (TestCode.length() > 1) {
	//					for (Map.Entry<String, String> entry : testCodeMap.entrySet()) {
	//
	//						if (entry.getKey().equals(TestCode.toString()))
	//							testCode1.append(entry.getValue());
	//
	//					}
	//					System.out.print("testCode1 =============------ " + testCode1);
	//				}
	//
	//				// --------------------------------------------
	//
	//				String Tc = (testCode1.toString().replace("!", "")).trim();
	//				System.out.println("TestCode :- " + Tc);
	//				// System.out.println("TestCode :- "+TestCode);
	//				System.out.println("TestValue :- " + TestValue);
	//				if (!Tc.trim().equals("") && r > 1) {
	//					System.out.println("r value=" + r);
	//					System.out.println("TestCode" + Tc);
	//					abc.insert_SysmexXN350(Tc, (TestValue.toString().replace("|", "")).trim(),    
	//							sampleName.toString().replace("|", "").trim());
	//					TestCode.delete(0, TestCode.length());
	//					TestCode.delete(0, testCode1.length());
	//					TestCode.delete(0, TestValue.length());       //replaceAll("[^0-9.]", "")
	//				}
	//			}
	//		}
	//
	//	}

	public static void parse_AIIMSRB_UA(List<String> list)
	{

		System.out.println("Urine ALZ RBL Machine ");
		int ResultPacket = 0;
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestCode1 = null;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABC abc = new ABC();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (line.contains("O|")) {
					// if (Character.toUpperCase(line.charAt(2)) == 'O') {
					sampleName.delete(0, sampleName.length());
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket = 0;
					char[] ch = line.toCharArray();
					int count = 0;
					int countCR = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;
						if (count == 3 && (ch[i] == '^')) {
							countCR++;

							if (countCR == 2)
								i++;

						}

						if (count == 2) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}
						if (count == 3)
							break;
					}

					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));
					line = "";
				}
				if (line.contains("R|") || line.contains("MAINFORMAT")) {
					// if (Character.toUpperCase(line.charAt(2)) == 'R') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket++;
					char[] ch = line.toCharArray();
					int count = 0;
					int countAs = 0;
					int count_cr = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 2 && (ch[i] == '^')) {
							countAs++;
						}
						if (count == 3 && (ch[i] == '^')) {
							count_cr++;
						}
						if (countAs == 3) {

							if (!(ch[i] == '^'))
								TestCode.append(ch[i]);
						}

						if (count == 3) {
							// if (!(ch[i] == '^'))
							if (!(ch[i] == '|')) // for Alinity
								TestValue.append(ch[i]);
						}

						if (count_cr == 1)
							break;

					}
					// added by rohit to SAVE value in form of 10_11 if value is 10.8 or something

					try {
					/*	if (TestCode.toString().equals("RBC") || TestCode.toString().equals("WBC")
								|| TestCode.toString().equals("EC"))

						{
							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							// int tc =Integer.parseInt(strtestVal);
							TestValue = new StringBuffer();

							//						if(strtestVal.equals("0")) {
							//							TestValue.append("NIL");
							//						}
							//						
							if (strtestVal.equals("-")) {

								TestValue.append("NIL");

							} else {

								double number = Double.parseDouble(strtestVal);
								long roundedNumber = (long) Math.round(number);

								if (roundedNumber < 1 && TestCode.toString().equals("RBC")) {
									TestValue.append("NIL");

								}
								
								else if (roundedNumber < 1 && !TestCode.toString().equals("RBC")) {
									TestValue.append("0-1");
								} else {
									int a = (int) (roundedNumber - 1);
									String finalValue = a + "-" + String.valueOf(roundedNumber);
									TestValue.append(finalValue);
								}
							}
						}*/

						 if (TestCode.toString().equals("C-CLOUD"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							TestValue = new StringBuffer();

							if (strtestVal.equals("-")) {

								TestValue.append("Clear");
							}

							else {

								TestValue.append("Turbid");
							}
						}
						
						else if (TestCode.toString().equals("C-LEU"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							TestValue = new StringBuffer();

							if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

							TestValue.append(strtestVal);
							
							}
						}

						else if (TestCode.toString().equals("C-GLU"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							}

							else if (strtestVal.equals("-")) {

							//	TestValue.append("NIL");
								TestValue.append("Absent");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-PRO") ||
								TestCode.toString().equals("C-KET") ||
						//TestCode.toString().equals("C-GLU") ||
						TestCode.toString().equals("C-BIL")
						)

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								//TestValue.append("NIL");
								TestValue.append("Absent");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-KET"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								TestValue.append("Absent");
								//TestValue.append("NIL");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-BLD"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								//TestValue.append("NIL");
								TestValue.append("Absent");
							}

							else {

								TestValue.append(strtestVal);

							}
						} 
						
						else if (TestCode.toString().equals("C-COLOR"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.contains("P YELLOW")) {

								TestValue.append("Pale yellow");
							} 
							else if (strtestVal.equals("D YELLOW")) {

								TestValue.append("Dark Yellow");
							}
							else if (strtestVal.equals("L YELLOW")) {

								TestValue.append("Light Yellow");
							}

						
							else {

								TestValue.append(strtestVal);

							}
						} 

						else if (TestCode.toString().equals("CAST"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 2) {

								TestValue.append("Absent");
							}

							else {

								TestValue.append("PRESENT");
							}
						}

						else if (TestCode.toString().equals("YLC"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 5) {

								TestValue.append("Absent");
							}

							else {

								TestValue.append("PRESENT");
							}
						}

						else if (TestCode.toString().equals("X'TAL"))

						{

							
							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 2) {

								TestValue.append("Absent");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}
						} else if (TestCode.toString().equals("BACT"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 300) {

								TestValue.append("NIL");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}

						}

						else {
							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							if (strtestVal.equals("-")) {
								TestValue = new StringBuffer();
								TestValue.append("NIL");
							}

							else

							{
								TestValue = new StringBuffer();
								TestValue.append(strtestVal);

							}
						}

						System.out.println("TestCode : " + TestCode);
						System.out.println("TestValue : " + TestValue);

					}

					catch (Exception e) {
						e.printStackTrace();
					}
				}

				line = "";

				// System.out.println("r value=" + r);
				if (!TestCode.toString().trim().equals("") && r > 1  && r < 56 && !sampleName.toString().trim().equals("")) {

					// System.out.println("r value=" + r);
					// RBL Comment if(ResultPacket==1)
					if (TestCode.toString().equals("RBC") || TestCode.toString().equals("WBC")
							|| TestCode.toString().equals("EC"))

					{
						System.out.println("Sysmex Urine Analyser RBL");
						
						double value = Double.parseDouble(TestValue.toString()); // Convert String to double
						double result = value * 0.18;  // Multiply by 0.18
						String resultStr = String.format("%.2f", result);  // Format to 2 decimal places

						System.out.println("Result as String: " + resultStr);
						abc.insert_SysmexXN350A(TestCode.toString().trim(),
								resultStr.toString().replace("^", "").trim(),
								sampleName.toString().replace("^", "").trim());
						System.out.println("Only First Result Value Insert if ResultPacket" + ResultPacket);

					}
					else {
						if (TestCode.toString().equals("X'TAL")) {
						String tc=TestCode.toString().replaceAll("X'TAL","XTAL");
						abc.insert_SysmexXN350A(tc,
								TestValue.toString().replace("^", "").trim(),
								sampleName.toString().replace("^", "").trim());
						System.out.println("Only First Result Value Insert if ResultPacket" + ResultPacket);

						}
						System.out.println("Sysmex Urine Analyser RBL");
						abc.insert_SysmexXN350A(TestCode.toString().trim(),
								TestValue.toString().replace("^", "").trim(),
								sampleName.toString().replace("^", "").trim());
						System.out.println("Only First Result Value Insert if ResultPacket" + ResultPacket);

						
					}
				}
				
				
			}
		}


	}

	//---------------------------------------------------------------------
	public static void parse_AIIMSRB_UA_RB(List<String> list)
	{

		System.out.println("Urine ALZ RBL Machine ");
		int ResultPacket = 0;
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestCode1 = null;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABC abc = new ABC();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (line.contains("O|")) {
					// if (Character.toUpperCase(line.charAt(2)) == 'O') {
					sampleName.delete(0, sampleName.length());
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket = 0;
					char[] ch = line.toCharArray();
					int count = 0;
					int countCR = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;
						if (count == 3 && (ch[i] == '^')) {
							countCR++;

							if (countCR == 2)
								i++;

						}

						if (count == 2) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}
						if (count == 3)
							break;
					}

					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));
					line = "";
				}
				if (line.contains("R|") && line.contains("MAINFORMAT")) {
					// if (Character.toUpperCase(line.charAt(2)) == 'R') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket++;
					char[] ch = line.toCharArray();
					int count = 0;
					int countAs = 0;
					int count_cr = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 2 && (ch[i] == '^')) {
							countAs++;
						}
						if (count == 3 && (ch[i] == '^')) {
							count_cr++;
						}
						if (countAs == 3) {

							if (!(ch[i] == '^'))
								TestCode.append(ch[i]);
						}

						if (count == 3) {
							// if (!(ch[i] == '^'))
							if (!(ch[i] == '|')) // for Alinity
								TestValue.append(ch[i]);
						}

						if (count_cr == 1)
							break;

					}
					// added by rohit to SAVE value in form of 10_11 if value is 10.8 or something

					try {
						if (TestCode.toString().equals("RBC") || TestCode.toString().equals("WBC")
								|| TestCode.toString().equals("EC"))

						{
							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							// int tc =Integer.parseInt(strtestVal);
							TestValue = new StringBuffer();

							//						if(strtestVal.equals("0")) {
							//							TestValue.append("NIL");
							//						}
							//						
							if (strtestVal.equals("-")) {

								TestValue.append("NIL");

							} else {

								double number = Double.parseDouble(strtestVal);
								long roundedNumber = (long) Math.round(number);

								if (roundedNumber < 1 && TestCode.toString().equals("RBC")) {
									TestValue.append("NIL");

								} else if (roundedNumber < 1 && !TestCode.toString().equals("RBC")) {
									TestValue.append("0-1");
								} else {
									int a = (int) (roundedNumber - 1);
									String finalValue = a + "-" + String.valueOf(roundedNumber);
									TestValue.append(finalValue);
								}
							}
						}

						else if (TestCode.toString().equals("C-CLOUD"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							TestValue = new StringBuffer();

							if (strtestVal.equals("-")) {

								TestValue.append("Clear");
							}

							else {

								TestValue.append("Turbid");
							}
						}

						else if (TestCode.toString().equals("C-GLU"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							}

							else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-PRO"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-KET"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append(strtestVal);
							}
						}

						else if (TestCode.toString().equals("C-BLD"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							TestValue = new StringBuffer();

							if (strtestVal.equals("+-")) {

								TestValue.append("Trace");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append(strtestVal);

							}
						}

						else if (TestCode.toString().equals("CAST"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 2) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}
						}

						else if (TestCode.toString().equals("YLC"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 5) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}
						}

						else if (TestCode.toString().equals("X'TAL"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 2) {

								TestValue.append("NIL");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}
						} else if (TestCode.toString().equals("BACT"))

						{

							String strtestVal = TestValue.toString().replaceAll("\\^", "");
							double number = Double.parseDouble(strtestVal);
							TestValue = new StringBuffer();

							if (number < 300) {

								TestValue.append("NIL");
							} else if (strtestVal.equals("-")) {

								TestValue.append("NIL");
							}

							else {

								TestValue.append("PRESENT");
							}

						}

						else {
							String strtestVal = TestValue.toString().replaceAll("\\^", "");

							if (strtestVal.equals("-")) {
								TestValue = new StringBuffer();
								TestValue.append("NIL");
							}

							else

							{
								TestValue = new StringBuffer();
								TestValue.append(strtestVal);

							}
						}

						System.out.println("TestCode : " + TestCode);
						System.out.println("TestValue : " + TestValue);

					}

					catch (Exception e) {
						e.printStackTrace();
					}
				}

				line = "";

				// System.out.println("r value=" + r);
				if (!TestCode.toString().trim().equals("") && r > 1 && !sampleName.toString().trim().equals("")) {

					// System.out.println("r value=" + r);
					// RBL Comment if(ResultPacket==1)
					{
						System.out.println("Sysmex Urine Analyser RBL");
						abc.insert_SysmexXN350A(TestCode.toString().trim(),
								TestValue.toString().replace("^", "").trim(),
								sampleName.toString().replace("^", "").trim());
						System.out.println("Only First Result Value Insert if ResultPacket" + ResultPacket);

					}
				}
			}
		}


	}

	///------------------

	public static void parse_AIIMSRB(List<String> list) // //18/10/2022
	{
		int ResultPacket=0;
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestCode1 = null;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABC abc = new ABC();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if(line.contains("O|")){
					//	if (Character.toUpperCase(line.charAt(2)) == 'O') {
					sampleName.delete(0, sampleName.length());
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket=0;	
					char[] ch = line.toCharArray();
					int count = 0;
					int countCR = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;
						if (count == 3 && (ch[i] == '^')) {
							countCR++;

							if (countCR == 2)
								i++;

						}

						if (count == 2) {
							if (!(ch[i] == '|'))
								sampleName.append(ch[i]);
						}
						if (count == 3)
							break;
					}

					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));

				}
				if(line.contains("R|")){
					//		if (Character.toUpperCase(line.charAt(2)) == 'R') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));
					ResultPacket++;
					char[] ch = line.toCharArray();
					int count = 0;
					int countAs = 0;
					int count_cr = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;



						if (count == 2 && (ch[i] == '^')) {
							countAs++;
						}
						if (count == 3 && (ch[i] == '^')) {
							count_cr++;
						}
						if (countAs == 3) {

							if (!(ch[i] == '^'))
								TestCode.append(ch[i]);
						}

						if (count == 3) {
							//if (!(ch[i] == '^'))
							if (!(ch[i] == '|')) // for Alinity
								TestValue.append(ch[i]);
						}


						if (count_cr == 1) 
							break;

					}
					System.out.println("TestCode :- " + TestCode);
					System.out.println("TestValue :- " + TestValue);

				}


				//System.out.println("r value=" + r);
				if (!TestCode.toString().trim().equals("") && r > 1 && !sampleName.toString().trim().equals("")) {


					//System.out.println("r value=" + r);
					//					if(ResultPacket==1)
					//					{
					ABCbkp ab =  new ABCbkp();
					ab.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().replace("|", "").trim(),
							sampleName.toString().replace("^", "").trim());
					System.out.println("Only First Result Value Insert if ResultPacket" +ResultPacket);

					//	}
				}
			}
		}

	}

	//ayamX 3500 OLD

	public static void SysmexXN350A(List<String> list) // SysmexXN350
	{
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestCode1 = null;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();

			//System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(2)) == 'O' || Character.toUpperCase(line.charAt(0)) == 'O') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					int countCR = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;
						if (count == 3 && (ch[i] == '^')) {
							countCR++;

							if (countCR == 2)
								i++;

						}

						if (countCR == 2) {
							if (!(ch[i] == '^'))
								sampleName.append(ch[i]);
						}
						if (countCR == 3)
							break;
					}

					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));

				}

				if (Character.toUpperCase(line.charAt(2)) == 'R' || Character.toUpperCase(line.charAt(0)) == 'R') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					int countAs = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 2) {
							if (!(ch[i] == '|'))
								TestCode.append(ch[i]);
						}

						if (count == 2 && (ch[i] == '^')) {
							countAs++;
						}

						if (countAs == 3) {

							if (!(ch[i] == '^'))
								TestCode1.append(ch[i]);
						}

						if (count == 3) {
							if (!(ch[i] == '|'))
								TestValue.append(ch[i]);
						}

						if (count == 4) {
							if (!(ch[i] == '|'))
								TestValue1.append(ch[i]);
						}

					}

				}

				StringBuffer Tv = new StringBuffer();
				String Tc = (TestCode1.toString().replace("^", "")).trim();
				System.out.println("TestCode :- " + Tc);
				System.out.println("TestCode1 :- " + TestCode1);
				System.out.println("TestValue :- " + TestValue);
				System.out.println("TestValue1 :- " + TestValue1);
				if (!Tc.trim().equals("") && r > 1) {

					if (TestValue.toString().contains("-")) {

						String Tv_db = (TestValue.toString().replace("-", " "));
						TestValue = TestValue.delete(0, TestValue.length());

						TestValue.append(Tv_db);
						System.out.println("Updated TestValue :- " + TestValue);
					}

					// String.format("%.2f", input)
					// -------------------------------
					if (Tc.equals("WBC")) {

						double Tv_db = Double.parseDouble(TestValue.toString());
						TestValue = TestValue.delete(0, TestValue.length());
						Tv_db = Tv_db * 1000;
						// Tv.append(df.format(String.valueOf(Tv_db)));
						Tv.append(String.format("%.2f", Tv_db));
						System.out.println("Updated TestValue :- " + Tv);
						TestValue.append((Tv.toString()).substring(0, Tv.length() - 3));

						System.out.println("Updated TestValue :- " + TestValue);
					}
					if (Tc.equals("PLT")) {
						double Tv_db = Double.parseDouble(TestValue.toString());
						TestValue = TestValue.delete(0, TestValue.length());
						Tv_db = Tv_db / 100;
						// Tv.append(df.format(String.valueOf(Tv_db)));
						Tv.append(String.format("%.2f", Tv_db));
						TestValue.append(Tv.toString());
						;
						System.out.println("Updated TestValue :- " + TestValue);

					}

					System.out.println("r value=" + r);
					System.out.println("TestCode" + Tc);
					aBCbkp.insert_SysmexXN350A(Tc, TestValue.toString().replace("^", "").trim(),
							sampleName.toString().replace("^", "").trim());
				}
			}
		}

	}


	// -------------------------------------------------------------------------
	// Parsing
	public static void SysmexXN350(List<String> list) // SysmexXN350
	{
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestCode1 = null;
		StringBuffer TestValue;
		StringBuffer TestValue1;
		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestValue = new StringBuffer();
			TestValue1 = new StringBuffer();

			//System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(2)) == 'O') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					int countCR = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;
						if (count == 3 && (ch[i] == '^')) {
							countCR++;

							if (countCR == 2)
								i++;

						}

						if (countCR == 2) {
							if (!(ch[i] == '^'))
								sampleName.append(ch[i]);
						}
						if (countCR == 3)
							break;
					}

					System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));

				}

				if (Character.toUpperCase(line.charAt(2)) == 'R') {
					System.out.println(
							" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

					char[] ch = line.toCharArray();
					int count = 0;
					int countAs = 0;
					for (int i = 0; i < ch.length; i++) {

						if (ch[i] == '|')
							count++;

						if (count == 2) {
							if (!(ch[i] == '|'))
								TestCode.append(ch[i]);
						}

						if (count == 2 && (ch[i] == '^')) {
							countAs++;
						}

						if (countAs == 3) {

							if (!(ch[i] == '^'))
								TestCode1.append(ch[i]);
						}

						if (count == 3) {
							if (!(ch[i] == '|'))
								TestValue.append(ch[i]);
						}

						if (count == 4) {
							if (!(ch[i] == '|'))
								TestValue1.append(ch[i]);
						}

					}

				}

				StringBuffer Tv = new StringBuffer();
				String Tc = (TestCode1.toString().replace("^", "")).trim();
				System.out.println("TestCode :- " + Tc);
				System.out.println("TestCode1 :- " + TestCode1);
				System.out.println("TestValue :- " + TestValue);
				System.out.println("TestValue1 :- " + TestValue1);
				if (!Tc.trim().equals("") && r > 1) {

					if (TestValue.toString().contains("-")) {

						String Tv_db = (TestValue.toString().replace("-", " "));
						TestValue = TestValue.delete(0, TestValue.length());

						TestValue.append(Tv_db);
						System.out.println("Updated TestValue :- " + TestValue);
					}

					// String.format("%.2f", input)
					// -------------------------------
					if (Tc.equals("WBC")) {

						double Tv_db = Double.parseDouble(TestValue.toString());
						TestValue = TestValue.delete(0, TestValue.length());
						Tv_db = Tv_db * 1000;
						// Tv.append(df.format(String.valueOf(Tv_db)));
						Tv.append(String.format("%.2f", Tv_db));
						System.out.println("Updated TestValue :- " + Tv);
						TestValue.append((Tv.toString()).substring(0, Tv.length() - 3));

						System.out.println("Updated TestValue :- " + TestValue);
					}
					if (Tc.equals("PLT")) {
						double Tv_db = Double.parseDouble(TestValue.toString());
						TestValue = TestValue.delete(0, TestValue.length());
						Tv_db = Tv_db / 100;
						// Tv.append(df.format(String.valueOf(Tv_db)));
						Tv.append(String.format("%.2f", Tv_db));
						TestValue.append(Tv.toString());
						;
						System.out.println("Updated TestValue :- " + TestValue);

					}

					System.out.println("r value=" + r);
					System.out.println("TestCode" + Tc);
					aBCbkp.insert_SysmexXN350(mp,
							sampleName.toString().replace("^", "").trim());
				}
			}
		}

	}
/// Sysmax Result for AIIMS Bhubneswar,...
	
	
	
	private static void Sysmax1000(String redDataText, PrintStream cout2) {
		// TODO Auto-generated method stub
		char cr = 13;
		char lf = 10;
		
		Map<String, List> mp = new HashMap();
		
		  String[] items = {
		            "WBC", "RBC", "HGB", "HCT", "MCV", "MCH", "MCHC", "PLT", 
		            "NEUT%", "LYMPH%", "MONO%", "EO%", "BASO%", "NEUT#", "LYMPH#", 
		            "MONO#", "EO#", "BASO#", "IG%", "IG#", "NRBC%", "NRBC#", 
		            "RDW-SD", "RDW-CV", "MICROR", "MACROR"
		        };

		List testCode = new ArrayList<String>();

		List testValue = new ArrayList<String>();
		String sampleNumber= "";
	//	saveToFile("Data Received :: "+redDataText,FILE_NAME);

		String[] dataPart =redDataText.split(Character.toString(cr));


		for(String str :dataPart) {

			str=str.replace("\n", "");


			String[] msgSplit=str.split("\\|");

			System.out.println("");
			if(msgSplit[0].equals("O")) {

				String[] samData = msgSplit[3].split("\\^"); 

				sampleNumber= samData[2];
				sampleNumber=  sampleNumber.replaceAll("\\s", "");
			}
			else if(msgSplit[0].equals("R")) {

				String[] testCodeSegment	 =msgSplit[2].split("\\^");
				
				if (testCodeSegment[4].equals("WBC") || 
					    testCodeSegment[4].equals("RBC") || 
					    testCodeSegment[4].equals("HGB") || 
					    testCodeSegment[4].equals("HCT") || 
					    testCodeSegment[4].equals("MCV") || 
					    testCodeSegment[4].equals("MCH") || 
					    testCodeSegment[4].equals("MCHC") || 
					    testCodeSegment[4].equals("PLT") || 
					    testCodeSegment[4].equals("NEUT%") || 
					    testCodeSegment[4].equals("LYMPH%") || 
					    testCodeSegment[4].equals("MONO%") || 
					    testCodeSegment[4].equals("EO%") || 
					    testCodeSegment[4].equals("BASO%") || 
					    testCodeSegment[4].equals("NEUT#") || 
					    testCodeSegment[4].equals("LYMPH#") || 
					    testCodeSegment[4].equals("MONO#") || 
					    testCodeSegment[4].equals("EO#") || 
					    testCodeSegment[4].equals("BASO#") || 
					    testCodeSegment[4].equals("IG%") || 
					    testCodeSegment[4].equals("IG#") || 
					    testCodeSegment[4].equals("NRBC%") || 
					    testCodeSegment[4].equals("NRBC#") || 
					    testCodeSegment[4].equals("RDW-SD") || 
					    testCodeSegment[4].equals("RDW-CV") || 
					    testCodeSegment[4].equals("MICROR") || 
					    testCodeSegment[4].equals("MACROR")) {

					testCode.add(testCodeSegment[4]);
					 testValue.add(msgSplit[3]);
					    // Execute the code if any of the conditions are true
					}
				
			}

		

		}
		mp.put("TestCode", testCode);
		mp.put("TestValue", testValue);
		

		System.out.println(sampleNumber);
		System.out.println(testCode);
		System.out.println(testValue);
		
		ABC.insert_SysmexXN350Bubneswar(mp,sampleNumber.toString().trim());
	}
	
	
	//

	
	
	
	
	
	//ABG Jodhpur
	
		public static void ABG_AIIMSJP(List<String> list) {
	
		
		
		

			System.out.println("Parsing Start ABG Result Packet ....");
		//System.out.println(list);
		String sampleNo=null;
		List testCode = new ArrayList<String>();
		List testValue = new ArrayList<String>();
		Map<String ,List> mp = new HashMap<String ,List>();
		for(String strdata:list) {
			String[] packetData=strdata.split("\\|");
			
			if(packetData[0].contains("P")) {
				
			}
			else if(packetData[0].contains("O")) {
				String[] sampleNodata=packetData[2].split("\\^");
				sampleNo=packetData[3];
			}
			else if(packetData[0].contains("R")) {
				
			//	System.out.println( packetData[2]);
				String[] str=packetData[2].split("\\^");
				
				testCode.add(str[3]);
				testValue.add(packetData[3]);
				  
				ABC.insert_SysmexXN350A(str[3].trim(), packetData[3].toString().trim(), sampleNo.toString().replace("^", "").trim());
				
				
			}
			
		}
		
		
		}
		
	
	
	//
	
	
	//sysmax CA-2500


	public static void SysmexXN2500(List<String> list) // SysmexXN350
	{  System.out.println("inside 20017");
	Map<String, List> mp = new HashMap();
	List lis = new ArrayList();
	List lis1 = new ArrayList();
	String ip = "";
	StringBuffer sampleName = new StringBuffer();
	StringBuffer TestCode = null;
	StringBuffer TestCode1 = null;
	StringBuffer TestValue;
	StringBuffer TestValue1;
	System.out.println("size:-- " + list.size());
	String stcode;
	String sTvalue;
	ABCbkp aBCbkp = new ABCbkp();

	int r = 0;
	for (String line : list) {
		r++;
		if (line.length() == 0 || line == null)
			break;
		TestCode = new StringBuffer();
		TestCode1 = new StringBuffer();
		TestValue = new StringBuffer();
		TestValue1 = new StringBuffer();

		//System.out.println("line.length() " + line.length());
		if (line.length() > 2) {
			if (Character.toUpperCase(line.charAt(2)) == 'O') {
				System.out.println(
						" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

				char[] ch = line.toCharArray();
				int count = 0;
				int countCR = 0;
				for (int i = 0; i < ch.length; i++) {

					if (ch[i] == '|')
						count++;
					if (count == 3 && (ch[i] == '^')) {
						countCR++;

						if (countCR == 2)
							i++;

					}

					if (countCR == 2) {
						if (!(ch[i] == '^'))
							sampleName.append(ch[i]);
					}
					if (countCR == 3)
						break;
				}

				System.out.println("SampleID:- " + sampleName.toString().replace("^", ""));

			}

			if (Character.toUpperCase(line.charAt(2)) == 'R') {
				System.out.println(
						" Character.toUpperCase(line.charAt(2))========" + Character.toUpperCase(line.charAt(2)));

				char[] ch = line.toCharArray();
				int count = 0;
				int countAs = 0;
				for (int i = 0; i < ch.length; i++) {

					if (ch[i] == '|')
						count++;

					if (count == 2) {
						if (!(ch[i] == '|'))
							TestCode.append(ch[i]);
					}

					if (count == 2 && (ch[i] == '^')) {
						countAs++;
					}

					if (countAs == 3) {

						if (!(ch[i] == '^'))
							TestCode1.append(ch[i]);
					}

					if (count == 3) {
						if (!(ch[i] == '|'))
							TestValue.append(ch[i]);
					}

					if (count == 4) {
						if (!(ch[i] == '|'))
							TestValue1.append(ch[i]);
					}

				}

			}

			StringBuffer Tv = new StringBuffer();
			String Tc = (TestCode1.toString().replace("^", "")).trim();
			System.out.println("TestCode :- " + Tc);
			System.out.println("TestCode1 :- " + TestCode1);
			System.out.println("TestValue :- " + TestValue);
			System.out.println("TestValue1 :- " + TestValue1);
			if (!Tc.trim().equals("") && r > 1) {

				if (TestValue.toString().contains("-")) {

					String Tv_db = (TestValue.toString().replace("-", " "));
					TestValue = TestValue.delete(0, TestValue.length());

					TestValue.append(Tv_db);
					System.out.println("Updated TestValue :- " + TestValue);
				}

				// String.format("%.2f", input)
				// -------------------------------
				if (Tc.equals("WBC")) {

					double Tv_db = Double.parseDouble(TestValue.toString());
					TestValue = TestValue.delete(0, TestValue.length());
					Tv_db = Tv_db * 1000;
					// Tv.append(df.format(String.valueOf(Tv_db)));
					Tv.append(String.format("%.2f", Tv_db));
					System.out.println("Updated TestValue :- " + Tv);
					TestValue.append((Tv.toString()).substring(0, Tv.length() - 3));

					System.out.println("Updated TestValue :- " + TestValue);
				}
				if (Tc.equals("PLT")) {
					double Tv_db = Double.parseDouble(TestValue.toString());
					TestValue = TestValue.delete(0, TestValue.length());
					Tv_db = Tv_db / 100;
					// Tv.append(df.format(String.valueOf(Tv_db)));
					Tv.append(String.format("%.2f", Tv_db));
					TestValue.append(Tv.toString());
					;
					System.out.println("Updated TestValue :- " + TestValue);

				}

				System.out.println("r value=" + r);
				System.out.println("TestCode" + Tc);
				aBCbkp.insert_SysmexXN350A(Tc, TestValue.toString().replace("^", "").trim(),
						sampleName.toString().replace("^", "").trim());
			}
		}
	}

	}


	public static void SysmexXN2500get(List<String> list) // SysmexXN350
	{


	}

	//end
	// -------------------------------------------------------
	// simens_atalika
	//	public static void parse_simens_atalika(List<String> list) {
	//		Map<String, List> mp = new HashMap();
	//		List lis = new ArrayList();
	//		List lis1 = new ArrayList();
	//		String ip = "";
	//		StringBuffer sampleName = new StringBuffer();
	//		StringBuffer TestCode;
	//		StringBuffer TestValue;
	//
	//		System.out.println("size:-- " + list.size());
	//		String stcode;
	//		String sTvalue;
	//		ABC abc = new ABC();
	//
	//		int r = 0;
	//		for (String line : list) {
	//			r++;
	//			if (line.length() == 0 || line == null)
	//				break;
	//			TestCode = new StringBuffer();
	//			TestValue = new StringBuffer();
	//
	//			//System.out.println("line.length() " + line.length());
	//			if (line.length() > 2) {
	//				if (Character.toUpperCase(line.charAt(0)) == 'O') {
	//					sampleName.delete(0, sampleName.length());
	//					char[] ch = line.toCharArray();
	//					int count = 0;
	//					int count_tn = 0;
	//					for (int i = 0; i < ch.length; i++) {
	//
	//						// if(ch[i]==94) // Ascii value for '^'
	//						// break;
	//
	//						if (ch[i] == '|')
	//							count++;
	//
	//						if (count == 2) {
	//							if (!(ch[i] == '|'))
	//								sampleName.append(ch[i]);
	//						}
	//
	//						if (count == 3) {
	//							break;
	//						}
	//					}
	//
	//					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'
	//
	//				}
	//
	//				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }
	//
	//				if (Character.toUpperCase(line.charAt(0)) == 'R') {
	//					r++;
	//					int ct = 0;
	//					char[] ch = line.toCharArray();
	//					int count_pipe = 0;
	//					int count_carr = 0;
	//					for (int i = 0; i < ch.length; i++) {
	//
	//						if (ch[i] == '|')
	//							count_pipe++;
	//
	//						if (count_pipe == 2 && ch[i] == '^') {
	//							count_carr++;
	//							if (count_carr == 3)
	//								i++;
	//
	//						}
	//
	//						if (count_carr == 3 && !(ch[i] == '^')) {
	//
	//							TestCode.append(ch[i]);
	//						}
	//
	//						if (count_carr == 4)
	//							break;
	//
	//					}
	//
	//					System.out.println("Testcode==================:- " + TestCode.toString());
	//
	//					// ----------------------------------------------
	//
	//					int count1 = 0;
	//					for (int i = 0; i < ch.length; i++) {
	//
	//						if (ch[i] == '|') {
	//							count1++;
	//							if (count1 == 3)
	//								i++;
	//						}
	//						if (count1 == 4)
	//							break;
	//
	//						if (count1 == 3)
	//							TestValue.append(ch[i]);
	//
	//					}
	//					System.out.println("Testvalue==============:- " + TestValue);
	//
	//				}
	//
	//				if (!TestCode.toString().trim().equals("") && r > 1) {
	//
	//					//abc.insert_SysmexXN350((TestCode.toString().replace("^", "")).trim(),
	//							TestValue.toString().replaceAll("[^0-9.]", "").trim(),
	//							sampleName.toString().replace("^", " ").replace("^", " ").trim());
	//
	//				}
	//			}
	//
	//		}
	//
	//		// MachineData msh = new MachineData();
	//		// msh.save(mp,sampleName.toString(),ip);
	//
	//	}

	// -------------------------------------------



	// ---------------------------------------------------------------------


	//Data Packet for BA 400 AIIMS manglagiri

	/*
	 * 1H|\^&|37d60e23-9781-41c6-9fbd-a3628c65ceb6||BA400|||||Host||P|LIS2A|
	 * 20231014123802 P|1
	 * O|1|1014b0272||^^^ALBUMIN|R||||||||||SER|||||||20231014180802|||F
	 * R|1|^^^ALBUMIN|3.05594778|g/dL||||F||ADMIN||20231014180802|A400^834002305
	 * L|1|N B9
	 */


	// end data packet
	public static void mindray_MispaClinia(List<String> list) {   //BA 400 AIIMS manglagiris format id 20045
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		String sampleName = null;//new StringBuffer();
		StringBuffer TestCode;
		StringBuffer TestValue;
		StringBuffer TestCode1;
		StringBuffer TestCode2;
		StringBuffer TestCode3;
		StringBuffer TestCode4;
		StringBuffer TestCode5;

		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestCode2 = new StringBuffer();
			TestCode3 = new StringBuffer();// only MTBRIF
			TestCode4 = new StringBuffer();// only SARScov2
			TestCode5 = new StringBuffer();// only SARScov2

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(0)) == 'O') {
					//					char[] ch = line.toCharArray();
					//					int count = 0;
					//					int count_tn = 0;
					//					int count_or_cr= 0;
					//					for (int i = 0; i < ch.length; i++) {
					//
					//						// if(ch[i]==94) // Ascii value for '^'
					//						// break;
					//
					//						if (ch[i] == '|') {
					//							count++;
					//							if (count == 2)


					//								i++;
					//						}
					//						if (count == 2 && ch[i] == '^')
					//							count_or_cr++;
					//
					//						if (count == 2 ) {
					//							if (!(ch[i] == '^'))
					//								sampleName.append(ch[i]);
					//						}
					//
					//						if (count_or_cr == 1) {
					//							break;
					//						}
					//					}

					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						sampleName = parts[2];
						//TestCode.append(valueAfterSecondPipe);
						System.out.println("Value after the second pipe: " + sampleName.toString().replaceAll("\\^", ""));
					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}

				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }

				//				if (Character.toUpperCase(line.charAt(0)) == 'R') {
				//					r++;
				//					int ct = 0;
				//					char[] ch = line.toCharArray();
				//					int count_pipe = 0;
				//					int count_carr = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|')
				//							count_pipe++;
				//
				//						if (count_pipe == 2 && ch[i] == '^') {
				//							count_carr++;
				//							if (count_carr == 1)
				//								i++;
				//
				//						}
				//
				//						if (count_carr == 1 && !(ch[i] == '^')) {
				//
				//							TestCode.append(ch[i]);
				//						}
				//
				//						if (count_pipe == 3) {
				//							break;
				//						}
				//
				//					}
				//
				//					System.out.println("Testcode for common component==================:- " + TestCode.toString());
				//					// ----------------------------------------------
				//
				//					int count = 0;
				//					int count1 = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|') {
				//							count1++;
				//							if (count1 == 3)
				//								i++;
				//						}
				//						if (ch[i] == '|' && count == 4)
				//							break;
				//						if (count1 == 3 && !(ch[i] == '^')) {
				//
				//							TestValue.append(ch[i]);
				//							String str2 = TestValue.toString().replace("^", "");
				//							// to get a StringBuffer result:
				//							TestValue.delete(0, TestValue.length());
				//							TestValue.append(str2);
				//
				//						}
				//					}
				//					System.out.println("Testvalue==============:- " + TestValue);
				//
				//					// lis1.add(TestValue.toString());
				//				}



				String valueAfterSecondPipe=null;
				String valueAfterThirdPipe=null;

				if (Character.toUpperCase(line.charAt(0)) == 'R') {


					System.out.println("ROHIT ");


					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterSecondPipe = parts[2];
						valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^", "");
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {
							TestCode.append(valueAfterSecondPipe);
							System.out.println("Value after the second pipe: " + valueAfterSecondPipe.replaceAll("\\^", ""));
						}

					}
					//System.out.println(parts[2]);

					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {

							double number = Double.parseDouble(valueAfterThirdPipe); //commented for TamilNadu ERBA pls uncomment for BA400 Manglagiri
							double truncatedNumber = (int) (number * 10) / 10.0;
							System.out.println("truncatedNumber"+truncatedNumber);
							String result = String.format("%.1f", truncatedNumber);

							TestValue.append(valueAfterThirdPipe);
							System.out.println("Value after the third pipe: " + valueAfterThirdPipe.replaceAll("\\^", ""));
						}
					}

				}


				if (!TestCode.toString().trim().equals("") ) {

					aBCbkp.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().trim(),
							sampleName.toString().trim());

				}
			}

		}

		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}



	
	public static void AIIMSJDATLICA(List<String> list) {   
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		String sampleName = null;//new StringBuffer();
		StringBuffer TestCode;
		StringBuffer TestValue;
		StringBuffer TestCode1;
		StringBuffer TestCode2;
		StringBuffer TestCode3;
		StringBuffer TestCode4;
		StringBuffer TestCode5;

		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestCode2 = new StringBuffer();
			TestCode3 = new StringBuffer();// only MTBRIF
			TestCode4 = new StringBuffer();// only SARScov2
			TestCode5 = new StringBuffer();// only SARScov2

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(0)) == 'O') {
					//					char[] ch = line.toCharArray();
					//					int count = 0;
					//					int count_tn = 0;
					//					int count_or_cr= 0;
					//					for (int i = 0; i < ch.length; i++) {
					//
					//						// if(ch[i]==94) // Ascii value for '^'
					//						// break;
					//
					//						if (ch[i] == '|') {
					//							count++;
					//							if (count == 2)


					//								i++;
					//						}
					//						if (count == 2 && ch[i] == '^')
					//							count_or_cr++;
					//
					//						if (count == 2 ) {
					//							if (!(ch[i] == '^'))
					//								sampleName.append(ch[i]);
					//						}
					//
					//						if (count_or_cr == 1) {
					//							break;
					//						}
					//					}

					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						sampleName = parts[2].split("\\^")[0];
						//TestCode.append(valueAfterSecondPipe);
						System.out.println("Value after the second pipe: " + sampleName.toString().replaceAll("\\^", ""));
					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}

				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }

				//				if (Character.toUpperCase(line.charAt(0)) == 'R') {
				//					r++;
				//					int ct = 0;
				//					char[] ch = line.toCharArray();
				//					int count_pipe = 0;
				//					int count_carr = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|')
				//							count_pipe++;
				//
				//						if (count_pipe == 2 && ch[i] == '^') {
				//							count_carr++;
				//							if (count_carr == 1)
				//								i++;
				//
				//						}
				//
				//						if (count_carr == 1 && !(ch[i] == '^')) {
				//
				//							TestCode.append(ch[i]);
				//						}
				//
				//						if (count_pipe == 3) {
				//							break;
				//						}
				//
				//					}
				//
				//					System.out.println("Testcode for common component==================:- " + TestCode.toString());
				//					// ----------------------------------------------
				//
				//					int count = 0;
				//					int count1 = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|') {
				//							count1++;
				//							if (count1 == 3)
				//								i++;
				//						}
				//						if (ch[i] == '|' && count == 4)
				//							break;
				//						if (count1 == 3 && !(ch[i] == '^')) {
				//
				//							TestValue.append(ch[i]);
				//							String str2 = TestValue.toString().replace("^", "");
				//							// to get a StringBuffer result:
				//							TestValue.delete(0, TestValue.length());
				//							TestValue.append(str2);
				//
				//						}
				//					}
				//					System.out.println("Testvalue==============:- " + TestValue);
				//
				//					// lis1.add(TestValue.toString());
				//				}



				String valueAfterSecondPipe=null;
				String valueAfterThirdPipe=null;

				if (Character.toUpperCase(line.charAt(0)) == 'R' && line.contains("DOSE")) {


					System.out.println("ROHIT ");


					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterSecondPipe = parts[2].split("\\^")[3];
						valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^", "");
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {
							TestCode.append(valueAfterSecondPipe);
							System.out.println("Value after the second pipe: " + valueAfterSecondPipe.replaceAll("\\^", ""));
						}

					}
					//System.out.println(parts[2]);

					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {

							//  double number = Double.parseDouble(valueAfterThirdPipe); commented for TamilNadu ERBA pls uncomment for BA400 Manglagiri
							//double truncatedNumber = (int) (number * 10) / 10.0;
							// System.out.println("truncatedNumber"+truncatedNumber);
							//  String result = String.format("%.1f", truncatedNumber);

							TestValue.append(valueAfterThirdPipe);
							System.out.println("Value after the third pipe: " + valueAfterThirdPipe.replaceAll("\\^", ""));
						}
					}

				}


				if (!TestCode.toString().trim().equals("") ) {

					aBCbkp.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().trim(),
							sampleName.toString().trim());

				}
			}

		}

		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}
	

	public static void ERBAXN100TN(List<String> list) {   
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		String sampleName = null;//new StringBuffer();
		StringBuffer TestCode;
		StringBuffer TestValue;
		StringBuffer TestCode1;
		StringBuffer TestCode2;
		StringBuffer TestCode3;
		StringBuffer TestCode4;
		StringBuffer TestCode5;

		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestCode2 = new StringBuffer();
			TestCode3 = new StringBuffer();// only MTBRIF
			TestCode4 = new StringBuffer();// only SARScov2
			TestCode5 = new StringBuffer();// only SARScov2

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(0)) == 'O') {
					//					char[] ch = line.toCharArray();
					//					int count = 0;
					//					int count_tn = 0;
					//					int count_or_cr= 0;
					//					for (int i = 0; i < ch.length; i++) {
					//
					//						// if(ch[i]==94) // Ascii value for '^'
					//						// break;
					//
					//						if (ch[i] == '|') {
					//							count++;
					//							if (count == 2)


					//								i++;
					//						}
					//						if (count == 2 && ch[i] == '^')
					//							count_or_cr++;
					//
					//						if (count == 2 ) {
					//							if (!(ch[i] == '^'))
					//								sampleName.append(ch[i]);
					//						}
					//
					//						if (count_or_cr == 1) {
					//							break;
					//						}
					//					}

					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						sampleName = parts[2];
						//TestCode.append(valueAfterSecondPipe);
						System.out.println("Value after the second pipe: " + sampleName.toString().replaceAll("\\^", ""));
					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}

				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }

				//				if (Character.toUpperCase(line.charAt(0)) == 'R') {
				//					r++;
				//					int ct = 0;
				//					char[] ch = line.toCharArray();
				//					int count_pipe = 0;
				//					int count_carr = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|')
				//							count_pipe++;
				//
				//						if (count_pipe == 2 && ch[i] == '^') {
				//							count_carr++;
				//							if (count_carr == 1)
				//								i++;
				//
				//						}
				//
				//						if (count_carr == 1 && !(ch[i] == '^')) {
				//
				//							TestCode.append(ch[i]);
				//						}
				//
				//						if (count_pipe == 3) {
				//							break;
				//						}
				//
				//					}
				//
				//					System.out.println("Testcode for common component==================:- " + TestCode.toString());
				//					// ----------------------------------------------
				//
				//					int count = 0;
				//					int count1 = 0;
				//					for (int i = 0; i < ch.length; i++) {
				//
				//						if (ch[i] == '|') {
				//							count1++;
				//							if (count1 == 3)
				//								i++;
				//						}
				//						if (ch[i] == '|' && count == 4)
				//							break;
				//						if (count1 == 3 && !(ch[i] == '^')) {
				//
				//							TestValue.append(ch[i]);
				//							String str2 = TestValue.toString().replace("^", "");
				//							// to get a StringBuffer result:
				//							TestValue.delete(0, TestValue.length());
				//							TestValue.append(str2);
				//
				//						}
				//					}
				//					System.out.println("Testvalue==============:- " + TestValue);
				//
				//					// lis1.add(TestValue.toString());
				//				}



				String valueAfterSecondPipe=null;
				String valueAfterThirdPipe=null;

				if (Character.toUpperCase(line.charAt(0)) == 'R') {


					System.out.println("ROHIT ");


					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterSecondPipe = parts[2];
						valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^", "");
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {
							TestCode.append(valueAfterSecondPipe);
							System.out.println("Value after the second pipe: " + valueAfterSecondPipe.replaceAll("\\^", ""));
						}

					}
					//System.out.println(parts[2]);

					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						if(!valueAfterThirdPipe.equals("NA")) {

							//  double number = Double.parseDouble(valueAfterThirdPipe); commented for TamilNadu ERBA pls uncomment for BA400 Manglagiri
							//double truncatedNumber = (int) (number * 10) / 10.0;
							// System.out.println("truncatedNumber"+truncatedNumber);
							//  String result = String.format("%.1f", truncatedNumber);

							TestValue.append(valueAfterThirdPipe);
							System.out.println("Value after the third pipe: " + valueAfterThirdPipe.replaceAll("\\^", ""));
						}
					}

				}


				if (!TestCode.toString().trim().equals("") ) {

					aBCbkp.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().trim(),
							sampleName.toString().trim());

				}
			}

		}

		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}




//Cogulation Sysmax 2400
	
	
	
	
	public static void sysmaxCS2400(List<String> list) {    // AIIMS Jammu Co=gulation Format ID 100018
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		
		List testCode = new ArrayList<>();
		List testvalue =new ArrayList<>();
	
		//String sampleName = null;//new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestValue = null;
		StringBuffer TestCode1;
		StringBuffer TestCode2;
		StringBuffer TestCode3;
		StringBuffer TestCode4;
		StringBuffer TestCode5;

		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestCode2 = new StringBuffer();
			TestCode3 = new StringBuffer();// only MTBRIF
			TestCode4 = new StringBuffer();// only SARScov2
			TestCode5 = new StringBuffer();// only SARScov2

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(2)) == 'O') {
					//					char[] ch = line.toCharArray();
					//					int count = 0;
					//					int count_tn = 0;
					//					int count_or_cr= 0;
					//					for (int i = 0; i < ch.length; i++) {
					//
					//						// if(ch[i]==94) // Ascii value for '^'
					//						// break;
					//
					//						if (ch[i] == '|') {
					//							count++;
					//							if (count == 2)


					//								i++;
					//						}
					//						if (count == 2 && ch[i] == '^')
					//							count_or_cr++;
					//
					//						if (count == 2 ) {
					//							if (!(ch[i] == '^'))
					//								sampleName.append(ch[i]);
					//						}
					//
					//						if (count_or_cr == 1) {
					//							break;
					//						}
					//					}

					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						sampleName = parts[3];
						sampleName=sampleName.replaceAll(" ", "");
						String ab[]=sampleName.split("\\^");
						sampleName=ab[2];
						//TestCode.append(valueAfterSecondPipe);
						System.out.println("Value after the second pipe: " + sampleName.toString().replaceAll("\\^", ""));
					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}

				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }



				String valueAfterSecondPipe=null;
				String valueAfterThirdPipe=null;

				if (Character.toUpperCase(line.charAt(2)) == 'R') {



					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterSecondPipe = parts[2];
						// valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^1", "");
						String [] abc= valueAfterSecondPipe.split("\\^");
						valueAfterSecondPipe=abc[3];

						//if(valueAfterSecondPipe.equals("BASO%") || valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {
						//if(valueAfterSecondPipe.equals("PCV") || valueAfterSecondPipe.equals("IG%") || valueAfterSecondPipe.equals("IG#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("EO#") || valueAfterSecondPipe.equals("LYMPH#")  || valueAfterSecondPipe.equals("MONO#")  || valueAfterSecondPipe.equals("NEUT#")  || valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {	
							TestCode.append(valueAfterSecondPipe);
						//}
						System.out.println("Value after the second pipe: " + valueAfterSecondPipe.replaceAll("\\^", ""));
					}
					//System.out.println(parts[2]);

					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\s", "");
						//				             double number = Double.parseDouble(valueAfterThirdPipe);
						//				             double truncatedNumber = (int) (number * 10) / 10.0;
						//				             System.out.println("truncatedNumber"+truncatedNumber);
						//				             String result = String.format("%.1f", truncatedNumber);

						valueAfterSecondPipe = parts[2];
						// valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^", "");
						//String [] abc= valueAfterSecondPipe.split("\\^");
					//	valueAfterSecondPipe=abc[4];
						//if(valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {


					//	if( valueAfterSecondPipe.equals("PCV") ||valueAfterSecondPipe.equals("IG%") || valueAfterSecondPipe.equals("IG#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("EO#") || valueAfterSecondPipe.equals("LYMPH#")  || valueAfterSecondPipe.equals("MONO#")  || valueAfterSecondPipe.equals("NEUT#")  || valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {	
							TestValue.append(valueAfterThirdPipe);
							//aBCbkp.insert_GenExpert(TestCode.toString().trim(),TestValue.toString().trim(),sampleName.toString().trim());
							
						//}
						System.out.println("Value after the third pipe: " + valueAfterThirdPipe.replaceAll("\\^", ""));
					}
					
					
					
				}


				if (!TestCode.toString().trim().equals("") && !(list.size()==2)) {

					testCode.add(TestCode.toString().trim());
					testvalue.add(TestValue.toString().trim());
					//aBCbkpinsert_SysmexXN350();
					aBCbkp.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().trim(),
							sampleName.toString().trim());
				}
			}
				
		}
		//mp.put("TestCode", testCode);
	//	mp.put("TestValue", testvalue);
		
	//	aBCbkp.insert_SysmexXN350(mp,sampleName.toString().trim());


		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}




	// ---------------------------------------------------------------------------------


	// ---------------------------------------------------------------------

	// ========================================================================================================================


	//data packet for Sysmax 2500 AIIMS BHU
	/*
	 * H|\^&||| XN-10^00-22^50365^^^^AP795756||||||||E1394-97
	 * P|1||||^^|||U|||||^||||||||||||^^^ C|1|| O|1||41^7^
	 * 24033090290^A|^^^^WBC\^^^^RBC\^^^^HGB\^^^^HCT\^^^^MCV\^^^^MCH\^^^^MCHC\^^^^
	 * PLT\^^^^RDW-SD\^^^^RDW-CV\^^^^PDW\^^^^MPV\^^^^P-LCR\^^^^PCT\^^^^NEUT#\^^^^
	 * LYMPH#\^^^^MONO#\^^^^EO#\^^^^BASO#\^^^^NEUT%\^^^^LYMPH%\^^^^MONO%\^^^^EO%\^^^
	 * ^BASO%\^^^^NRBC#\^^^^NRBC%\^^^^IG#\^^^^IG%\^^^^MICROR\^^^^MACROR|||||||N|||||
	 * |||||||||F C|1|| R|1|^^^^WBC^1|12.93|10*3/uL||N||F||||20240330133228
	 * R|2|^^^^RBC^1|3.19|10*6/uL||N||F||||20240330133228
	 * R|3|^^^^HGB^1|9.2|g/dL||N||F||||20240330133228
	 * R|4|^^^^HCT^1|29.7|%||N||F||||20240330133228
	 * R|5|^^^^MCV^1|93.1|fL||N||F||||20240330133228
	 * R|6|^^^^MCH^1|28.8|pg||N||F||||20240330133228
	 * R|7|^^^^MCHC^1|31.0|g/dL||N||F||||20240330133228
	 * R|8|^^^^PLT^1|154|10*3/uL||W||F||||20240330133228
	 * R|9|^^^^NEUT%^1|86.3|%||H||F||||20240330133228
	 * R|10|^^^^LYMPH%^1|11.8|%||L||F||||20240330133228
	 * R|11|^^^^MONO%^1|1.5|%||N||F||||20240330133228
	 * R|12|^^^^EO%^1|0.1|%||N||F||||20240330133228
	 * R|13|^^^^BASO%^1|0.3|%||N||F||||20240330133228
	 * R|14|^^^^NEUT#^1|11.16|10*3/uL||H||F||||20240330133228
	 * R|15|^^^^LYMPH#^1|1.52|10*3/uL||N||F||||20240330133228
	 * R|16|^^^^MONO#^1|0.20|10*3/uL||N||F||||20240330133228
	 * R|17|^^^^EO#^1|0.01|10*3/uL||N||F||||20240330133228
	 * R|18|^^^^BASO#^1|0.04|10*3/uL||N||F||||20240330133228
	 * R|19|^^^^IG%^1|3.9|%||N||F||||20240330133228
	 * R|20|^^^^IG#^1|0.50|10*3/uL||N||F||||20240330133228
	 * R|21|^^^^NRBC%^1|0.0|/100WBC||N||F||||20240330133228
	 * R|22|^^^^NRBC#^1|0.00|10*3/uL||N||F||||20240330133228
	 * R|23|^^^^RDW-SD^1|58.2|fL||H||F||||20240330133228
	 * R|24|^^^^RDW-CV^1|17.2|%||H||F||||20240330133228
	 * R|25|^^^^MICROR^1|2.4|%||N||F||||20240330133228
	 * R|26|^^^^MACROR^1|5.4|%||N||F||||20240330133228
	 * R|27|^^^^PDW^1|16.4|fL||W||F||||20240330133228
	 * R|28|^^^^MPV^1|12.0|fL||W||F||||20240330133228
	 * R|29|^^^^P-LCR^1|40.9|%||W||F||||20240330133228
	 * R|30|^^^^PCT^1|0.18|%||W||F||||20240330133228
	 * R|31|^^^^Neutrophilia||||A||F||||20240330133228
	 * R|32|^^^^IG_Present||||A||F||||20240330133228
	 * R|33|^^^^Anemia||||A||F||||20240330133228
	 * R|34|^^^^Left_Shift?|90|||||F||||20240330133228
	 * R|35|^^^^Atypical_Lympho?|0|||||F||||20240330133228
	 * R|36|^^^^Blasts/Abn_Lympho?|50|||||F||||20240330133228
	 * R|37|^^^^RBC_Agglutination?|70|||||F||||20240330133228
	 * R|38|^^^^Turbidity/HGB_Interference?|80|||||F||||20240330133228
	 * R|39|^^^^Iron_Deficiency?|80|||||F||||20240330133228
	 * R|40|^^^^HGB_Defect?|80|||||F||||20240330133228
	 * R|41|^^^^Fragments?|20|||||F||||20240330133228
	 * R|42|^^^^PLT_Clumps?|50|||||F||||20240330133228
	 * R|43|^^^^Giant_Platelet?|300|||A||F||||20240330133228
	 * R|44|^^^^Positive_Diff||||A||F||||20240330133228
	 * R|45|^^^^Positive_Morph||||A||F||||20240330133228
	 * R|46|^^^^Positive_Count||||A||F||||20240330133228
	 * R|47|^^^^SCAT_WDF|PNG&R&20240330&R&2024_03_30_13_32_24033090290_WDF.PNG|||N||
	 * F||||20240330133228
	 * R|48|^^^^SCAT_WNR|PNG&R&20240330&R&2024_03_30_13_32_24033090290_WNR.PNG|||N||
	 * F||||20240330133228
	 * R|49|^^^^DIST_RBC|PNG&R&20240330&R&2024_03_30_13_32_24033090290_RBC.PNG|||N||
	 * F||||20240330133228
	 * R|50|^^^^DIST_PLT|PNG&R&20240330&R&2024_03_30_13_32_24033090290_PLT.PNG|||N||
	 * F||||20240330133228
	 * R|51|^^^^DIST_WDF(FSC)|PNG&R&20240330&R&2024_03_30_13_32_24033090290_WDF_FSC.
	 * PNG|||N||F||||20240330133228 C|1|| L|1|N
	 */



	//

	
	

	public static void sysmaxXl100BHU(List<String> list) {    // AIIMS Bhubneswar Sysmax 2500 Format ID 100017
		Map<String, List> mp = new HashMap();
		List lis = new ArrayList();
		List lis1 = new ArrayList();
		String ip = "";
		
		List testCode = new ArrayList<>();
		List testvalue =new ArrayList<>();
	
		//String sampleName = null;//new StringBuffer();
		StringBuffer TestCode = null;
		StringBuffer TestValue = null;
		StringBuffer TestCode1;
		StringBuffer TestCode2;
		StringBuffer TestCode3;
		StringBuffer TestCode4;
		StringBuffer TestCode5;

		System.out.println("size:-- " + list.size());
		String stcode;
		String sTvalue;
		ABCbkp aBCbkp = new ABCbkp();

		int r = 0;
		for (String line : list) {
			r++;
			if (line.length() == 0 || line == null)
				break;
			TestCode = new StringBuffer();
			TestValue = new StringBuffer();
			TestCode1 = new StringBuffer();
			TestCode2 = new StringBuffer();
			TestCode3 = new StringBuffer();// only MTBRIF
			TestCode4 = new StringBuffer();// only SARScov2
			TestCode5 = new StringBuffer();// only SARScov2

			System.out.println("line.length() " + line.length());
			if (line.length() > 2) {
				if (Character.toUpperCase(line.charAt(2)) == 'O') {
					//					char[] ch = line.toCharArray();
					//					int count = 0;
					//					int count_tn = 0;
					//					int count_or_cr= 0;
					//					for (int i = 0; i < ch.length; i++) {
					//
					//						// if(ch[i]==94) // Ascii value for '^'
					//						// break;
					//
					//						if (ch[i] == '|') {
					//							count++;
					//							if (count == 2)


					//								i++;
					//						}
					//						if (count == 2 && ch[i] == '^')
					//							count_or_cr++;
					//
					//						if (count == 2 ) {
					//							if (!(ch[i] == '^'))
					//								sampleName.append(ch[i]);
					//						}
					//
					//						if (count_or_cr == 1) {
					//							break;
					//						}
					//					}

					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						sampleName = parts[3];
						sampleName=sampleName.replaceAll(" ", "");
						String ab[]=sampleName.split("\\^");
						sampleName=ab[2];
						//TestCode.append(valueAfterSecondPipe);
						System.out.println("Value after the second pipe: " + sampleName.toString().replaceAll("\\^", ""));
					}

					System.out.println("SampleName===========:- " + sampleName);// Sample ID Read between '|' and '^'

				}

				// if(Test_Name1.equals("MTBRIF")) { parse(list); } else { continue; }



				String valueAfterSecondPipe=null;
				String valueAfterThirdPipe=null;

				if (Character.toUpperCase(line.charAt(2)) == 'R') {



					String[] parts = line.split("\\|");

					// Check if the parts array has at least three elements
					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterSecondPipe = parts[2];
						// valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^1", "");
						String [] abc= valueAfterSecondPipe.split("\\^");
						valueAfterSecondPipe=abc[4];

						//if(valueAfterSecondPipe.equals("BASO%") || valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {
						if(valueAfterSecondPipe.equals("PCV") || valueAfterSecondPipe.equals("IG%") || valueAfterSecondPipe.equals("IG#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("EO#") || valueAfterSecondPipe.equals("LYMPH#")  || valueAfterSecondPipe.equals("MONO#")  || valueAfterSecondPipe.equals("NEUT#")  || valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {	
							TestCode.append(valueAfterSecondPipe);
						}
						System.out.println("Value after the second pipe: " + valueAfterSecondPipe.replaceAll("\\^", ""));
					}
					//System.out.println(parts[2]);

					if (parts.length >= 3) {
						// The value after the second pipe '|' is at index 2
						valueAfterThirdPipe = parts[3];
						valueAfterThirdPipe=  valueAfterThirdPipe.replaceAll("\\^", "");
						//				             double number = Double.parseDouble(valueAfterThirdPipe);
						//				             double truncatedNumber = (int) (number * 10) / 10.0;
						//				             System.out.println("truncatedNumber"+truncatedNumber);
						//				             String result = String.format("%.1f", truncatedNumber);

						valueAfterSecondPipe = parts[2];
						// valueAfterSecondPipe= valueAfterSecondPipe.replaceAll("\\^", "");
						String [] abc= valueAfterSecondPipe.split("\\^");
						valueAfterSecondPipe=abc[4];
						//if(valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {


						if( valueAfterSecondPipe.equals("PCV") ||valueAfterSecondPipe.equals("IG%") || valueAfterSecondPipe.equals("IG#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("BASO#") || valueAfterSecondPipe.equals("EO#") || valueAfterSecondPipe.equals("LYMPH#")  || valueAfterSecondPipe.equals("MONO#")  || valueAfterSecondPipe.equals("NEUT#")  || valueAfterSecondPipe.equals("BASO%")  ||  valueAfterSecondPipe.equals("EO%") || valueAfterSecondPipe.equals("NEUT%") || valueAfterSecondPipe.equals("MONO%") || valueAfterSecondPipe.equals("LYMPH%") || valueAfterSecondPipe.equals("WBC")|| valueAfterSecondPipe.equals("NEU#") || valueAfterSecondPipe.equals("LYM#") || valueAfterSecondPipe.equals("MON#") || valueAfterSecondPipe.equals("EOS#") || valueAfterSecondPipe.equals("BAS#") || valueAfterSecondPipe.equals("IMG#") || valueAfterSecondPipe.equals("NEU%") || valueAfterSecondPipe.equals("LYM%") || valueAfterSecondPipe.equals("MON%") || valueAfterSecondPipe.equals("EOS%") || valueAfterSecondPipe.equals("BAS%") || valueAfterSecondPipe.equals("IMG%") || valueAfterSecondPipe.equals("RBC") || valueAfterSecondPipe.equals("HGB") || valueAfterSecondPipe.equals("HCT") || valueAfterSecondPipe.equals("MCV") || valueAfterSecondPipe.equals("MCH") || valueAfterSecondPipe.equals("MCHC") || valueAfterSecondPipe.equals("RDW-CV") || valueAfterSecondPipe.equals("RDW-SD") || valueAfterSecondPipe.equals("PLT") || valueAfterSecondPipe.equals("MPV") || valueAfterSecondPipe.equals("PDW") || valueAfterSecondPipe.equals("PCT") || valueAfterSecondPipe.equals("PLCC") || valueAfterSecondPipe.equals("NRBC#") || valueAfterSecondPipe.equals("NRBC%") || valueAfterSecondPipe.equals("PLCR") ) {	
							TestValue.append(valueAfterThirdPipe);
							//aBCbkp.insert_GenExpert(TestCode.toString().trim(),TestValue.toString().trim(),sampleName.toString().trim());
							
						}
						System.out.println("Value after the third pipe: " + valueAfterThirdPipe.replaceAll("\\^", ""));
					}
					
				}


				if (!TestCode.toString().trim().equals("") && !(list.size()==2)) {

					testCode.add(TestCode.toString().trim());
					testvalue.add(TestValue.toString().trim());
					//aBCbkpinsert_SysmexXN350();

				}
			}
				
		}
		mp.put("TestCode", testCode);
		mp.put("TestValue", testvalue);
		
		aBCbkp.insert_SysmexXN350(mp,sampleName.toString().trim());


		// MachineData msh = new MachineData();
		// msh.save(mp,sampleName.toString(),ip);

	}
	
	
	public static List Vitors_Query_parse(){
		System.out.println("Vitros Query Packet Parsing Start ");
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		// System.out.println("current_time_str2 after 1 second wait---" +
		// current_time_str3);

		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		//		StringBuffer header1 = new StringBuffer(
		//				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer();

		header.append("H|\\^&|||LIS2-A||||||||AIIMS|");
		// header = header.append(Query_Message_date_time);
		header = header.append(current_time_str);

		StringBuffer line4 = new StringBuffer("L|1|F");
		StringBuffer line6 = new StringBuffer("|||F");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count+"|");
		p.append(Sample_code.get(0)+"|||");
	//P|1|240527P003|||Ray^Ari|||M|||||||||||||||||
		
		// p.append("Smith^Tom^J||19600315|M|||A|||icteru||||||01|||||A1|002||||||||");
		// p.append("RR^ABIGAIL^G||19780407|F||843 TALL OAKSDR^HAILVILLE, MD
		// 45831|||RASHAMDRA^SANJAY^V|S|||||||||||U7");
		if (name_pat_first.equals("null")) {
			name_pat_first = "";
			name_pat_last = "";
		}
		if (name_pat_last.equals("null"))
			name_pat_last = "";
		p.append(name_pat_first + "^" + name_pat_last);
		//		 p.append(name_pat.trim()); 

	//	p.append("||||||||||||||||||||");
		p.append("|||M|||||||||||||||||");
		StringBuffer c = new StringBuffer("C|1|I|Patient is complaining of shortness of breath and chest pain.|G");

		StringBuffer Order = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			System.out.println("TIME:- " + time);

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);

				System.out.println("testCode.size------- " + testCode.size());

				frameList.clear();
				frame1.append(stx);
				frame1.append(StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());
				System.out.println("frameList= " + frameList.toString());

				StxCounter = StxCounter + 1;

				frame2.append(stx);
				frame2.append(StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());
				System.out.println("frameList= " + frameList.toString());

				// ====================================================================
				
//O|1|240527P003||^^^1.0000+300+1.0|R||20240527133440||||N||||5||||||||||O
				Order.append("O|1");
				// Order.append();
				Order.append("|");
				Order.append(Sample_code.get(0));
				Order.append("||");
				Order.append("^^^");
				Order.append("1.0000+");
				for (int k = 0; k < testCode.size(); k++)

				{
					// Order.append(k + 1);
					
					Order.append(testCode.get(k));
					 Order.append("+1.0");
					if (k != testCode.size() - 1) {
						// Order.append("^2^1");
						Order.append("\\");

					}

					else {
						 Order.append("");
					}

				}
				//Order.append("|");
				Order.append("|R||"+current_time_str+"||||N||||5||||||||||O");  //|R||20 060516091500||||A|||||
				// Order.append(line6);
				Order.append(cr);

				buf_order.append(Order);
				Order.delete(0, Order.length());

				// System.out.println("buf_order= " + buf_order.toString());

				// --------------------------------------------
				// System.out.println("STRING LENGTH BEFORE FRAMING buf_order= " +
				// buf_order.length());

				// STRING LENGTH BEFORE FRAMING = 235
				int frameCount = 0, first = 0, mid = 0, remain = 0;
				frameCount = FrameCounter(buf_order.length());
				// System.out.println("Char At 0 "+buf.charAt(0));
				int length = buf_order.length();
				// frameList3.clear();
				for (int i = 1; i <= frameCount; i++) {
					if (length < 240)
						// if (length < 306)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
					frame3.append(stx);
					StxCounter = StxCounter + 1;
					// System.out.println("Server.StxCounter " +StxCounter);
					frame3.append(StxCounter);
					// System.out.println("STX COUNTER:- " +StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
						// CHARACTERS
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						// frame.append(CheckSum(buf.substring(first, mid)));
						frame3.append(cr);
						frame3.append(lf);
					}
					// length = length - mid;
					length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
					/*
					 * if(i ==1) frame1.append(frame); else frame2.append(frame);
					 */
					frame3.delete(0, frame3.length());

				}

				buf_order.delete(0, buf_order.length());
				System.out.println("frameList= " + frameList.toString());



				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================

			StxCounter = StxCounter + 1;

			frame4.append(stx);
			frame4.append(StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());

			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			//				System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;

		return frameList;
		
		
		
	}
	
	

	public static List AIIMSJD_AT() {
		System.out.println("inside atlica bidir");
//		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
//		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
//		System.out.println("current_time_str2---" + current_time_str2);
//		String rack_type = "";
//		String sample_type = "";
//		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
//		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
//		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
//		int CountPipe = 0;
//		int j = 0;
//		char cr = '\r';
//		char lf = '\n';
//		int instance = 0;
//		char stx = 2;
//		String mode1 = "";
//		StringBuffer buf = new StringBuffer();
//		StringBuffer cobas = new StringBuffer();
//		StringBuffer host = new StringBuffer();
//		StringBuffer mode = new StringBuffer();
//		new StringBuffer();
//		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
//		String current_time_str = time_formatter.format(System.currentTimeMillis());
//		new StringBuffer("H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");
//		StringBuffer header = new StringBuffer();
//	//	header.append("||");
//	//	header.append("|||||");
//	//	header.append("|TSDWN|||");
//		
//		
//	//	header.append("H|\\^&|||Host|||||UIW_LIS||P|LIS2A|");
//		
//		header.append("H|\\^&||||||||||P|1");
//		//header.append(current_time_str);
//		new StringBuffer("C|1|L|^^^^|G");
//		StringBuffer line4 = new StringBuffer("L|1|N|");
//		new StringBuffer("|||O");
//		new StringBuffer();
//		char etb = '';
//		char eot = '';
//		char etx = '';
//		counterPID_Packet += 33;
//		StringBuffer p = new StringBuffer("P|");
//		p.append(p_packet_count+"|");
//		p.append(Sample_code.get(0).split("\\^")[1]);
//		p.append("|||^|||M");
//		
//		
//		
//		
//		new StringBuffer("L|1|N|");
//		StringBuffer c = new StringBuffer("C|1|||");
//		StringBuffer Order = new StringBuffer();
//		new StringBuffer("O|2");
//		new ArrayList();
//		StringBuffer frame = new StringBuffer();
//		new StringBuffer();
//		StringBuffer response = new StringBuffer();
//		StringBuffer time = new StringBuffer();
//		frameList.clear()
//		header.append(etx);
//		header.append(CheckSum(header.toString())); // FRAME WITH STX STX COUNTER AND ETB
//		header.append(cr);
//		header.append(lf);
//		frameList.add(header.toString());
//		try {
//			System.out.println("TIME:- " + time);
//			stx = stx;
//			buf.append(header);
//			buf.append(cr);
//			p.append(cr);
//			buf.append(p);
//			System.out.println("testCode   size------- " + testCode.size());
//			Order.append("O|1");
//			Order.append("|");
//			String[] smno=Sample_code.get(0).split("\\^");
//			Order.append(Sample_code.get(0));
//			Order.append("|");
//		
//		
//			 //Order.append(Sample_code.get(0));
//			//  Order.append(((String) pa.get(0)).toString());
//			Order.append("|");
//
//			int frameCount;
//			for(frameCount = 0; frameCount < testCode.size(); ++frameCount) {
//				Order.append("^^^");
//				Order.append(testCode.get(frameCount));
//				if (frameCount != testCode.size() - 1) {
//					Order.append("^\\");
//				} else {
//					Order.append("^");
//				}
//			}
//
//			Order.append("|R||"+current_time_str+"||||A|||||");
//			Order.append(cr);
//			buf.append(Order);
//			Order.delete(0, Order.length());
//			System.out.println("buf= " + buf.toString());
//			c.append(cr);
//			buf.append(c);
//			line4.append(cr);
//			buf.append(line4);
//			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
//			System.out.println("frame BEFORE FRAMING = " + buf.toString());
//			//     int frameCount = 0;
//			int first = 0;
//			int mid = 0;
//			boolean remain = false;
//			frameCount = FrameCounter(buf.length());
//			int length = buf.length();
//
//			int i;
//			for(i = 1; i <= frameCount; ++i) {
//				if (length < 240) {
//					mid += length;
//				} else if (length == 240) {
//					mid += length;
//				} else if (length > 240) {
//					mid += 240;
//				}
//
//				System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
//				frame.append(stx);
//				System.out.println("Server.StxCounter " + StxCounter);
//				frame.append(StxCounter);
//				System.out.println("STX COUNTER:- " + StxCounter);
//				++StxCounter;
//				frame.append(buf.substring(first, mid));
//				if (i == frameCount) {
//					frame.append(etx);
//					System.out.println("before checksum" + frame.toString());
//					frame.append(CheckSum(frame.toString()));
//					frame.append(cr);
//					frame.append(lf);
//				} else {
//					frame.append(etb);
//					System.out.println("before checksum" + frame.toString());
//					frame.append(CheckSum(frame.toString()));
//					frame.append(cr);
//					frame.append(lf);
//				}
//
//				length -= 240;
//				first = mid;
//				response.append(frame);
//				frameList.add(frame.toString());
//				frame.delete(0, frame.length());
//			}
//
//			StxCounter = 1;
//
//			for(i = 0; i < frameList.size(); ++i) {
//				++count_ack_BA400_o1;
//			}
//
//			System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
//			System.out.println("Final String after checksum" + frameList.toString());
//		} catch (Exception var45) {
//			System.out.println(var45.getMessage());
//			var45.printStackTrace();
//		}
//
//		return frameList;
		
		
		
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		StxCounter = 1;

		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		// System.out.println("current_time_str2 after 1 second wait---" +
		// current_time_str3);

		int CountPipe = 0, j = 0;
		char cr = 13;
		char lf = 10;
		int instance = 0;
		char stx = '';
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		StringBuffer lines = new StringBuffer();
		StringBuffer frame1 = new StringBuffer();
		StringBuffer frame2 = new StringBuffer();
		StringBuffer frame3 = new StringBuffer();
		StringBuffer frame3_1 = new StringBuffer();
		StringBuffer frame4 = new StringBuffer();

		StringBuffer buf_header = new StringBuffer();
		StringBuffer buf_patient = new StringBuffer();
		StringBuffer buf_order = new StringBuffer();
		StringBuffer buf_order_1 = new StringBuffer();
		StringBuffer buf_termination = new StringBuffer();

		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());

		//		StringBuffer header1 = new StringBuffer(
		//				"H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");

		StringBuffer header = new StringBuffer();

		header.append("H|\\^&|||LIS_ID|||||UIW_LIS||P|1");
		// header = header.append(Query_Message_date_time);
	//	header = header.append(current_time_str);

		StringBuffer line4 = new StringBuffer("L|1|F");
		StringBuffer line6 = new StringBuffer("|||F");
		StringBuffer line5 = new StringBuffer();
		char etb = 23;
		char eot = '';
		char etx = 3;
		counterPID_Packet = counterPID_Packet + 33;

//		StringBuffer p = new StringBuffer("P|");
//		p.append(p_packet_count);
//		p.append("|");
//		p.append("||");
//		// p.append("|");
//		p.append(Server.Sample_code.get(0).toString().trim());
//		p.append("|^");
//		
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count+"|");
		//p.append(Sample_code.get(0).split("\\^")[1]+"|");
	
		p.append(Sample_code.get(0)+"|");
		
		// p.append("Smith^Tom^J||19600315|M|||A|||icteru||||||01|||||A1|002||||||||");
		// p.append("RR^ABIGAIL^G||19780407|F||843 TALL OAKSDR^HAILVILLE, MD
		// 45831|||RASHAMDRA^SANJAY^V|S|||||||||||U7");
		if (name_pat_first.equals("null")) {
			name_pat_first = "";
			name_pat_last = "";
		}
		if (name_pat_last.equals("null"))
			name_pat_last = "";
		p.append(name_pat_first + "^" + name_pat_last+"^");
		//		 p.append(name_pat.trim()); 

	//	p.append("||||||||||||||||||||");
		p.append("|||^|||M");
		StringBuffer c = new StringBuffer("C|1|I|Patient is complaining of shortness of breath and chest pain.|G");

		StringBuffer Order = new StringBuffer();
		StringBuffer Order1 = new StringBuffer("O|2");
		List list = new ArrayList();
		StringBuffer frame = new StringBuffer();
		StringBuffer framevip = new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {

			System.out.println("TIME:- " + time);

			while (true) {

				buf_header.append(header);
				buf_header.append(cr);
				buf_patient.append(p);
				buf_patient.append(cr);

				System.out.println("testCode.size------- " + testCode.size());

				frameList.clear();
				frame1.append(stx);
				frame1.append(StxCounter);
				frame1.append(buf_header);
				buf_header.delete(0, buf_header.length());
				frame1.append(etx);
				frame1.append(CheckSum(frame1.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame1.append(cr);
				frame1.append(lf);
				frameList.add(frame1.toString());
				frame1.delete(0, frame1.length());
				System.out.println("frameList= " + frameList.toString());

				StxCounter = StxCounter + 1;

				frame2.append(stx);
				frame2.append(StxCounter);
				frame2.append(buf_patient);
				buf_patient.delete(0, buf_patient.length());
				frame2.append(etx);
				frame2.append(CheckSum(frame2.toString())); // FRAME WITH STX STX COUNTER AND ETB
				frame2.append(cr);
				frame2.append(lf);
				frameList.add(frame2.toString());
				frame2.delete(0, frame2.length());
				System.out.println("frameList= " + frameList.toString());

				// ====================================================================
				Order.append("O|1");
				// Order.append();
				Order.append("|");
				///Order.append(Sample_code.get(0).split("\\^")[1]);
				
				Order.append(Sample_code.get(0)+"|");
				Order.append("|");
				for (int k = 0; k < testCode.size(); k++)

				{
					// Order.append(k + 1);
					Order.append("^^^");
					Order.append(testCode.get(k));
					// Order.append("+1.0");
					if (k != testCode.size() - 1) {
						// Order.append("^2^1");
						Order.append("\\");

					}

					else {
						 Order.append("");
					}

				}
				//Order.append("|");
				Order.append("|R||"+current_time_str+"||||A||||Serum||||||||||O");  //|R||20 060516091500||||A|||||
				// Order.append(line6);
				Order.append(cr);

				buf_order.append(Order);
				Order.delete(0, Order.length());

				// System.out.println("buf_order= " + buf_order.toString());

				// --------------------------------------------
				// System.out.println("STRING LENGTH BEFORE FRAMING buf_order= " +
				// buf_order.length());

				// STRING LENGTH BEFORE FRAMING = 235
				int frameCount = 0, first = 0, mid = 0, remain = 0;
				frameCount = FrameCounter(buf_order.length());
				// System.out.println("Char At 0 "+buf.charAt(0));
				int length = buf_order.length();
				// frameList3.clear();
				for (int i = 1; i <= frameCount; i++) {
					if (length < 240)
						// if (length < 306)
						mid = mid + length;
					else if (length == 240)
						mid = mid + length;
					else if (length > 240) {
						mid = mid + 240;
					}
					System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
					frame3.append(stx);
					StxCounter = StxCounter + 1;
					// System.out.println("Server.StxCounter " +StxCounter);
					frame3.append(StxCounter);
					// System.out.println("STX COUNTER:- " +StxCounter);

					frame3.append(buf_order.substring(first, mid));

					if (i == frameCount) {
						frame3.append(etx);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETX
						// frame.append(CheckSum(buf.substring(first, mid))); //FRAME WITH ONLY
						// CHARACTERS
						frame3.append(cr);
						frame3.append(lf);
					} else

					{
						frame3.append(etb);
						// System.out.println("before checksum" + frame3.toString());
						frame3.append(CheckSum(frame3.toString())); // FRAME WITH STX STX COUNTER AND ETB
						// frame.append(CheckSum(buf.substring(first, mid)));
						frame3.append(cr);
						frame3.append(lf);
					}
					// length = length - mid;
					length = length - 240;
					first = mid;

					frameList.add(frame3.toString());
					/*
					 * if(i ==1) frame1.append(frame); else frame2.append(frame);
					 */
					frame3.delete(0, frame3.length());

				}

				buf_order.delete(0, buf_order.length());
				System.out.println("frameList= " + frameList.toString());



				line4.append(cr);

				buf.append(line4);
				buf_termination.append(line4);

				break;
			}

			// ========================================

			StxCounter = StxCounter + 1;

			frame4.append(stx);
			frame4.append(StxCounter);
			frame4.append(buf_termination);
			buf_termination.delete(0, buf_termination.length());
			frame4.append(etx);
			frame4.append(CheckSum(frame4.toString())); // FRAME WITH STX STX COUNTER AND ETB
			frame4.append(cr);
			frame4.append(lf);

			frameList.add(frame4.toString());
			frame4.delete(0, frame4.length());

			for (int i = 0; i < frameList.size(); i++) {
				count_ack_BA400_o1++;
			}
			//				System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		// Server.frameList = frameList;

		return frameList;
	}




	//	 1H|\^&|||||||||TSDWN|||
	//	 P|1||||^|||
	//	 O|1|^^04100490^0^50006^1^^S1^SC^R2|^|^^^10172^1\^^^10220^1\^^^10195^1\^^^BILI-INDIRECT^1|R||||||A||||1||||||||||O
	//	 C|1|I|^^^^|G|
	//	 L|1|N|
	//	 8D
	//


	//AIIMS Bhubaneswar Cobas 801 Bi Directional Solution  working
	public static List cobas6000_headerParsing_s() {
		SimpleDateFormat time_formatter2 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str2 = time_formatter2.format(System.currentTimeMillis());
		System.out.println("current_time_str2---" + current_time_str2);
		String rack_type = "";
		String sample_type = "";
		SimpleDateFormat time_formatter3 = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str3 = time_formatter3.format(System.currentTimeMillis());
		System.out.println("current_time_str2 after 1 second wait---" + current_time_str3);
		int CountPipe = 0;
		int j = 0;
		char cr = '\r';
		char lf = '\n';
		int instance = 0;
		char stx = 2;
		String mode1 = "";
		StringBuffer buf = new StringBuffer();
		StringBuffer cobas = new StringBuffer();
		StringBuffer host = new StringBuffer();
		StringBuffer mode = new StringBuffer();
		new StringBuffer();
		SimpleDateFormat time_formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String current_time_str = time_formatter.format(System.currentTimeMillis());
		new StringBuffer("H|@^\\|GXM-88424724426|| LIS|||||CENTRAL RAILWAY HOSPITAL, SECUNDERABAD - 110000888^GeneXpert^6.4||P|1394-97|");
		StringBuffer header = new StringBuffer("H|\\^&|");
		header.append("||");
		header.append("|||||");
		header.append("|TSDWN|||");
		new StringBuffer("C|1|L|^^^^|G");
		StringBuffer line4 = new StringBuffer("L|1|N|");
		new StringBuffer("|||O");
		new StringBuffer();
		char etb = '';
		char eot = '';
		char etx = '';
		counterPID_Packet += 33;
		StringBuffer p = new StringBuffer("P|");
		p.append(p_packet_count);
		p.append("||||^|||");
		new StringBuffer("L|1|N|");
		StringBuffer c = new StringBuffer("C|1|I|^^^^|G|");
		StringBuffer Order = new StringBuffer();
		new StringBuffer("O|2");
		new ArrayList();
		StringBuffer frame = new StringBuffer();
		new StringBuffer();
		StringBuffer response = new StringBuffer();
		StringBuffer time = new StringBuffer();

		try {
			System.out.println("TIME:- " + time);
			stx = stx;
			buf.append(header);
			buf.append(cr);
			p.append(cr);
			buf.append(p);
			System.out.println("testCode   size------- " + testCode.size());
			Order.append("O|1");
			Order.append("|");
			String[] smno=Sample_code.get(0).split("\\^");
			Order.append(smno[2]+"|");
			String R2check=smno[9];
			Sample_code.get(0).toString().replaceAll(R2check,"not");
			String strr=Sample_code.get(0);
			strr= strr.replaceAll(R2check, "not");
			strr=strr.replaceAll("\\^"+smno[2], "");
			// Order.append(((String)Sample_code.get(0)).toString().replaceAll("\\^"+smno[2],""));
			Order.append(strr);
			// Order.append("|");
			//  Order.append(((String) pa.get(0)).toString());
			Order.append("|");

			int frameCount;
			for(frameCount = 0; frameCount < testCode.size(); ++frameCount) {
				Order.append("^^^");
				Order.append(testCode.get(frameCount));
				if (frameCount != testCode.size() - 1) {
					Order.append("^1\\");
				} else {
					Order.append("^1");
				}
			}

			Order.append("|R||||||A||||1||||||||||O");
			Order.append(cr);
			buf.append(Order);
			Order.delete(0, Order.length());
			System.out.println("buf= " + buf.toString());
			c.append(cr);
			buf.append(c);
			line4.append(cr);
			buf.append(line4);
			System.out.println("STRING LENGTH BEFORE FRAMING = " + buf.length());
			System.out.println("frame BEFORE FRAMING = " + buf.toString());
			//     int frameCount = 0;
			int first = 0;
			int mid = 0;
			boolean remain = false;
			frameCount = FrameCounter(buf.length());
			int length = buf.length();

			int i;
			for(i = 1; i <= frameCount; ++i) {
				if (length < 240) {
					mid += length;
				} else if (length == 240) {
					mid += length;
				} else if (length > 240) {
					mid += 240;
				}

				System.out.println("First " + first + "  " + "last " + mid + " stx  " + stx);
				frame.append(stx);
				System.out.println("Server.StxCounter " + StxCounter);
				frame.append(StxCounter);
				System.out.println("STX COUNTER:- " + StxCounter);
				++StxCounter;
				frame.append(buf.substring(first, mid));
				if (i == frameCount) {
					frame.append(etx);
					System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString()));
					frame.append(cr);
					frame.append(lf);
				} else {
					frame.append(etb);
					System.out.println("before checksum" + frame.toString());
					frame.append(CheckSum(frame.toString()));
					frame.append(cr);
					frame.append(lf);
				}

				length -= 240;
				first = mid;
				response.append(frame);
				frameList.add(frame.toString());
				frame.delete(0, frame.length());
			}

			StxCounter = 1;

			for(i = 0; i < frameList.size(); ++i) {
				++count_ack_BA400_o1;
			}

			System.out.println("count_ack_BA400_o1------- " + count_ack_BA400_o1);
			System.out.println("Final String after checksum" + frameList.toString());
		} catch (Exception var45) {
			System.out.println(var45.getMessage());
			var45.printStackTrace();
		}

		return frameList;
	}
	
	
	//Vitros Result Packet Parsing Format id 20047  
	public static void vitros_result_paarse(List<String> list) {
		
		
		
		System.out.println("Parsing Start Vitros Result Packet ....");
		//System.out.println(list);
		String sampleNo=null;
		List testCode = new ArrayList<String>();
		List testValue = new ArrayList<String>();
		Map<String ,List> mp = new HashMap<String ,List>();
		for(String strdata:list) {
			String[] packetData=strdata.split("\\|");
			
			if(packetData[0].contains("P")) {
				
			}
			else if(packetData[0].contains("O")) {
				String[] sampleNodata=packetData[2].split("\\^");
				sampleNo=sampleNodata[0];
			}
			else if(packetData[0].contains("R")) {
				
			//	System.out.println( packetData[2]);
				testCode.add( packetData[2].substring(10,13));
				testValue.add(packetData[3]);
				  
				ABC.insert_SysmexXN350A(packetData[2].substring(10,13).toString().trim(), packetData[3].toString().replace("|", "").trim(), sampleNo.toString().replace("^", "").trim());
				
				
			}
			
		}
		
	////	System.out.println("Sample NO : "+sampleNo);
	//	System.out.println("TestCode : "+testCode);
	//	System.out.println("TestValue : "+testValue);
		
		
	//	mp.put("TestCode", testCode);
	//	mp.put("TestValue", testValue);
		
	//	ABCbkp aBCbkp = new ABCbkp();

		//aBCbkp.insert_SysmexXN350(mp,sampleNo.toString().trim());	
		
		
	}
	
	
	/// ASTM RESULT LOG
	
	
	
	/*
	 *1H|\^&|||H550^906YAXH02438^1.0.5.1a|||||||P|LIS2-A2|20200225124440
A5
2P|1||79320/84||||^62^Y|F|||||^DR. PRABHAKARAN||||||||||||DERMATOLOGY|||||||||WOMAN||
BC
3O|1|AUTO_SID0038^^014627^4||^^^DIF|R|20200225123542|||||||||BLOOD||||||||||F|||||
C3
4C|1|I|CONDITIONS^^MANUAL_MATCH\SUSPECTED_PATHOLOGY^^EOSINOPHILIA|I
DC
5M|1|REAGENT|CLEANER\DILUENT\LYSE|191114I13^20200224000000^20200524\191101H19^20200224000000^20200824\191107M11^20200218000000^20200418
01
6R|1|^^^PCT^51637-7|0.18|%|0.15 - 0.40^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
93
7R|2|^^^NEU#^751-8|3.76|10E3/uL|2.00 - 7.00^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
FB
0R|3|^^^MCV^787-2|87.8|um3|83.0 - 101.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
5A
1R|4|^^^P-LCR^48386-7|31.2|%|18.0 - 50.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
10
2R|5|^^^NEU%^770-8|58.8|%|40.0 - 80.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
60
3R|6|^^^RDW-CV^788-0|12.5|%|11.6 - 14.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
FD
4R|7|^^^RBC^789-8|4.33|10E6/uL|3.80 - 4.80^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
DF
5R|8|^^^MPV^32623-1|9.3|um3|8.0 - 11.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
2C
6R|9|^^^MON#^742-7|0.28|10E3/uL|0.20 - 1.00^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
F6
7R|10|^^^P-LCC|61|10E3/uL|44 - 140^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
1F
0R|11|^^^WBC^6690-2|6.40|10E3/uL|4.00 - 10.00^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
4D
1R|12|^^^PLT^777-3|196|10E3/uL|150 - 410^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
86
2R|13|^^^LIC%^55433-7|0.3|%|0.0 - 1.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
37
3R|14|^^^MON%^5905-5|4.3|%|2.0 - 10.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
4E
4R|15|^^^LIC#^55432-9|0.02|10E3/uL|0.00 - 0.10^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
6D
5R|16|^^^LYM#^731-0|1.50|10E3/uL|1.00 - 3.00^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
1F
6R|17|^^^PDW^51631-0|15.1|um3|11.0 - 22.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
AB
7R|18|^^^HGB^718-7|13.6|g/dL|12.0 - 15.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
71
0R|19|^^^LYM%^736-9|23.5|%|20.0 - 40.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
8F
1R|20|^^^RDW-SD^21000-5|44.5|um3|37.0 - 49.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
75
2R|21|^^^BAS%^706-2|1.2|%|1.0 - 2.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
CA
3R|22|^^^BAS#^704-7|0.08|10E3/uL|0.02 - 0.10^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
06
4R|23|^^^MCH^785-6|31.5|pg|27.0 - 32.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
09
5R|24|^^^MCHC^786-4|35.9|g/dL|31.5 - 34.5^REFERENCE_RANGE|H||F||HINDLABS^^LABMANAGER|20200225123542||
C5
6R|25|^^^HCT^4544-3|38.0|%|36.0 - 46.0^REFERENCE_RANGE|N||F||HINDLABS^^LABMANAGER|20200225123542||
93
7R|26|^^^EOS#^711-2|0.76|10E3/uL|0.02 - 0.50^REFERENCE_RANGE|HH||F||HINDLABS^^LABMANAGER|20200225123542||
63
0R|27|^^^EOS%^713-8|11.9|%|1.0 - 6.0^REFERENCE_RANGE|H||F||HINDLABS^^LABMANAGER|20200225123542||
19
1L|1|N
04
 
	 * 
	 * */
	 
	
	
	public static void Horiba_Astm(List<String> list) {  //Horiba ASTM CHeECK
	
		System.out.println("Parsing Start Horiba Result Packet ....");
		
		System.out.println(""+list);
		String sampleNo=null;
		
		List testCode = new ArrayList<String>();
		List testValue = new ArrayList<String>();
		Map<String ,List> mp = new HashMap<String ,List>();
		for(String strdata:list) {
			String[] packetData=strdata.split("\\|");
			
			if(packetData[0].contains("P")) {
				
			}
			else if(packetData[0].contains("O")) {
				String[] sampleNodata=packetData[2].split("\\^");
				sampleNo=sampleNodata[0];
			}
			else if(packetData[0].contains("R")) {
				
			//	System.out.println( packetData[2]);
				String[] resPKt=packetData[2].split("\\^");
				testCode.add(resPKt[3]);
				testValue.add(packetData[3]);
				  
					
				
			}
			
		}
		
		System.out.println("Test Code List : "+testCode);
		System.out.println("Test Value List : "+testValue);
		for(int i=0;i<testCode.size();i++) {
			
			
			ABC.insert_SysmexXN350A(testCode.get(i).toString(),testValue.get(i).toString(), sampleNo.toString().replace("^", "").trim());
			
		}
		
	
	}
	

	public static void cobas6000_parsing(List<String> list) {

		System.out.println("ROhit 09 APR");
		String ip = "";
		StringBuffer sampleName = new StringBuffer();
		new ABC();
		int r = 0;
		Iterator var12 = list.iterator();

		while(var12.hasNext()) {
			String line = (String)var12.next();
			++r;
			if (line.length() == 0 || line == null) {
				break;
			}

			StringBuffer TestCode = new StringBuffer();
			StringBuffer TestValue = new StringBuffer();
			StringBuffer TestUnit = new StringBuffer();
			if (line.length() > 2) {
				int count_carr;
				if (Character.toUpperCase(line.charAt(0)) == 'O') {
					char[] ch = line.toCharArray();
					int count = 0;
					boolean count_tn = false;

					for(count_carr = 0; count_carr < ch.length; ++count_carr) {
						if (ch[count_carr] == '|') {
							++count;
						}

						if (count == 2 && ch[count_carr] != '|') {
							sampleName.append(ch[count_carr]);
						}

						if (count == 3) {
							break;
						}
					}

					System.out.println("SampleName===========:- " + sampleName);
				}

				if (Character.toUpperCase(line.charAt(0)) == 'R') {
					++r;
					boolean ct = false;
					char[] ch = line.toCharArray();
					int count_pipe = 0;
					count_carr = 0;
					int count_sl = 0;

					int count1;
					for(count1 = 0; count1 < ch.length; ++count1) {
						if (ch[count1] == '|') {
							++count_pipe;
						}

						if (count_pipe == 2 && ch[count1] == '^') {
							++count_carr;
							if (count_carr == 3) {
								++count1;
							}

							if (count_carr == 4) {
								++count1;
							}
						}

						if (count_carr == 3 && ch[count1] == '/') {
							++count_sl;
						}

						if (count_carr == 3 && ch[count1] != '/' && count_sl == 0) {
							TestCode.append(ch[count1]);
						}

						if (count_pipe == 3) {
							break;
						}
					}

					System.out.println("Testcode :- " + TestCode.toString());
					count1 = 0;

					for(int i = 0; i < ch.length; ++i) {
						if (ch[i] == '|') {
							++count1;
							if (count1 == 3) {
								++i;
							}
						}

						if (ch[i] != '|' && count1 == 3) {
							TestValue.append(ch[i]);
						}

						if (ch[i] != '|' && count1 == 4) {
							TestUnit.append(ch[i]);
						}
					}
					// remove stx in 

					//TestValue=str;

				}

				//	               String[] str=TestValue.toString().split("");
				//	               String[] str1=TestCode.toString().split("");
				//	               String tvv=str[0];
				//	               String tcc=str1[0];
				System.out.println("Testvalue==============:- " + TestValue);
				System.out.println("TestUnit not count====:- " + TestUnit);
				if (!TestCode.toString().trim().equals("") && r > 1 && !sampleName.toString().trim().equals("")) {
					if (TestUnit.toString().trim().equals("count")) {
						System.out.println("TestUnit do not have count " + TestUnit);
					} else {
						System.out.println("TestUnit have not count :- " + TestUnit);
						ABC.insert_SysmexXN350A(TestCode.toString().trim(), TestValue.toString().replace("|", "").trim(), sampleName.toString().replace("^", "").trim());
					}
				}
			}
		}

	}
	
	
    public static void parseLISMessage(List message) {
      //  String[] lines = message.split("\\n");

    	List<String> testCode = new ArrayList<String>();
    	List<String> testValue = new ArrayList<String>();
    	Map mp = new HashMap<String, List>();
		String sampleNo=null;
        System.out.println("Result Packet Parsing Start....");
        for (int i=0;i<message.size();i++) {
            String[] fields = message.get(i).toString().split("\\|");
            if (fields.length == 0) continue;
            
           String sttr=fields[0].substring(2);
            switch (sttr) {
                case "H":
                    System.out.println("Header: " + Arrays.toString(fields));
                    break;
                case "P":
                  //  System.out.println("Patient ID: " + fields[2] + ", Name: " + fields[5] + ", Age: " + fields[6] + ", Gender: " + fields[7]);
                    break;
                case "O":
                    
                	 // String[] parts = segment.split("\\|");

                          String sampleData = fields[2];

                          // Check if '^' is present
                          if (sampleData.contains("^")) {
                        	  sampleNo=  sampleData.split("\\^")[0];  // Get the first part before '^'
                          } else {
                        	  sampleNo=  sampleData;  // No '^', return as it is
                          }
                      
                	System.out.println("Order ID: " + sampleNo + ", Test: " + fields[5] + ", Sample Type: " + fields[14]);
                  // sampleNo=fields[2] ;
                    break;
                case "R":
                    System.out.println("Result: Test Code: " + fields[2] + ", Value: " + fields[3] + " " + fields[4] + ", Reference Range: " + fields[5]);
                    String[] tcArr=fields[2].split("\\^");
                    testCode.add(tcArr[3]);
                    //String[] tvArr=fields[3];//.split("\\^");
                    testValue.add(fields[3]);
                    
                    break;
                default:
                  //  System.out.println("Unknown Segment: " + line);
            }
        }
        
        
		System.out.println("TestCode : "+ testCode);
		System.out.println("TestValue : "+ testValue);
		mp.put("TestCode", testCode);
		mp.put("TestValue", testValue);


		ABC.insert_SysmexXN350Bubneswar(mp,sampleNo.toString().trim());	

    }
	
	

}
