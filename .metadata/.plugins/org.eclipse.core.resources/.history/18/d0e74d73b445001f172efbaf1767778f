/*******************************************************************************
 * © 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.infosys.common.dao;

import java.util.Date;
import java.util.List;
import org.apache.log4j.Logger;
import com.infosys.framework.exceptions.ServiceExceptionWrapper;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.infosys.common.GeneratedEntities.Investigationparameterfields;
import com.infosys.common.GeneratedEntities.Investigationsvalues;
import com.infosys.common.GeneratedEntities.Investigationvaluescasemapper;
import com.infosys.common.audit.interceptor.AuditLogInterceptor;
import com.infosys.common.pojoClasses.InvestigationSetValue;
import com.infosys.common.util.HibernateUtilities;

public class UpdateInvestigationValueDaoImpl implements UpdateInvestigationValueDao{


	// ~ Static attributes/initializers
	/** The Constant LOGGER. */
	// -------------------------------------------------------------
	private static final Logger LOGGER = Logger.getLogger(UpdateInvestigationValueDaoImpl.class.getName());




	// ~ Methods
	// ------------------------------------------------------------------------------------

	private static UpdateInvestigationValueDaoImpl instance = null;
	private UpdateInvestigationValueDaoImpl()
	{

	}

	public static UpdateInvestigationValueDaoImpl getInstance()
	{
		if(instance == null)
		{
			instance = new UpdateInvestigationValueDaoImpl();
		}
		return instance;
	}

	/**
	 * This method returns string with success/error message for succesfull updation of test values record
	 * from Deviceconfiguration entity
	 *
	 * @param investigationValueCaseMapperID
	 * ID of the test whose values is to updated
	 *
	 * @param investigationsValues
	 * list of updated values
	 *
	 *
	 * @param userName.
	 *
	 * @return string with success/error message for succesfull updation of test values record
	 *
	 */
	@Override
	public String updateInvestigationValue(Integer investigationValueCaseMapperID,List<InvestigationSetValue> investigationsValues,Date testDate,String details, String userName) throws Exception
	{
		LOGGER.debug("Logger Name: " + LOGGER.getName());
		Session session = null;
		String result="";
		//List<Investigationvaluescasemapper> investigationValueCaseMapper = new ArrayList<Investigationvaluescasemapper>();
		try
		{
			// opens a new session from the session factory
			SessionFactory sessionFactory = HibernateUtilities.createSessionFactory();

			// For logging audit record
			AuditLogInterceptor interceptor = new AuditLogInterceptor();
			session = sessionFactory.withOptions().interceptor(interceptor).openSession();
			interceptor.setSession(session);
			interceptor.setUserName(userName);
			session.getTransaction().begin();

			Investigationvaluescasemapper investigationValueCaseMapper=(Investigationvaluescasemapper) session.get(Investigationvaluescasemapper.class,investigationValueCaseMapperID);
			investigationValueCaseMapper.setDate(testDate);
			investigationValueCaseMapper.setDetails(details);
			investigationValueCaseMapper.setUpdatedBy(userName);
			Date time = new Date();
			investigationValueCaseMapper.setUpdatedTime(time);
			session.saveOrUpdate(investigationValueCaseMapper);

			Query query= session.createQuery("delete from Investigationsvalues where investigationValuesCaseMapper.investigationValuesCaseMapperId=?");
			query.setParameter(0, investigationValueCaseMapperID);
			query.executeUpdate();

			/// for updating InvestigationValues
			if(!investigationsValues.isEmpty())
			{
				for(InvestigationSetValue investigationSetValue : investigationsValues)
				{
					Investigationsvalues investigationsValuesObject = new Investigationsvalues();
					if(investigationSetValue.getValue()!=null)
					{
						investigationsValuesObject.setValue(investigationSetValue.getValue());
					}
					if(investigationSetValue.getExponentValue()!=null){
						investigationsValuesObject.setExponent(investigationSetValue.getExponentValue());
					}
					Investigationparameterfields investigationparameterfields=(Investigationparameterfields)session.get(Investigationparameterfields.class,investigationSetValue.getInvestigationParameterFieldID());

					investigationsValuesObject.setMeasuringUnit(investigationparameterfields.getMeasuringUnit());
					investigationsValuesObject.setMeasuringUnitRatio(investigationparameterfields.getMeasuringUnitRatio());
					investigationsValuesObject.setInvestigationTestsParameters(investigationparameterfields.getInvestigationTestsParameters());
					investigationsValuesObject.setInvestigationValuesCaseMapper(investigationValueCaseMapper);
					investigationsValuesObject.setCreatedBy(userName);
					investigationsValuesObject.setCreatedTime(time);
					session.merge(investigationsValuesObject);
				}
			}

			session.getTransaction().commit(); // Session commit
			result="Succesfully updated the values";
		}
		catch (Exception e)
		{
			if (session != null && session.getTransaction() != null)
			{
				// If transaction is open,rollback
				session.getTransaction().rollback();
			}
			LOGGER.error("## Exception occured:" + e.getMessage());
			throw new ServiceExceptionWrapper(e);
		}
		finally
		{
			try
			{
				if(session != null)
				{
					session.close(); // Session closes
				}
			}
			catch (Exception e2)
			{
				LOGGER.error("## Exception occured:" + e2.getMessage());
				throw new ServiceExceptionWrapper(e2);
			}
		}
		return result;
	}


}
