package server;



import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fazecast.jSerialComm.SerialPort;


public class AbootManglagiri {

	private static List<String> resultPacketList = new ArrayList();
	private static String sampleNo;
	private static String tcc;
	private static int nakCount=0;
	private static String lastpkttobeSent;;


	public static void main(String[] args) {


		Map res = ReadPropertyFile.getPropertyValues();
		String portName =     (String) res.get("portname");

		//  static String portname = (String) res.get("portname");

		char cr = 13;
		char lf = 10;
		char etx='';

		char stx='';
		char NAK='';
		
		SerialPort serialPort = SerialPort.getCommPort(portName);
		serialPort.setBaudRate(115200);
		serialPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 500, 0);
		System.out.println("***********Abott Manglagiri Solution*************");
		System.out.println("Port "+portName+" open successfully...");
		System.out.println();
		while(true) {
			if (serialPort.openPort()) {
				try {

					OutputStream outputStream = serialPort.getOutputStream();

					String dataToSend = "0I "+cr+lf+"^"+"";    //  new initilization data packet with charcter


					String newPacketLRC = "";

					outputStream.write(dataToSend.getBytes());
					outputStream.flush();

					byte[] buffer = new byte[2048];
					int len;
					StringBuilder response = new StringBuilder();
					StringBuilder receivedData = new StringBuilder();
					StringBuilder resultPacket = new StringBuilder();

					// Create a thread to continuously read data from the port
					StringBuffer databuffer= new StringBuffer();
					String SampleNo="";
					List<String> list = new ArrayList<String>();

					Map<String, List> mp = new HashMap();  //added by Rohit...
					List <String> testCode = new ArrayList<>();
					List <String> testValue = new ArrayList<>();
					List <String> testCodeupdated = new ArrayList<>();
					List <String> testValueupdated = new ArrayList<>();

					
					
					int charCount=0;
					while (true) {


						int numRead = serialPort.readBytes(buffer, buffer.length);

						if (numRead > 0) {
							for (int i = 0; i < numRead; i++) {
								char c = (char) buffer[i];

								receivedData.append(c);

								char nextCh=(char) buffer[i+1];
								byte[] buffer1 = new byte[1024];
								
								long bytesToWrite=10;
								byte[] ackBytes = { 0x06 } ; // ASCII code for ACK character

								//ACK MSG
								outputStream.write(ackBytes);
								outputStream.flush();
								//end ACK msg
								
								
							//	System.out.println("count"+charCount);
								if(c=='~' && charCount<1) {
									//System.out.println("Data Recieved From Machine ::  "+receivedData.toString());

									charCount++;
									//receivedData.setLength(0);

								}

								else if ( charCount==1 && c=='~') {
									
									charCount=0;
									System.out.println("Data Recieved From Machine ::  "+receivedData.toString());
									
									
									
									String[] resPkt=receivedData.toString().split(Character.toString(cr)+Character.toString(lf));
									int lineCount=0;
									
									
									String sampleNopkt=resPkt[3];
									
//									String samNopkt=resPkt[3].substring(7);
//									//System.out.println("Sample No. packet: "+samNopkt);
//									int startIndex=samNopkt.indexOf("(");
//									int endIndex=samNopkt.indexOf(")");
//									SampleNo=samNopkt.substring(startIndex+1,endIndex);
									for(int j=4;j<resPkt.length;j++) {
										lineCount++;
										//System.out.println("Linee :: "+resPkt[j]);
										String tc=resPkt[j].substring(0,3);
										if(!resPkt[j].contains("SD")) {
										if(testCode.size()<10){
											testCode.add(tc);
												
											
										}}

										
										
										
										if(resPkt[j].contains("ID(")) {
											
											int startIndex=resPkt[j].indexOf("(");
											int endIndex=resPkt[j].indexOf(")");
											SampleNo=resPkt[j].substring(startIndex+1,endIndex);
											SampleNo=SampleNo.replaceAll(" ","");
										}
										
										
										
										if(resPkt[j].contains("norm")) {
											String tv=resPkt[j].substring(15);
											//tv=tv.replaceAll(".","");
											tv=tv.replaceAll(" ","");
											tv=tv.replaceAll("RBC/ul","");
											tv=tv.replaceAll("WBC/ul","");//
											tv=tv.replaceAll("mg/dl","");
											tv=tv.replaceAll("\\>","");
											tv=tv.replaceAll("\\<","");
											if(testValue.size()<10){
												if( Double.valueOf(tv)<=0.9) {
													
													testValue.add("Negative");
												}
												else if(Double.valueOf(tv)>=1) {
													testValue.add("Positive");}
											
											
										//	testValue.add("Noraml");
											
											}
											
											
										}
										
										
										
										else if(resPkt[j].contains("pos")) {
											String tv=resPkt[j].substring(15);
											//tv=tv.replaceAll(".","");
											tv=tv.replaceAll(" ","");
											tv=tv.replaceAll("RBC/ul","");
											tv=tv.replaceAll("WBC/ul","");//
											tv=tv.replaceAll("mg/dl","");
											tv=tv.replaceAll("\\>","");
											tv=tv.replaceAll("\\<","");
											if(testValue.size()<10){
												testValue.add("Positive");
											
										//	testValue.add("Noraml");
											
											}}
										
										else if(resPkt[j].contains("+")) {
											String tv=resPkt[j].substring(16);
											//tv=tv.replaceAll(".","");
											tv=tv.replaceAll(" ","");
											tv=tv.replaceAll("RBC/ul","");
											tv=tv.replaceAll("mg/dl","");
											tv=tv.replaceAll("WBC/ul","");
											tv=tv.replaceAll("\\>","");
											tv=tv.replaceAll("\\<","");
											
											char someChar = '+';
											int count = 0;
											 
											for (int k = 0; k < resPkt[j].length(); k++) {
											    if (resPkt[j].charAt(k) == someChar) {
											        count++;
											    }
											   }
											if(testValue.size()<10){
												if(count==1) {
													testValue.add("+");
													
												}
												else if(count==2) {
													testValue.add("++");
												}
												else if(count==3) {
														testValue.add("+++");
												}
												else if(count==4) {
														testValue.add("++++");
												}
											
											}
										
											
										}
										else if(resPkt[j].contains("neg")) {
											String tv=resPkt[j].substring(18);
											tv=tv.replaceAll("RBC/ul","");
											tv=tv.replaceAll("mg/dl","");
											tv=tv.replaceAll("WBC/ul","");
											//testValue.add(tv);
											tv=tv.replaceAll("\\>","");
											tv=tv.replaceAll("\\<","");
											if(testValue.size()<10){
											testValue.add("Negative");
											}
										}
										
//										else if(resPkt[j].contains("SD")) {
//											
//										
//
//											
//											
//										}
										else {
											System.out.println(resPkt[j].contains("SD"));
											if(!resPkt[j].contains("SD")) {
											String tv=resPkt[j].substring(17);
											if(testValue.size()<10){
												tv=tv.replaceAll("\\>","");
												tv=tv.replaceAll("\\<","");
												testValue.add(tv);
											
											}}
											
										}
										

									}
									
									 mp.put("TestCode",testCode);
                            		 mp.put("TestValue",testValue);
									 ABC abc = new ABC();
                            		 
									 System.out.println("Sample No.  : " +SampleNo );
									 //System.out.println("testCode Size : " +testCode.size() );

									 System.out.println("testCode: " +testCode );

									// System.out.println("testValue Size: " +testValue.size() );
									 System.out.println("testValue: " +testValue);
									 abc.insert_SysmexXN350(mp,SampleNo); 
									 testValue.clear();
									 testCode.clear();
									 receivedData.setLength(0);
									
									
									
									
								}

							}




						}

						else {
							//System.out.println("Port is free");

						}


						try {
							Thread.sleep(100);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					// Close the port when done
					serialPort.closePort();
				}
			} else {
				//System.out.println("Error: Unable to open the serial port.");
			}
		}}




}


