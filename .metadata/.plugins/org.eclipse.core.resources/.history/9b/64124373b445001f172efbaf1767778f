/*******************************************************************************
 * © 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.infosys.common.GeneratedEntities;
// Generated Sep 27, 2017 6:38:24 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
//import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.infosys.common.audit.interceptor.IAuditLog;
/**
 * Patient generated by hbm2java
 */
@Entity
@Table(name = "patient", catalog = "intraop_dev", uniqueConstraints = { @UniqueConstraint(columnNames = "CRNumber"),
        @UniqueConstraint(columnNames = "AddressID") })
public class Patient implements java.io.Serializable, IAuditLog
{

	private Integer patientId;
	@OneToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="AddressID")
	private Address address;
	private String firstName;
	private String lastName;
	private long crnumber;
	private String gender;
	private String bloodGroup;
	private Integer age;
	private String ageUnit;
	private Date dob;
	private float weight;
	private float height;
	private Float bmi;
	private Float bsa;
	private String mobilephone;
	private String homePhone;
	private String emergencyName;
	private String guardianName;
	private String email;
	private Boolean isDeleted;
	private String createdBy;
	private Date createdTime;
	private String updatedBy;
	private Date updatedTime;


	private Set<IntraopAnesthesiarecord> intraopAnesthesiarecords = new HashSet<IntraopAnesthesiarecord>(0);
	private Set<IntraopOutput> intraopOutputs = new HashSet<IntraopOutput>(0);
	private Set<Pac> pacs = new HashSet<Pac>(0);
	private Set<IntraopMedicationlog> intraopMedicationlogs = new HashSet<IntraopMedicationlog>(0);
	private Set<Answerset> answersets = new HashSet<Answerset>(0);
	private Set<IntraopEventlog> intraopEventlogs = new HashSet<IntraopEventlog>(0);
	private Set<Patientcase> patientcases = new HashSet<Patientcase>(0);

	public Patient()
	{
	}

	public Patient(String firstName, long crnumber, String gender, float weight, float height)
	{
		this.firstName = firstName;
		this.crnumber = crnumber;
		this.gender = gender;
		this.weight = weight;
		this.height = height;
	}

	public Patient(Address address, String firstName, String lastName, long crnumber, String gender, Integer age,
	        String ageUnit, Date dob, float weight, float height, Float bmi, Float bsa, String mobilephone,
	        String homePhone, String emergencyName, String guardianName, String email, Boolean isDeleted,
	        Set<IntraopAnesthesiarecord> intraopAnesthesiarecords, Set<IntraopOutput> intraopOutputs, Set<Pac> pacs,
	        Set<IntraopMedicationlog> intraopMedicationlogs, Set<Answerset> answersets,
	        Set<IntraopEventlog> intraopEventlogs, Set<Patientcase> patientcases)
	{
		this.address = address;
		this.firstName = firstName;
		this.lastName = lastName;
		this.crnumber = crnumber;
		this.gender = gender;
		this.age = age;
		this.ageUnit = ageUnit;
		this.dob = dob;
		this.weight = weight;
		this.height = height;
		this.bmi = bmi;
		this.bsa = bsa;
		this.mobilephone = mobilephone;
		this.homePhone = homePhone;
		this.emergencyName = emergencyName;
		this.guardianName = guardianName;
		this.email = email;
		this.isDeleted = isDeleted;
		this.intraopAnesthesiarecords = intraopAnesthesiarecords;
		this.intraopOutputs = intraopOutputs;
		this.pacs = pacs;
		this.intraopMedicationlogs = intraopMedicationlogs;
		this.answersets = answersets;
		this.intraopEventlogs = intraopEventlogs;
		this.patientcases = patientcases;
	}

	private static final long serialVersionUID = 1L;
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "PatientID", unique = true, nullable = false)
	public Integer getPatientId()
	{
		return this.patientId;
	}

	public void setPatientId(Integer patientId)
	{
		this.patientId = patientId;
	}

	@OneToOne(cascade=CascadeType.ALL)
	@JoinColumn(name = "AddressID")
	public Address getAddress() {
		return this.address;
	}

	public void setAddress(Address address)
	{
		this.address = address;
	}

	@Column(name = "FirstName", nullable = false, length = 50)
	public String getFirstName()
	{
		return this.firstName;
	}

	public void setFirstName(String firstName)
	{
		this.firstName = firstName;
	}

	@Column(name = "LastName", length = 50)
	public String getLastName()
	{
		return this.lastName;
	}

	public void setLastName(String lastName)
	{
		this.lastName = lastName;
	}

	@Column(name = "CRNumber", unique = true, nullable = false)
	public long getCrnumber()
	{
		return this.crnumber;
	}

	public void setCrnumber(long crnumber)
	{
		this.crnumber = crnumber;
	}

	@Column(name = "Gender", nullable = false, length = 20)
	public String getGender()
	{
		return this.gender;
	}

	public void setGender(String gender)
	{
		this.gender = gender;
	}

	@Column(name = "BloodGroup", length = 10)
	public String getBloodGroup()
	{
		return this.bloodGroup;
	}

	public void setBloodGroup(String bloodGroup)
	{
		this.bloodGroup = bloodGroup;
	}

	@Column(name = "Age")
	public Integer getAge()
	{
		return this.age;
	}

	public void setAge(Integer age)
	{
		this.age = age;
	}

	@Column(name = "AgeUnit", length = 45)
	public String getAgeUnit()
	{
		return this.ageUnit;
	}

	public void setAgeUnit(String ageUnit)
	{
		this.ageUnit = ageUnit;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DOB", length = 10)
	public Date getDob()
	{
		return this.dob;
	}

	public void setDob(Date dob)
	{
		this.dob = dob;
	}

	@Column(name = "weight", nullable = false, precision = 5)
	public float getWeight()
	{
		return this.weight;
	}

	public void setWeight(float weight)
	{
		this.weight = weight;
	}

	@Column(name = "height", nullable = false, precision = 5)
	public float getHeight()
	{
		return this.height;
	}

	public void setHeight(float height)
	{
		this.height = height;
	}

	@Column(name = "bmi", precision = 5)
	public Float getBmi()
	{
		return this.bmi;
	}

	public void setBmi(Float bmi)
	{
		this.bmi = bmi;
	}

	@Column(name = "bsa", precision = 5)
	public Float getBsa()
	{
		return this.bsa;
	}

	public void setBsa(Float bsa)
	{
		this.bsa = bsa;
	}

	@Column(name = "mobilephone", length = 10)
	public String getMobilephone()
	{
		return this.mobilephone;
	}

	public void setMobilephone(String mobilephone)
	{
		this.mobilephone = mobilephone;
	}

	@Column(name = "HomePhone", length = 12)
	public String getHomePhone()
	{
		return this.homePhone;
	}

	public void setHomePhone(String homePhone)
	{
		this.homePhone = homePhone;
	}

	@Column(name = "EmergencyName", length = 50)
	public String getEmergencyName()
	{
		return this.emergencyName;
	}

	public void setEmergencyName(String emergencyName)
	{
		this.emergencyName = emergencyName;
	}

	@Column(name = "GuardianName", length = 50)
	public String getGuardianName()
	{
		return this.guardianName;
	}

	public void setGuardianName(String guardianName)
	{
		this.guardianName = guardianName;
	}

	@Column(name = "Email", length = 50)
	public String getEmail()
	{
		return this.email;
	}

	public void setEmail(String email)
	{
		this.email = email;
	}

	@Column(name = "IsDeleted")
	public Boolean getIsDeleted()
	{
		return this.isDeleted;
	}

	public void setIsDeleted(Boolean isDeleted)
	{
		this.isDeleted = isDeleted;
	}

	@Column(name = "CreatedBy", length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedTime", length = 19)
	public Date getCreatedTime() {
		return this.createdTime;
	}

	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	@Column(name = "UpdatedBy", length = 45)
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UpdatedTime", length = 19)
	public Date getUpdatedTime() {
		return this.updatedTime;
	}

	public void setUpdatedTime(Date updatedTime) {
		this.updatedTime = updatedTime;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<IntraopAnesthesiarecord> getIntraopAnesthesiarecords()
	{
		return this.intraopAnesthesiarecords;
	}

	public void setIntraopAnesthesiarecords(Set<IntraopAnesthesiarecord> intraopAnesthesiarecords)
	{
		this.intraopAnesthesiarecords = intraopAnesthesiarecords;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<IntraopOutput> getIntraopOutputs()
	{
		return this.intraopOutputs;
	}

	public void setIntraopOutputs(Set<IntraopOutput> intraopOutputs)
	{
		this.intraopOutputs = intraopOutputs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<Pac> getPacs()
	{
		return this.pacs;
	}

	public void setPacs(Set<Pac> pacs)
	{
		this.pacs = pacs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<IntraopMedicationlog> getIntraopMedicationlogs()
	{
		return this.intraopMedicationlogs;
	}

	public void setIntraopMedicationlogs(Set<IntraopMedicationlog> intraopMedicationlogs)
	{
		this.intraopMedicationlogs = intraopMedicationlogs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<Answerset> getAnswersets()
	{
		return this.answersets;
	}

	public void setAnswersets(Set<Answerset> answersets)
	{
		this.answersets = answersets;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<IntraopEventlog> getIntraopEventlogs()
	{
		return this.intraopEventlogs;
	}

	public void setIntraopEventlogs(Set<IntraopEventlog> intraopEventlogs)
	{
		this.intraopEventlogs = intraopEventlogs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<Patientcase> getPatientcases()
	{
		return this.patientcases;
	}

	public void setPatientcases(Set<Patientcase> patientcases)
	{
		this.patientcases = patientcases;
	}

	@Transient
	@Override
	public Long getId()
	{
		return (long) patientId;
	}
	@Transient
	@Override
	public String getLogDeatil()
	{
		return toString();
	}
	@Transient
	@Override
	public String toString()
	{
		return "CreatePatientEntity [patientID=" + patientId + ", firstName=" + firstName + ", lastName=" + lastName
		        + ", cRNumber=" + crnumber + ", gender=" + gender + ", age=" + age + ", ageUnit=" + ageUnit + ", dob="
		        + dob + ", address=" + address + ", weight=" + weight + ", height=" + height + ", bmi=" + bmi + ", bsa="
		        + bsa + ", mobilePhone=" + mobilephone + ", homePhone=" + homePhone + ", emergencyName=" + emergencyName
		        + ", guardianName=" + guardianName + ", email=" + email + ", isDeleted=" + isDeleted + "]";
	}
}
