/*******************************************************************************
 * © 2018-2019 Infosys Limited, Bangalore, India. All Rights Reserved. 
 * Version: 1.0.0.0
 *
 * This Program is protected by copyright laws, international treaties and other pending or existing intellectual property rights in India, the United States and other countries. Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law. 
 *******************************************************************************/
package com.infosys.common.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.infosys.common.GeneratedEntities.IcuPlanEntity;
import com.infosys.common.audit.interceptor.AuditLogInterceptor;
import com.infosys.common.util.HibernateUtilities;
import com.infosys.framework.exceptions.ServiceExceptionWrapper;

/**
 * @author rohi.bhardwaj
 *
 */
public class IcuPlanDaoImpl implements IcuPlanDao {
	private static final Logger LOGGER = Logger.getLogger(IcuPlanDaoImpl.class.getName());
	private static IcuPlanDaoImpl instance = null;

	private IcuPlanDaoImpl() {

	}

	public static IcuPlanDaoImpl getInstance() {
		if (instance == null) {
			instance = new IcuPlanDaoImpl();
		}
		return instance;
	}

	@Override
	public void saveOrUpdate(IcuPlanEntity icuPlan,String userName) throws Exception {
		LOGGER.debug("Logger Name: " + LOGGER.getName());
		Session session = null;
	//	Integer icuPlanId = 0;
		try {
			// opens a new session from the session factory
			SessionFactory sessionFactory = HibernateUtilities.createSessionFactory();

			// For logging audit record
			AuditLogInterceptor interceptor = new AuditLogInterceptor();
			session = sessionFactory.withOptions().interceptor(interceptor).openSession();
			interceptor.setSession(session);
			interceptor.setUserName(userName);
			session.getTransaction().begin();

			if (icuPlan.getIcuPlanId() != null) {
				Date updatedTime = new Date();
				icuPlan.setUpdatedBy(userName);
				icuPlan.setUpdatedTime(updatedTime);
			} else {
				Date createdTime = new Date();
				icuPlan.setCreatedBy(userName);
				icuPlan.setCreatedTime(createdTime);
			}
			session.saveOrUpdate(icuPlan);
			//icuPlanId = icuPlan.getIcuPlanId();

			// commits the session
			session.getTransaction().commit();
		} catch (Exception e) {
			if (session != null && session.getTransaction() != null) {
				// If transaction is open,rollback
				session.getTransaction().rollback();
			}
			LOGGER.error("## Exception occured:" + e.getMessage());
			throw new ServiceExceptionWrapper(e);
		} finally {
			try {
				if (session != null) {
					session.close(); // Session closes
				}
			} catch (Exception e2) {
				LOGGER.error("## Exception occured:" + e2.getMessage());
				throw new ServiceExceptionWrapper(e2);
			}
		}

	}

	@SuppressWarnings("unchecked")
	@Override
	public IcuPlanEntity getIcuPlanDetails(long caseId, String userName) throws Exception {

		LOGGER.debug("Logger Name: " + LOGGER.getName());
		Session session = null;
		List<IcuPlanEntity> icuPlanRecords = new ArrayList<>();

		try {

			// opens a new session from the session factory
			SessionFactory sessionFactory = HibernateUtilities.createSessionFactory();

			// For logging audit record
			AuditLogInterceptor interceptor = new AuditLogInterceptor();
			session = sessionFactory.withOptions().interceptor(interceptor).openSession();
			interceptor.setSession(session);
			interceptor.setUserName(userName);
			session.getTransaction().begin();

			// Get event log
			Query query = session.createQuery("FROM IcuPlanEntity c " + " where c.caseId=?");
			query.setParameter(0, caseId);
			icuPlanRecords = query.list();
			session.getTransaction().commit();
		} catch (Exception e) {
			if (session != null && session.getTransaction() != null) {
				// If transaction is open,rollback
				session.getTransaction().rollback();
			}
			LOGGER.error("## Exception occured:" + e.getMessage());
			throw new ServiceExceptionWrapper(e);
		} finally {
			try {
				if (session != null) {
					session.close(); // Session closes
				}
			} catch (Exception e2) {
				LOGGER.error("## Exception occured:" + e2.getMessage());
				throw new ServiceExceptionWrapper(e2);
			}
		}

		if (icuPlanRecords.size() > 0) {
			return icuPlanRecords.get(0);
		} else {
			return new IcuPlanEntity();
		}

		}

}
