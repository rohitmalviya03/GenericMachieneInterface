package Server;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fazecast.jSerialComm.SerialPort;
import com.formdev.flatlaf.FlatLightLaf;

import Server.ABC;
import java.util.Arrays;
import java.util.List;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.zip.CRC32;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//Machine Interface GUI   ......###########........... TCP/IP , Serial Communication 
public class AVEBPL {

	
	static Map res = ReadPropertyFile.getPropertyValues();
	//static String server_ip = (String) res.get("server_ip");
	//static String server_port = (String) res.get("server_port");
	   private static final String FILE_NAME = "c:/TcpFiles/property/monitor_data.txt"; // File to save the data
	   private static final String PARAM_FILE_NAME="c:/TcpFiles/property/monitor_param_data.xlsx";
	   private static final SimpleDateFormat TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	 
	public static void cllientConnect(String serverip, String portNumber) {
    //    String hostname = server_ip;
        int port =Integer.parseInt(portNumber);

        
        
        
        
        
      //  String serverAddress = server_ip; // Replace with your server's IP address
     //   int serverPort = 12345; // Replace with your server's port number
        
        try {
            // Connect to the server
            Socket socket = new Socket(serverip, port);
            System.out.println("Connected to server");
            GenericServer.logMessage("Connected to server On : "+serverip+" : "+portNumber, Color.BLACK);
            System.out.println("Server Ip :"+serverip);
            System.out.println("Port :"+portNumber);
            // Setup input and output streams
            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter output = new PrintWriter(socket.getOutputStream(), true);

            // Communication loop
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String message;
            int red = -1;
			byte[] buffer = new byte[800 * 1024]; // a read buffer of 5KiB
			byte[] redData;
			StringBuilder clientData = new StringBuilder();
			String redDataText = "";
			char fsChar = 0x1C;
		 	
		 	char crChar=0x0D;
		 	
		 	
		 	char crnull= 0x00;
		 	
		 	String data="MSH|^~\\&|LIS|LAB|myla|BMX|20240820163600||OML^O33^OML_O33|MSG-20240820-163600-0377|P|2.5.1|||NE|AL||UNICODE UTF-8 \n\n"
		 	+ "PID|||400450243||PAA^DONI^^^^^nill|PADMAJA|19620820|F|||nill^^nill^^nill^nill|||||S| \n\n"
		 	+ "PV1||E|ACUTE-A M C U-III^AMC  6N-27(ICU)^^AIIMSMG^^^^^AMC  6N-27(ICU)^||||^RAJESH BOLLAM||||||||||||1657550     \n\n"
		 	+ "SPM|1|68182||RESP^RESP^99BMx|||^^|^^|||P^Patient^||||||20240820163525|\n\n"
		 	+ "SAC||||24008672 \n\n"
		 	+ "ORC|NW||||||||20240820163525\n\n"
		 	+ "TQ1|||||||||R^^\n\n"
		 	+ "OBR|1|714647||SU^SU^99BMx||||||^^||||||^RAJESH BOLLAM";
		 	
		 	StringBuffer orderPacket = new StringBuffer();
		 	orderPacket.append("MSH|^~\\&|LIS|LAB|myla|BMX|20240820163600||OML^O33^OML_O33|MSG-20240820-163600-0377|P|2.5.1|||NE|AL||UNICODE UTF-8").append("\n");
		 	orderPacket.append("PID|||400450243||PAA^DONI^^^^^nill|PADMAJA|19620820|F|||nill^^nill^^nill^nill|||||S|").append("\n");
		 	orderPacket.append("PV1||E|ACUTE-A M C U-III^AMC  6N-27(ICU)^^AIIMSMG^^^^^AMC  6N-27(ICU)^||||^RAJESH BOLLAM||||||||||||1657550").append("\n");;
		 	orderPacket.append("SPM|1|68182||RESP^RESP^99BMx|||^^|^^|||P^Patient^||||||20240820163525|").append("\n");
		 	orderPacket.append("SAC||||24008672").append("\n");
		 	orderPacket.append("ORC|NW||||||||20240820163525").append("\n");
		 	orderPacket.append("TQ1|||||||||R^^").append("\n");
		 	orderPacket.append("OBR|1|714647||SU^SU^99BMx||||||^^||||||^RAJESH BOLLAM").append("\n");
		 //	GenericServer.logMessage("Data Sent :"+orderPacket, Color.MAGENTA);
			  
		 	//output.write(orderPacket.toString());
			//output.flush();
			while ((red = socket.getInputStream().read(buffer)) > -1) // **Code Starts For Receiving Client
				// Messages
{
				
				redData = new byte[red];
				
				System.arraycopy(buffer, 0, redData, 0, red);
				
				redDataText = new String(redData,"UTF-8"); 
				//System.out.println("Data  RECIEVED  22:- " + redDataText);
				  //redDataText= redDataText.replaceAll("\\s", "");
				  //redDataText= redDataText.replaceAll(Character.toString((char) 0x00), "");
				 char[] character_array = redDataText.toCharArray();
				System.out.println("Data  RECIEVED :- " + redDataText);
				saveToFile(redDataText);
				 GenericServer.logMessage("Data  RECIEVED :- " + redDataText, Color.black);
				String[] strData=redDataText.split(Character.toString(fsChar));
				
				
						
						
					//	for(String strPKT:strData) {
						//	System.out.println("MESSAGE PART RECIEVED2:- " + redDataText);
							
							 	String sampleName = "";
							 	String msgtype="";
							 	boolean isStandBy=false;
							 	//GenericServer.logMessage("Monitoring starts :", Color.MAGENTA);
							 	//redDataText=redDataText.replaceAll("\\s","");
							 	
							 	String[] segments1 = redDataText.split(Character.toString(crChar));
							   Map<String, List> mp = new HashMap();  		//added by Rohit...
								List <String> testCode = new ArrayList<>();
								List <String> testValue = new ArrayList<>();
								List<String> sampleNo=new ArrayList<>();
						       for (String segment : segments1) {
						    	  // 
						    	 
						    	   //segment= segment.replaceAll("\\s","");
						    	  // GenericServer.logMessage("segment :"+segment, Color.MAGENTA);
						    	   segment= segment.replaceAll( Character.toString(crnull),"");
						    	   String demo="M"+crnull+"S"+crnull+"H";
						        	if (segment.contains("M S H") || segment.contains(demo) || segment.contains("MSH")) {
						        		//  GenericServer.logMessage("MSH :"+segment, Color.MAGENTA);
						        		 // System.out.println("MSH"+segment);
							      		String[] parts = segment.split("\\|");

							      		
							      		String value=parts[8];
							      		String[] MSH = value.split("\\^");
							      	
							      		msgtype=MSH[0];
							      		System.out.println("Incoming msg Type :"+msgtype);
							      		GenericServer.logMessage("Incoming msg Type :"+msgtype, Color.BLUE);
							      	    if(msgtype.equals("O R U") ||msgtype.equals("O"+crnull+"R"+crnull+"U")||msgtype.equals("ORU") ) {  ///sending ACK when result recieved
							      	    	 Date currentDate = new Date();

							      	        // Define the desired date format
							      	        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");

							      	        // Format the date
							      	        String formattedDate = dateFormat.format(currentDate);

							      	        // Print the formatted date
							      	        System.out.println("Formatted Date: " + formattedDate);
							      	    	String controlid=parts[9];
							      	    	String resACK1="MSH|^~\\&|host||cobas pure||YYYYMMDDHHMMSS||ACK^R22^ACK|CONTROLID||2.5.1||||NE||UNICODE UTF-8|\n"
								        	 		+ "MSA|AA|CONTROLID||\n"
								        	 		+ "";
							      	    	StringBuilder msg = new StringBuilder();
							      	    	
							      	    	
							      	    	msg.append("MSH|^~\\&|||||YYYYMMDDHHMMSS||ACK^R01|1|P|2.3.1||||||UNICODE||").append("\n");
							      	    	msg.append("MSA|AA|1||||0");
							      	    //	msg.append("MSH|^~\\&|host||cobas pure||YYYYMMDDHHMMSS||ACK^R22^ACK|CONTROLID||2.5.1||||NE||UNICODE UTF-8|").append("\n");
							      	    //	msg.append("MSA|AA|CONTROLID||").append("\n");
							      	    //	msg.append("MSA|AA|CONTROLID||").append("\n");
							      	    	msg.append((char)0x1C).append("\n");
							      	    	
							      	    	String resACK=msg.toString();
							      	    	resACK=resACK.replaceAll("CONTROLID",controlid);
							      	    	resACK=resACK.replaceAll("YYYYMMDDHHMMSS",formattedDate);
							      	    	
							      	    	//cout.print(resACK);
							      	  	
											output.write(resACK);
											output.flush();
							      	    	System.out.println("ACK SENT :" + resACK);
							      	    	GenericServer.logMessage("ACK SENT :" + resACK, Color.BLUE);
							      	    
							      	    }
							      	    
							      	    
							      	}
						        	
						        	
						        	if(msgtype.equals("O R U") ||msgtype.trim().equals("O"+crnull+"R"+crnull+"U")||msgtype.trim().equals("ORU")) {
						        		
						        		if (segment.trim().contains("O B R")||segment.trim().contains("O"+crnull+"B"+crnull+"R")||segment.trim().contains("OBR")) {
						        			
						        			String[] obtPkt=segment.split("\\|");
						        			sampleName=obtPkt[2];
						        			System.out.println("Sample No :  "+sampleName);
						        			GenericServer.logMessage("Sample No :  "+sampleName, Color.BLUE);
								      	    				        			
						        		}
						        	 
						        		
						        	}
						      
							
						String trestString="GLU,BLD,LEU,PRO,NIT,URO,URO,BIL,KET,PH,SG,VC,ALB,Cr";
						    
						       
						      // if(msgtype.trim().equals("O R U")||msgtype.trim().equals("ORU") || msgtype.trim().equals("O"+crnull+"R"+crnull+"U")|| segment.trim().contains("S P M")) {
						    	
						if(msgtype.trim().equals("O R U")||msgtype.trim().equals("ORU") || msgtype.trim().equals("O"+crnull+"R"+crnull+"U")|| msgtype.trim().contains("S P M")) {
							 GenericServer.logMessage("inside ORU check check", Color.BLUE);
							     
							 segment= segment.replaceAll(Character.toString(crnull), "");
			                 segment=segment.replaceAll("\\s", "");
			               //  GenericServer.logMessage("segment"+segment, Color.BLUE);
							    	if (segment.contains("OBX")||segment.contains("O B X") || segment.contains("O"+crnull+"B"+crnull+"X")|| segment.trim().startsWith("O B X")||segment.startsWith(crnull+"O"+crnull+"B"+crnull+"X")) {
							            // Split the line by the pipe character "|"
							    	

					             		 GenericServer.logMessage("inside OBX check check", Color.BLUE);
							    		String[] parts = segment.split("\\|");
							    		 
							    		 
										    
							                 // Extract and print the value after the 4th pipe
							                 String tccodevalue = parts[3];
							                 
							                  			
							                 String[] tc = tccodevalue.split("\\^");
							                
							                 GenericServer.logMessage("segment " + segment, Color.BLUE);
										      
							             	if(segment.contains("G"+crnull+"L"+crnull+"U")||
							             			tc[0].equals("BLD")||
							             			tc[0].equals("LEU")||
							             			tc[0].equals("PRO")||
							             			tc[0].equals("NIT")||
							             			tc[0].equals("URO")||
							             			tc[0].equals("BIL")||
							             			tc[0].equals("PH")||
							             			tc[0].equals("SG")||
							             			tc[0].equals("VC")||
							             			tc[0].equals("ALB")||
							             			tc[0].equals("Cr") ||
							             			tc[0].equals("RbcPF") ||
							             			tc[0].equals("WbcPF") ||
							             			tc[0].equals("CrystalPF") ||
							             			tc[0].equals("EpitheliaPF") ||
							             			tc[0].equals("BacterialPF") ||
							             			tc[0].equals("Mucous") ||
							             			tc[0].equals("CCrystal") ||
							             			tc[0].equals("Cr") ||
							             			tc[0].equals("Cr") 
								    										    									    				
								    				) {
								    			
								    			
							             		 GenericServer.logMessage("inside test check", Color.BLUE);
												    
							                 
							                 
							                  testCode.add(tc[0]);
							           
							             
							             
							           
							                 // Extract and print the value after the 4th pipe
							                 String tcvalue = parts[4];
							                 
							                // if(value.equals("WBC")|| value.equals("NEU#") || value.equals("LYM#") || value.equals("MON#") || value.equals("EOS#") || value.equals("BAS#") || value.equals("IMG#") || value.equals("NEU%") || value.equals("LYM%") || value.equals("MON%") || value.equals("EOS%") || value.equals("BAS%") || value.equals("IMG%") || value.equals("RBC") || value.equals("HGB") || value.equals("HCT") || value.equals("MCV") || value.equals("MCH") || value.equals("MCHC") || value.equals("RDW-CV") || value.equals("RDW-SD") || value.equals("PLT") || value.equals("MPV") || value.equals("PDW") || value.equals("PCT") || value.equals("PLCC") || value.equals("NRBC#") || value.equals("NRBC%") || value.equals("PLCR") ) {
							                  			
							                 //String[] tv = value.split("\\^");
							                 System.out.println("Test Code " + tc[0]);
							                 System.out.println("Test Value " + tcvalue);
							                 
							                 GenericServer.logMessage("Test Code " + tc[0], Color.BLUE);
							                 GenericServer.logMessage("Test Value " + tcvalue, Color.BLUE);
									      	    
							                // double number = Double.parseDouble(value);
								            // double truncatedNumber = (int) (number * 10) / 10.0;
								            // System.out.println("truncatedNumber"+truncatedNumber);
								            // String result = String.format("%.1f", truncatedNumber);
								            
							                 testValue.add(tcvalue);
							                 
							//continue;
							            
							            
							    	
							    	//}
										
							    	}}
							    	
							    	
								      
								     // System.out.println(testValue);  
								     
								       
							         }		       
						       }
						       
						       if(msgtype.trim().equals("O R U")||msgtype.trim().equals("ORU") || msgtype.trim().equals("O"+crnull+"R"+crnull+"U")|| msgtype.trim().contains("S P M")) {
							        ABC abc =  new ABC();

								     System.out.println("Sample No:"+sampleName);
								       // System.out.println("Total Test Fetched from MSG"+count);
								      System.out.println("Total Test Entered"+testCode.size());  
								      mp.put("TestCode", testCode);
								      mp.put("TestValue", testValue);
								     	//mp.put("SampleNO",sampleNo);
								     	 
								        System.out.println(testCode);  
										   
								        System.out.println(testValue);  
								        
								        GenericServer.logMessage("testCode: " + testCode, Color.BLUE);
								        GenericServer.logMessage("testValue: " + testValue, Color.BLUE);
								      	 
							        if(!sampleName.equals(null) || !sampleName.equals("") )
							        	//System.out.println("API CALL FOR INSERT");
							    	abc.insert_SysmexXN350COBAS(mp,sampleName);
							        
							        }
}
			
          } catch (Exception e) {
            e.printStackTrace();
        }
    
        
        
        
	}
        
	  private static void saveToFile(String data) {
	        try (FileWriter fw = new FileWriter(FILE_NAME, true);
	             BufferedWriter bw = new BufferedWriter(fw);
	             PrintWriter out = new PrintWriter(bw)) {
	            String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
	            //out.println("Reecived << "+timestamp + " - " + data);
	        } catch (IOException e) {
	            System.err.println("Error writing to file: " + e.getMessage());
	        }
	    } 
       
}
